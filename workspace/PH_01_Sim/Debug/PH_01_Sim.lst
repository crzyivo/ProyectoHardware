
PH_01_Sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000138c  0c000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000058  0c001390  0c001390  00009390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000048  0c0013e8  0c0013e8  000093e8  2**3
                  ALLOC
  3 .ARM.attributes 0000002e  00000000  00000000  000093e8  2**0
                  CONTENTS, READONLY
  4 .comment      0000002a  00000000  00000000  00009416  2**0
                  CONTENTS, READONLY
  5 .debug_line   00000211  00000000  00000000  00009440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070f  00000000  00000000  00009651  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b2  00000000  00000000  00009d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000040  00000000  00000000  00009f18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 000020fc  00000000  00000000  00009f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b8  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00000115  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001a3  00000000  00000000  0000c321  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000168  00000000  00000000  0000c4c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c000000 <start>:
.global	start
start:
.arm /*indicates that we are using the ARM instruction set */
#------standard initial code
# --- Setup interrupt / exception vectors 
      B       Reset_Handler 
 c000000:	eaffffff 	b	c000004 <Reset_Handler>

0c000004 <Reset_Handler>:
# Reset Handler:
# the processor starts executing this code after system reset       
#######################################################################################################
Reset_Handler:  
#        
        MOV     sp, #0x4000      /*  set up stack pointer (r13) */ 
 c000004:	e3a0d901 	mov	sp, #16384	; 0x4000

.extern     reversi8
        ldr         r5, = reversi8
 c000008:	e59f5008 	ldr	r5, [pc, #8]	; c000018 <stop+0x4>
        mov         lr, pc 
 c00000c:	e1a0e00f 	mov	lr, pc
        bx          r5 
 c000010:	e12fff15 	bx	r5

0c000014 <stop>:


stop: 	
 		B     	stop    	/*  end of program */
 c000014:	eafffffe 	b	c000014 <stop>
 c000018:	0c000c2c 	.word	0x0c000c2c

0c00001c <init_table>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 0 indica CASILLA_VACIA, 1 indica FICHA_BLANCA y 2 indica FICHA_NEGRA
// pone el tablero a cero y luego coloca las fichas centrales.
void init_table(char tablero[][DIM], char candidatas[][DIM])
{
 c00001c:	e1a0c00d 	mov	ip, sp
 c000020:	e92dd800 	push	{fp, ip, lr, pc}
 c000024:	e24cb004 	sub	fp, ip, #4
 c000028:	e24dd010 	sub	sp, sp, #16
 c00002c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c000030:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int i, j;

    for (i = 0; i < DIM; i++)
 c000034:	e3a03000 	mov	r3, #0
 c000038:	e50b3010 	str	r3, [fp, #-16]
 c00003c:	ea000013 	b	c000090 <init_table+0x74>
    {
        for (j = 0; j < DIM; j++)
 c000040:	e3a03000 	mov	r3, #0
 c000044:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000048:	ea00000a 	b	c000078 <init_table+0x5c>
            tablero[i][j] = CASILLA_VACIA;
 c00004c:	e51b3010 	ldr	r3, [fp, #-16]
 c000050:	e1a03183 	lsl	r3, r3, #3
 c000054:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c000058:	e0822003 	add	r2, r2, r3
 c00005c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000060:	e0823003 	add	r3, r2, r3
 c000064:	e3a02000 	mov	r2, #0
 c000068:	e5c32000 	strb	r2, [r3]
{
    int i, j;

    for (i = 0; i < DIM; i++)
    {
        for (j = 0; j < DIM; j++)
 c00006c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000070:	e2833001 	add	r3, r3, #1
 c000074:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c00007c:	e3530007 	cmp	r3, #7
 c000080:	dafffff1 	ble	c00004c <init_table+0x30>
// pone el tablero a cero y luego coloca las fichas centrales.
void init_table(char tablero[][DIM], char candidatas[][DIM])
{
    int i, j;

    for (i = 0; i < DIM; i++)
 c000084:	e51b3010 	ldr	r3, [fp, #-16]
 c000088:	e2833001 	add	r3, r3, #1
 c00008c:	e50b3010 	str	r3, [fp, #-16]
 c000090:	e51b3010 	ldr	r3, [fp, #-16]
 c000094:	e3530007 	cmp	r3, #7
 c000098:	daffffe8 	ble	c000040 <init_table+0x24>
	    }
	}
    }
#endif
    // arriba hay versión alternativa
    tablero[3][3] = FICHA_BLANCA;
 c00009c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0000a0:	e2833018 	add	r3, r3, #24
 c0000a4:	e3a02001 	mov	r2, #1
 c0000a8:	e5c32003 	strb	r2, [r3, #3]
    tablero[4][4] = FICHA_BLANCA;
 c0000ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0000b0:	e2833020 	add	r3, r3, #32
 c0000b4:	e3a02001 	mov	r2, #1
 c0000b8:	e5c32004 	strb	r2, [r3, #4]
    tablero[3][4] = FICHA_NEGRA;
 c0000bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0000c0:	e2833018 	add	r3, r3, #24
 c0000c4:	e3a02002 	mov	r2, #2
 c0000c8:	e5c32004 	strb	r2, [r3, #4]
    tablero[4][3] = FICHA_NEGRA;
 c0000cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0000d0:	e2833020 	add	r3, r3, #32
 c0000d4:	e3a02002 	mov	r2, #2
 c0000d8:	e5c32003 	strb	r2, [r3, #3]

    candidatas[3][3] = CASILLA_OCUPADA;
 c0000dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0000e0:	e2833018 	add	r3, r3, #24
 c0000e4:	e59f213c 	ldr	r2, [pc, #316]	; c000228 <init_table+0x20c>
 c0000e8:	e5d22000 	ldrb	r2, [r2]
 c0000ec:	e5c32003 	strb	r2, [r3, #3]
    candidatas[4][4] = CASILLA_OCUPADA;
 c0000f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0000f4:	e2833020 	add	r3, r3, #32
 c0000f8:	e59f2128 	ldr	r2, [pc, #296]	; c000228 <init_table+0x20c>
 c0000fc:	e5d22000 	ldrb	r2, [r2]
 c000100:	e5c32004 	strb	r2, [r3, #4]
    candidatas[3][4] = CASILLA_OCUPADA;
 c000104:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000108:	e2833018 	add	r3, r3, #24
 c00010c:	e59f2114 	ldr	r2, [pc, #276]	; c000228 <init_table+0x20c>
 c000110:	e5d22000 	ldrb	r2, [r2]
 c000114:	e5c32004 	strb	r2, [r3, #4]
    candidatas[4][3] = CASILLA_OCUPADA;
 c000118:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c00011c:	e2833020 	add	r3, r3, #32
 c000120:	e59f2100 	ldr	r2, [pc, #256]	; c000228 <init_table+0x20c>
 c000124:	e5d22000 	ldrb	r2, [r2]
 c000128:	e5c32003 	strb	r2, [r3, #3]

    // casillas a explorar:
    candidatas[2][2] = SI;
 c00012c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000130:	e2833010 	add	r3, r3, #16
 c000134:	e59f20f0 	ldr	r2, [pc, #240]	; c00022c <init_table+0x210>
 c000138:	e5d22000 	ldrb	r2, [r2]
 c00013c:	e5c32002 	strb	r2, [r3, #2]
    candidatas[2][3] = SI;
 c000140:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000144:	e2833010 	add	r3, r3, #16
 c000148:	e59f20dc 	ldr	r2, [pc, #220]	; c00022c <init_table+0x210>
 c00014c:	e5d22000 	ldrb	r2, [r2]
 c000150:	e5c32003 	strb	r2, [r3, #3]
    candidatas[2][4] = SI;
 c000154:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000158:	e2833010 	add	r3, r3, #16
 c00015c:	e59f20c8 	ldr	r2, [pc, #200]	; c00022c <init_table+0x210>
 c000160:	e5d22000 	ldrb	r2, [r2]
 c000164:	e5c32004 	strb	r2, [r3, #4]
    candidatas[2][5] = SI;
 c000168:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c00016c:	e2833010 	add	r3, r3, #16
 c000170:	e59f20b4 	ldr	r2, [pc, #180]	; c00022c <init_table+0x210>
 c000174:	e5d22000 	ldrb	r2, [r2]
 c000178:	e5c32005 	strb	r2, [r3, #5]
    candidatas[3][2] = SI;
 c00017c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000180:	e2833018 	add	r3, r3, #24
 c000184:	e59f20a0 	ldr	r2, [pc, #160]	; c00022c <init_table+0x210>
 c000188:	e5d22000 	ldrb	r2, [r2]
 c00018c:	e5c32002 	strb	r2, [r3, #2]
    candidatas[3][5] = SI;
 c000190:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000194:	e2833018 	add	r3, r3, #24
 c000198:	e59f208c 	ldr	r2, [pc, #140]	; c00022c <init_table+0x210>
 c00019c:	e5d22000 	ldrb	r2, [r2]
 c0001a0:	e5c32005 	strb	r2, [r3, #5]
    candidatas[4][2] = SI;
 c0001a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0001a8:	e2833020 	add	r3, r3, #32
 c0001ac:	e59f2078 	ldr	r2, [pc, #120]	; c00022c <init_table+0x210>
 c0001b0:	e5d22000 	ldrb	r2, [r2]
 c0001b4:	e5c32002 	strb	r2, [r3, #2]
    candidatas[4][5] = SI;
 c0001b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0001bc:	e2833020 	add	r3, r3, #32
 c0001c0:	e59f2064 	ldr	r2, [pc, #100]	; c00022c <init_table+0x210>
 c0001c4:	e5d22000 	ldrb	r2, [r2]
 c0001c8:	e5c32005 	strb	r2, [r3, #5]
    candidatas[5][2] = SI;
 c0001cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0001d0:	e2833028 	add	r3, r3, #40	; 0x28
 c0001d4:	e59f2050 	ldr	r2, [pc, #80]	; c00022c <init_table+0x210>
 c0001d8:	e5d22000 	ldrb	r2, [r2]
 c0001dc:	e5c32002 	strb	r2, [r3, #2]
    candidatas[5][3] = SI;
 c0001e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0001e4:	e2833028 	add	r3, r3, #40	; 0x28
 c0001e8:	e59f203c 	ldr	r2, [pc, #60]	; c00022c <init_table+0x210>
 c0001ec:	e5d22000 	ldrb	r2, [r2]
 c0001f0:	e5c32003 	strb	r2, [r3, #3]
    candidatas[5][4] = SI;
 c0001f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0001f8:	e2833028 	add	r3, r3, #40	; 0x28
 c0001fc:	e59f2028 	ldr	r2, [pc, #40]	; c00022c <init_table+0x210>
 c000200:	e5d22000 	ldrb	r2, [r2]
 c000204:	e5c32004 	strb	r2, [r3, #4]
    candidatas[5][5] = SI;
 c000208:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c00020c:	e2833028 	add	r3, r3, #40	; 0x28
 c000210:	e59f2014 	ldr	r2, [pc, #20]	; c00022c <init_table+0x210>
 c000214:	e5d22000 	ldrb	r2, [r2]
 c000218:	e5c32005 	strb	r2, [r3, #5]
}
 c00021c:	e24bd00c 	sub	sp, fp, #12
 c000220:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000224:	e12fff1e 	bx	lr
 c000228:	0c001392 	.word	0x0c001392
 c00022c:	0c001391 	.word	0x0c001391

0c000230 <esperar_mov>:
// Espera a que ready valga 1.
// CUIDADO: si el compilador coloca esta variable en un registro, no funcionará.
// Hay que definirla como "volatile" para forzar a que antes de cada uso la cargue de memoria

void esperar_mov(char *ready)
{
 c000230:	e1a0c00d 	mov	ip, sp
 c000234:	e92dd800 	push	{fp, ip, lr, pc}
 c000238:	e24cb004 	sub	fp, ip, #4
 c00023c:	e24dd008 	sub	sp, sp, #8
 c000240:	e50b0010 	str	r0, [fp, #-16]
    while (*ready == 0) {};  // bucle de espera de respuestas hasta que el se modifique el valor de ready (hay que hacerlo manualmente)
 c000244:	e1a00000 	nop			; (mov r0, r0)
 c000248:	e51b3010 	ldr	r3, [fp, #-16]
 c00024c:	e5d33000 	ldrb	r3, [r3]
 c000250:	e3530000 	cmp	r3, #0
 c000254:	0afffffb 	beq	c000248 <esperar_mov+0x18>

    *ready = 0;  //una vez que pasemos el bucle volvemos a fijar ready a 0;
 c000258:	e51b3010 	ldr	r3, [fp, #-16]
 c00025c:	e3a02000 	mov	r2, #0
 c000260:	e5c32000 	strb	r2, [r3]
}
 c000264:	e24bd00c 	sub	sp, fp, #12
 c000268:	e89d6800 	ldm	sp, {fp, sp, lr}
 c00026c:	e12fff1e 	bx	lr

0c000270 <ficha_valida>:
// Devuelve el contenido de la posición indicadas por la fila y columna actual.
// Además informa si la posición es válida y contiene alguna ficha.
// Esto lo hace por referencia (en *posicion_valida)
// Si devuelve un 0 no es válida o está vacia.
char ficha_valida(char tablero[][DIM], char f, char c, int *posicion_valida)
{
 c000270:	e1a0c00d 	mov	ip, sp
 c000274:	e92dd800 	push	{fp, ip, lr, pc}
 c000278:	e24cb004 	sub	fp, ip, #4
 c00027c:	e24dd018 	sub	sp, sp, #24
 c000280:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c000284:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c000288:	e1a03001 	mov	r3, r1
 c00028c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
 c000290:	e1a03002 	mov	r3, r2
 c000294:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6

    // ficha = tablero[f][c];
    // no puede accederse a tablero[f][c]
    // ya que algún índice puede ser negativo

    if ((f < DIM) && (f >= 0) && (c < DIM) && (c >= 0) && (tablero[f][c] != CASILLA_VACIA))
 c000298:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c00029c:	e3530007 	cmp	r3, #7
 c0002a0:	8a000015 	bhi	c0002fc <ficha_valida+0x8c>
 c0002a4:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c0002a8:	e3530007 	cmp	r3, #7
 c0002ac:	8a000012 	bhi	c0002fc <ficha_valida+0x8c>
 c0002b0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c0002b4:	e1a03183 	lsl	r3, r3, #3
 c0002b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c0002bc:	e0822003 	add	r2, r2, r3
 c0002c0:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c0002c4:	e7d23003 	ldrb	r3, [r2, r3]
 c0002c8:	e3530000 	cmp	r3, #0
 c0002cc:	0a00000a 	beq	c0002fc <ficha_valida+0x8c>
    {
        *posicion_valida = 1;
 c0002d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c0002d4:	e3a02001 	mov	r2, #1
 c0002d8:	e5832000 	str	r2, [r3]
        ficha = tablero[f][c];
 c0002dc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c0002e0:	e1a03183 	lsl	r3, r3, #3
 c0002e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c0002e8:	e0822003 	add	r2, r2, r3
 c0002ec:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c0002f0:	e7d23003 	ldrb	r3, [r2, r3]
 c0002f4:	e54b300d 	strb	r3, [fp, #-13]
 c0002f8:	ea000004 	b	c000310 <ficha_valida+0xa0>
    }
    else
    {
        *posicion_valida = 0;
 c0002fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000300:	e3a02000 	mov	r2, #0
 c000304:	e5832000 	str	r2, [r3]
        ficha = CASILLA_VACIA;
 c000308:	e3a03000 	mov	r3, #0
 c00030c:	e54b300d 	strb	r3, [fp, #-13]
    }
    return ficha;
 c000310:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c000314:	e1a00003 	mov	r0, r3
 c000318:	e24bd00c 	sub	sp, fp, #12
 c00031c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000320:	e12fff1e 	bx	lr

0c000324 <patron_volteo>:
// color indica el color de la pieza que se acaba de colocar
// la función devuelve PATRON_ENCONTRADO (1) si encuentra patrón y NO_HAY_PATRON (0) en caso contrario
// FA y CA son la fila y columna a analizar
// longitud es un parámetro por referencia. Sirve para saber la longitud del patrón que se está analizando. Se usa para saber cuantas fichas habría que voltear
int patron_volteo(char tablero[][DIM], int *longitud, char FA, char CA, char SF, char SC, char color)
{
 c000324:	e1a0c00d 	mov	ip, sp
 c000328:	e92dd800 	push	{fp, ip, lr, pc}
 c00032c:	e24cb004 	sub	fp, ip, #4
 c000330:	e24dd030 	sub	sp, sp, #48	; 0x30
 c000334:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c000338:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c00033c:	e54b2025 	strb	r2, [fp, #-37]	; 0xffffffdb
 c000340:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
    int posicion_valida; // indica si la posición es valida y contiene una ficha de algún jugador
    int patron; //indica si se ha encontrado un patrón o no
    char casilla;   // casilla es la casilla que se lee del tablero
    FA = FA + SF;
 c000344:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
 c000348:	e5db3004 	ldrb	r3, [fp, #4]
 c00034c:	e0823003 	add	r3, r2, r3
 c000350:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    CA = CA + SC;
 c000354:	e55b2026 	ldrb	r2, [fp, #-38]	; 0xffffffda
 c000358:	e5db3008 	ldrb	r3, [fp, #8]
 c00035c:	e0823003 	add	r3, r2, r3
 c000360:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
    casilla = ficha_valida(tablero, FA, CA, &posicion_valida);
 c000364:	e55b1025 	ldrb	r1, [fp, #-37]	; 0xffffffdb
 c000368:	e55b2026 	ldrb	r2, [fp, #-38]	; 0xffffffda
 c00036c:	e24b3018 	sub	r3, fp, #24
 c000370:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c000374:	ebffffbd 	bl	c000270 <ficha_valida>
 c000378:	e1a03000 	mov	r3, r0
 c00037c:	e54b300d 	strb	r3, [fp, #-13]
    // mientras la casilla está en el tablero, no está vacía,
    // y es del color rival seguimos buscando el patron de volteo
    if ((posicion_valida == 1) && (casilla != color))
 c000380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000384:	e3530001 	cmp	r3, #1
 c000388:	1a000016 	bne	c0003e8 <patron_volteo+0xc4>
 c00038c:	e55b200d 	ldrb	r2, [fp, #-13]
 c000390:	e5db300c 	ldrb	r3, [fp, #12]
 c000394:	e1520003 	cmp	r2, r3
 c000398:	0a000012 	beq	c0003e8 <patron_volteo+0xc4>
    {
        *longitud = *longitud + 1;
 c00039c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c0003a0:	e5933000 	ldr	r3, [r3]
 c0003a4:	e2832001 	add	r2, r3, #1
 c0003a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c0003ac:	e5832000 	str	r2, [r3]
        patron = patron_volteo(tablero, longitud, FA, CA, SF, SC, color);
 c0003b0:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
 c0003b4:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
 c0003b8:	e5db1004 	ldrb	r1, [fp, #4]
 c0003bc:	e58d1000 	str	r1, [sp]
 c0003c0:	e5db1008 	ldrb	r1, [fp, #8]
 c0003c4:	e58d1004 	str	r1, [sp, #4]
 c0003c8:	e5db100c 	ldrb	r1, [fp, #12]
 c0003cc:	e58d1008 	str	r1, [sp, #8]
 c0003d0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c0003d4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
 c0003d8:	ebffffd1 	bl	c000324 <patron_volteo>
 c0003dc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        //printf("longitud: %d \n", *longitud);
        //printf("fila: %d; columna: %d \n", FA, CA);
        return patron;
 c0003e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0003e4:	ea00000f 	b	c000428 <patron_volteo+0x104>
    }
    // si la ultima posición era válida y la ficha es del jugador actual,
    // entonces hemos encontrado el patrón
    else if ((posicion_valida == 1) && (casilla == color))
 c0003e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0003ec:	e3530001 	cmp	r3, #1
 c0003f0:	1a00000b 	bne	c000424 <patron_volteo+0x100>
 c0003f4:	e55b200d 	ldrb	r2, [fp, #-13]
 c0003f8:	e5db300c 	ldrb	r3, [fp, #12]
 c0003fc:	e1520003 	cmp	r2, r3
 c000400:	1a000007 	bne	c000424 <patron_volteo+0x100>
    {
        if (*longitud > 0) // longitud indica cuantas fichas hay que voltear
 c000404:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c000408:	e5933000 	ldr	r3, [r3]
 c00040c:	e3530000 	cmp	r3, #0
 c000410:	da000001 	ble	c00041c <patron_volteo+0xf8>
            {
            return PATRON_ENCONTRADO; // si hay que voltear una ficha o más hemos encontrado el patrón
 c000414:	e3a03001 	mov	r3, #1
 c000418:	ea000002 	b	c000428 <patron_volteo+0x104>
            //printf("PATRON_ENCONTRADO \n");
            }
        else {
            return NO_HAY_PATRON; // si no hay que voltear no hay patrón
 c00041c:	e3a03000 	mov	r3, #0
 c000420:	ea000000 	b	c000428 <patron_volteo+0x104>
            }
    }
    // en caso contrario es que no hay patrón
    else
    {
        return NO_HAY_PATRON;
 c000424:	e3a03000 	mov	r3, #0
        //printf("NO_HAY_PATRON \n");
    }
}
 c000428:	e1a00003 	mov	r0, r3
 c00042c:	e24bd00c 	sub	sp, fp, #12
 c000430:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000434:	e12fff1e 	bx	lr

0c000438 <voltear>:
// voltea n fichas en la dirección que toque
// SF y SC son las cantidades a sumar para movernos en la dirección que toque
// color indica el color de la pieza que se acaba de colocar
// FA y CA son la fila y columna a analizar
void voltear(char tablero[][DIM], char FA, char CA, char SF, char SC, int n, char color)
{
 c000438:	e1a0c00d 	mov	ip, sp
 c00043c:	e92dd800 	push	{fp, ip, lr, pc}
 c000440:	e24cb004 	sub	fp, ip, #4
 c000444:	e24dd010 	sub	sp, sp, #16
 c000448:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c00044c:	e54b1019 	strb	r1, [fp, #-25]	; 0xffffffe7
 c000450:	e54b201a 	strb	r2, [fp, #-26]	; 0xffffffe6
 c000454:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
    int i;

    for (i = 0; i < n; i++)
 c000458:	e3a03000 	mov	r3, #0
 c00045c:	e50b3010 	str	r3, [fp, #-16]
 c000460:	ea000011 	b	c0004ac <voltear+0x74>
    {
        FA = FA + SF;
 c000464:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c000468:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c00046c:	e0823003 	add	r3, r2, r3
 c000470:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        CA = CA + SC;
 c000474:	e55b201a 	ldrb	r2, [fp, #-26]	; 0xffffffe6
 c000478:	e5db3004 	ldrb	r3, [fp, #4]
 c00047c:	e0823003 	add	r3, r2, r3
 c000480:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
        tablero[FA][CA] = color;
 c000484:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c000488:	e1a03183 	lsl	r3, r3, #3
 c00048c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c000490:	e0822003 	add	r2, r2, r3
 c000494:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c000498:	e5db100c 	ldrb	r1, [fp, #12]
 c00049c:	e7c21003 	strb	r1, [r2, r3]
// FA y CA son la fila y columna a analizar
void voltear(char tablero[][DIM], char FA, char CA, char SF, char SC, int n, char color)
{
    int i;

    for (i = 0; i < n; i++)
 c0004a0:	e51b3010 	ldr	r3, [fp, #-16]
 c0004a4:	e2833001 	add	r3, r3, #1
 c0004a8:	e50b3010 	str	r3, [fp, #-16]
 c0004ac:	e51b2010 	ldr	r2, [fp, #-16]
 c0004b0:	e59b3008 	ldr	r3, [fp, #8]
 c0004b4:	e1520003 	cmp	r2, r3
 c0004b8:	baffffe9 	blt	c000464 <voltear+0x2c>
    {
        FA = FA + SF;
        CA = CA + SC;
        tablero[FA][CA] = color;
    }
}
 c0004bc:	e24bd00c 	sub	sp, fp, #12
 c0004c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0004c4:	e12fff1e 	bx	lr

0c0004c8 <actualizar_tablero>:
// no comprueba que el movimiento realizado sea válido
// f y c son la fila y columna a analizar
// char vSF[DIM] = {-1,-1, 0, 1, 1, 1, 0,-1};
// char vSC[DIM] = { 0, 1, 1, 1, 0,-1,-1,-1};
int actualizar_tablero(char tablero[][DIM], char f, char c, char color)
{
 c0004c8:	e1a0c00d 	mov	ip, sp
 c0004cc:	e92dd800 	push	{fp, ip, lr, pc}
 c0004d0:	e24cb004 	sub	fp, ip, #4
 c0004d4:	e24dd028 	sub	sp, sp, #40	; 0x28
 c0004d8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c0004dc:	e54b1021 	strb	r1, [fp, #-33]	; 0xffffffdf
 c0004e0:	e54b2022 	strb	r2, [fp, #-34]	; 0xffffffde
 c0004e4:	e54b3023 	strb	r3, [fp, #-35]	; 0xffffffdd
    char SF, SC; // cantidades a sumar para movernos en la dirección que toque
    int i, flip, patron;

    for (i = 0; i < DIM; i++) // 0 es Norte, 1 NE, 2 E ...
 c0004e8:	e3a03000 	mov	r3, #0
 c0004ec:	e50b3010 	str	r3, [fp, #-16]
 c0004f0:	ea000028 	b	c000598 <actualizar_tablero+0xd0>
    {
        SF = vSF[i];
 c0004f4:	e59f20bc 	ldr	r2, [pc, #188]	; c0005b8 <actualizar_tablero+0xf0>
 c0004f8:	e51b3010 	ldr	r3, [fp, #-16]
 c0004fc:	e0823003 	add	r3, r2, r3
 c000500:	e5d33000 	ldrb	r3, [r3]
 c000504:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        SC = vSC[i];
 c000508:	e59f20ac 	ldr	r2, [pc, #172]	; c0005bc <actualizar_tablero+0xf4>
 c00050c:	e51b3010 	ldr	r3, [fp, #-16]
 c000510:	e0823003 	add	r3, r2, r3
 c000514:	e5d33000 	ldrb	r3, [r3]
 c000518:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
        // flip: numero de fichas a voltear
        flip = 0;
 c00051c:	e3a03000 	mov	r3, #0
 c000520:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        patron = patron_volteo(tablero, &flip, f, c, SF, SC, color);
 c000524:	e24b101c 	sub	r1, fp, #28
 c000528:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c00052c:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
 c000530:	e55b0011 	ldrb	r0, [fp, #-17]	; 0xffffffef
 c000534:	e58d0000 	str	r0, [sp]
 c000538:	e55b0012 	ldrb	r0, [fp, #-18]	; 0xffffffee
 c00053c:	e58d0004 	str	r0, [sp, #4]
 c000540:	e55b0023 	ldrb	r0, [fp, #-35]	; 0xffffffdd
 c000544:	e58d0008 	str	r0, [sp, #8]
 c000548:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c00054c:	ebffff74 	bl	c000324 <patron_volteo>
 c000550:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        //printf("Flip: %d \n", flip);
        if (patron == PATRON_ENCONTRADO )
 c000554:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000558:	e3530001 	cmp	r3, #1
 c00055c:	1a00000a 	bne	c00058c <actualizar_tablero+0xc4>
        {
            voltear(tablero, f, c, SF, SC, flip, color);
 c000560:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c000564:	e55b1021 	ldrb	r1, [fp, #-33]	; 0xffffffdf
 c000568:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
 c00056c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000570:	e55bc012 	ldrb	ip, [fp, #-18]	; 0xffffffee
 c000574:	e58dc000 	str	ip, [sp]
 c000578:	e58d0004 	str	r0, [sp, #4]
 c00057c:	e55b0023 	ldrb	r0, [fp, #-35]	; 0xffffffdd
 c000580:	e58d0008 	str	r0, [sp, #8]
 c000584:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c000588:	ebffffaa 	bl	c000438 <voltear>
int actualizar_tablero(char tablero[][DIM], char f, char c, char color)
{
    char SF, SC; // cantidades a sumar para movernos en la dirección que toque
    int i, flip, patron;

    for (i = 0; i < DIM; i++) // 0 es Norte, 1 NE, 2 E ...
 c00058c:	e51b3010 	ldr	r3, [fp, #-16]
 c000590:	e2833001 	add	r3, r3, #1
 c000594:	e50b3010 	str	r3, [fp, #-16]
 c000598:	e51b3010 	ldr	r3, [fp, #-16]
 c00059c:	e3530007 	cmp	r3, #7
 c0005a0:	daffffd3 	ble	c0004f4 <actualizar_tablero+0x2c>
        if (patron == PATRON_ENCONTRADO )
        {
            voltear(tablero, f, c, SF, SC, flip, color);
        }
    }
    return 0;
 c0005a4:	e3a03000 	mov	r3, #0
}
 c0005a8:	e1a00003 	mov	r0, r3
 c0005ac:	e24bd00c 	sub	sp, fp, #12
 c0005b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0005b4:	e12fff1e 	bx	lr
 c0005b8:	0c0013d8 	.word	0x0c0013d8
 c0005bc:	0c0013e0 	.word	0x0c0013e0

0c0005c0 <elegir_mov>:
// Candidatas
// NO    0
// SI    1
// CASILLA_OCUPADA 2
int elegir_mov(char candidatas[][DIM], char tablero[][DIM], char *f, char *c)
{
 c0005c0:	e1a0c00d 	mov	ip, sp
 c0005c4:	e92dd800 	push	{fp, ip, lr, pc}
 c0005c8:	e24cb004 	sub	fp, ip, #4
 c0005cc:	e24dd048 	sub	sp, sp, #72	; 0x48
 c0005d0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
 c0005d4:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
 c0005d8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
 c0005dc:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
    int i, j, k, found;
    int mf = -1; // almacena la fila del mejor movimiento encontrado
 c0005e0:	e3e03000 	mvn	r3, #0
 c0005e4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    int mc;      // almacena la columna del mejor movimiento encontrado
    char mejor = 0; // almacena el mejor valor encontrado
 c0005e8:	e3a03000 	mov	r3, #0
 c0005ec:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    int patron, longitud;
    char SF, SC; // cantidades a sumar para movernos en la dirección que toque

    // Recorremos todo el tablero comprobando dónde podemos mover
    // Comparamos la puntuación de los movimientos encontrados y nos quedamos con el mejor
    for (i=0; i<DIM; i++)
 c0005f0:	e3a03000 	mov	r3, #0
 c0005f4:	e50b3010 	str	r3, [fp, #-16]
 c0005f8:	ea000062 	b	c000788 <elegir_mov+0x1c8>
    {
        for (j=0; j<DIM; j++)
 c0005fc:	e3a03000 	mov	r3, #0
 c000600:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000604:	ea000059 	b	c000770 <elegir_mov+0x1b0>
        {   // indica en qué casillas quizá se pueda mover
            if (candidatas[i][j] == SI)
 c000608:	e51b3010 	ldr	r3, [fp, #-16]
 c00060c:	e1a03183 	lsl	r3, r3, #3
 c000610:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 c000614:	e0822003 	add	r2, r2, r3
 c000618:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c00061c:	e0823003 	add	r3, r2, r3
 c000620:	e5d32000 	ldrb	r2, [r3]
 c000624:	e59f319c 	ldr	r3, [pc, #412]	; c0007c8 <elegir_mov+0x208>
 c000628:	e5d33000 	ldrb	r3, [r3]
 c00062c:	e1520003 	cmp	r2, r3
 c000630:	1a00004b 	bne	c000764 <elegir_mov+0x1a4>
            {
                if (tablero[i][j] == CASILLA_VACIA)
 c000634:	e51b3010 	ldr	r3, [fp, #-16]
 c000638:	e1a03183 	lsl	r3, r3, #3
 c00063c:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
 c000640:	e0822003 	add	r2, r2, r3
 c000644:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000648:	e0823003 	add	r3, r2, r3
 c00064c:	e5d33000 	ldrb	r3, [r3]
 c000650:	e3530000 	cmp	r3, #0
 c000654:	1a000042 	bne	c000764 <elegir_mov+0x1a4>
                {
                    found = 0;
 c000658:	e3a03000 	mov	r3, #0
 c00065c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                    k = 0;
 c000660:	e3a03000 	mov	r3, #0
 c000664:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

                    // en este bucle comprobamos si es un movimiento válido
                    // (es decir si implica voltear en alguna dirección)
                    while ((found == 0) && (k < DIM))
 c000668:	ea000037 	b	c00074c <elegir_mov+0x18c>
                    {
                        SF = vSF[k];    // k representa la dirección que miramos
 c00066c:	e59f2158 	ldr	r2, [pc, #344]	; c0007cc <elegir_mov+0x20c>
 c000670:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000674:	e0823003 	add	r3, r2, r3
 c000678:	e5d33000 	ldrb	r3, [r3]
 c00067c:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
                        SC = vSC[k];    // 1 es norte, 2 NE, 3 E ...
 c000680:	e59f2148 	ldr	r2, [pc, #328]	; c0007d0 <elegir_mov+0x210>
 c000684:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000688:	e0823003 	add	r3, r2, r3
 c00068c:	e5d33000 	ldrb	r3, [r3]
 c000690:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9

                        // nos dice qué hay que voltear en cada dirección
                        longitud = 0;
 c000694:	e3a03000 	mov	r3, #0
 c000698:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                        patron = patron_volteo(tablero, &longitud, i, j, SF, SC, FICHA_BLANCA);
 c00069c:	e51b3010 	ldr	r3, [fp, #-16]
 c0006a0:	e20320ff 	and	r2, r3, #255	; 0xff
 c0006a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0006a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c0006ac:	e24b1030 	sub	r1, fp, #48	; 0x30
 c0006b0:	e55b0026 	ldrb	r0, [fp, #-38]	; 0xffffffda
 c0006b4:	e58d0000 	str	r0, [sp]
 c0006b8:	e55b0027 	ldrb	r0, [fp, #-39]	; 0xffffffd9
 c0006bc:	e58d0004 	str	r0, [sp, #4]
 c0006c0:	e3a00001 	mov	r0, #1
 c0006c4:	e58d0008 	str	r0, [sp, #8]
 c0006c8:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
 c0006cc:	ebffff14 	bl	c000324 <patron_volteo>
 c0006d0:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
                        //  //printf("%d ", patron);
                        if (patron == PATRON_ENCONTRADO)
 c0006d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c0006d8:	e3530001 	cmp	r3, #1
 c0006dc:	1a000017 	bne	c000740 <elegir_mov+0x180>
                        {
                            found = 1;
 c0006e0:	e3a03001 	mov	r3, #1
 c0006e4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                            if (tabla_valor[i][j] > mejor)
 c0006e8:	e59f20e4 	ldr	r2, [pc, #228]	; c0007d4 <elegir_mov+0x214>
 c0006ec:	e51b3010 	ldr	r3, [fp, #-16]
 c0006f0:	e1a01183 	lsl	r1, r3, #3
 c0006f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0006f8:	e0813003 	add	r3, r1, r3
 c0006fc:	e0823003 	add	r3, r2, r3
 c000700:	e5d33000 	ldrb	r3, [r3]
 c000704:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
 c000708:	e1520003 	cmp	r2, r3
 c00070c:	2a00000b 	bcs	c000740 <elegir_mov+0x180>
                            {
                                mf = i;
 c000710:	e51b3010 	ldr	r3, [fp, #-16]
 c000714:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                                mc = j;
 c000718:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c00071c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                                mejor = tabla_valor[i][j];
 c000720:	e59f20ac 	ldr	r2, [pc, #172]	; c0007d4 <elegir_mov+0x214>
 c000724:	e51b3010 	ldr	r3, [fp, #-16]
 c000728:	e1a01183 	lsl	r1, r3, #3
 c00072c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000730:	e0813003 	add	r3, r1, r3
 c000734:	e0823003 	add	r3, r2, r3
 c000738:	e5d33000 	ldrb	r3, [r3]
 c00073c:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
                            }
                        }
                        k++;
 c000740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000744:	e2833001 	add	r3, r3, #1
 c000748:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    found = 0;
                    k = 0;

                    // en este bucle comprobamos si es un movimiento válido
                    // (es decir si implica voltear en alguna dirección)
                    while ((found == 0) && (k < DIM))
 c00074c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000750:	e3530000 	cmp	r3, #0
 c000754:	1a000002 	bne	c000764 <elegir_mov+0x1a4>
 c000758:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c00075c:	e3530007 	cmp	r3, #7
 c000760:	daffffc1 	ble	c00066c <elegir_mov+0xac>

    // Recorremos todo el tablero comprobando dónde podemos mover
    // Comparamos la puntuación de los movimientos encontrados y nos quedamos con el mejor
    for (i=0; i<DIM; i++)
    {
        for (j=0; j<DIM; j++)
 c000764:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000768:	e2833001 	add	r3, r3, #1
 c00076c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000774:	e3530007 	cmp	r3, #7
 c000778:	daffffa2 	ble	c000608 <elegir_mov+0x48>
    int patron, longitud;
    char SF, SC; // cantidades a sumar para movernos en la dirección que toque

    // Recorremos todo el tablero comprobando dónde podemos mover
    // Comparamos la puntuación de los movimientos encontrados y nos quedamos con el mejor
    for (i=0; i<DIM; i++)
 c00077c:	e51b3010 	ldr	r3, [fp, #-16]
 c000780:	e2833001 	add	r3, r3, #1
 c000784:	e50b3010 	str	r3, [fp, #-16]
 c000788:	e51b3010 	ldr	r3, [fp, #-16]
 c00078c:	e3530007 	cmp	r3, #7
 c000790:	daffff99 	ble	c0005fc <elegir_mov+0x3c>
                    }
                }
            }
        }
    }
    *f = (char) mf;
 c000794:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000798:	e20320ff 	and	r2, r3, #255	; 0xff
 c00079c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
 c0007a0:	e5c32000 	strb	r2, [r3]
    *c = (char) mc;
 c0007a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c0007a8:	e20320ff 	and	r2, r3, #255	; 0xff
 c0007ac:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
 c0007b0:	e5c32000 	strb	r2, [r3]
    // si no se ha encontrado una posición válida devuelve -1
    return mf;
 c0007b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
}
 c0007b8:	e1a00003 	mov	r0, r3
 c0007bc:	e24bd00c 	sub	sp, fp, #12
 c0007c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0007c4:	e12fff1e 	bx	lr
 c0007c8:	0c001391 	.word	0x0c001391
 c0007cc:	0c0013d8 	.word	0x0c0013d8
 c0007d0:	0c0013e0 	.word	0x0c0013e0
 c0007d4:	0c001398 	.word	0x0c001398

0c0007d8 <contar>:
////////////////////////////////////////////////////////////////////////////////
// Cuenta el número de fichas de cada color.
// Los guarda en la dirección b (blancas) y n (negras)
void contar(char tablero[][DIM], int *b, int *n)
{
 c0007d8:	e1a0c00d 	mov	ip, sp
 c0007dc:	e92dd800 	push	{fp, ip, lr, pc}
 c0007e0:	e24cb004 	sub	fp, ip, #4
 c0007e4:	e24dd018 	sub	sp, sp, #24
 c0007e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c0007ec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c0007f0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    int i,j;

    *b = 0;
 c0007f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0007f8:	e3a02000 	mov	r2, #0
 c0007fc:	e5832000 	str	r2, [r3]
    *n = 0;
 c000800:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000804:	e3a02000 	mov	r2, #0
 c000808:	e5832000 	str	r2, [r3]

    // recorremos todo el tablero contando las fichas de cada color
    for (i=0; i<DIM; i++)
 c00080c:	e3a03000 	mov	r3, #0
 c000810:	e50b3010 	str	r3, [fp, #-16]
 c000814:	ea000028 	b	c0008bc <contar+0xe4>
    {
        for (j=0; j<DIM; j++)
 c000818:	e3a03000 	mov	r3, #0
 c00081c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000820:	ea00001f 	b	c0008a4 <contar+0xcc>
        {
            if (tablero[i][j] == FICHA_BLANCA)
 c000824:	e51b3010 	ldr	r3, [fp, #-16]
 c000828:	e1a03183 	lsl	r3, r3, #3
 c00082c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c000830:	e0822003 	add	r2, r2, r3
 c000834:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000838:	e0823003 	add	r3, r2, r3
 c00083c:	e5d33000 	ldrb	r3, [r3]
 c000840:	e3530001 	cmp	r3, #1
 c000844:	1a000005 	bne	c000860 <contar+0x88>
            {
                (*b)++;
 c000848:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c00084c:	e5933000 	ldr	r3, [r3]
 c000850:	e2832001 	add	r2, r3, #1
 c000854:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000858:	e5832000 	str	r2, [r3]
 c00085c:	ea00000d 	b	c000898 <contar+0xc0>
            }
            else if (tablero[i][j] == FICHA_NEGRA)
 c000860:	e51b3010 	ldr	r3, [fp, #-16]
 c000864:	e1a03183 	lsl	r3, r3, #3
 c000868:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c00086c:	e0822003 	add	r2, r2, r3
 c000870:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000874:	e0823003 	add	r3, r2, r3
 c000878:	e5d33000 	ldrb	r3, [r3]
 c00087c:	e3530002 	cmp	r3, #2
 c000880:	1a000004 	bne	c000898 <contar+0xc0>
            {
                (*n)++;
 c000884:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000888:	e5933000 	ldr	r3, [r3]
 c00088c:	e2832001 	add	r2, r3, #1
 c000890:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000894:	e5832000 	str	r2, [r3]
    *n = 0;

    // recorremos todo el tablero contando las fichas de cada color
    for (i=0; i<DIM; i++)
    {
        for (j=0; j<DIM; j++)
 c000898:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c00089c:	e2833001 	add	r3, r3, #1
 c0008a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c0008a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0008a8:	e3530007 	cmp	r3, #7
 c0008ac:	daffffdc 	ble	c000824 <contar+0x4c>

    *b = 0;
    *n = 0;

    // recorremos todo el tablero contando las fichas de cada color
    for (i=0; i<DIM; i++)
 c0008b0:	e51b3010 	ldr	r3, [fp, #-16]
 c0008b4:	e2833001 	add	r3, r3, #1
 c0008b8:	e50b3010 	str	r3, [fp, #-16]
 c0008bc:	e51b3010 	ldr	r3, [fp, #-16]
 c0008c0:	e3530007 	cmp	r3, #7
 c0008c4:	daffffd3 	ble	c000818 <contar+0x40>
            {
                (*n)++;
            }
        }
    }
}
 c0008c8:	e24bd00c 	sub	sp, fp, #12
 c0008cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0008d0:	e12fff1e 	bx	lr

0c0008d4 <actualizar_candidatas>:

void actualizar_candidatas(char candidatas[][DIM], char f, char c)
{
 c0008d4:	e1a0c00d 	mov	ip, sp
 c0008d8:	e92dd800 	push	{fp, ip, lr, pc}
 c0008dc:	e24cb004 	sub	fp, ip, #4
 c0008e0:	e24dd008 	sub	sp, sp, #8
 c0008e4:	e50b0010 	str	r0, [fp, #-16]
 c0008e8:	e1a03002 	mov	r3, r2
 c0008ec:	e1a02001 	mov	r2, r1
 c0008f0:	e54b2011 	strb	r2, [fp, #-17]	; 0xffffffef
 c0008f4:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    // donde ya se ha colocado no se puede volver a colocar
    // En las posiciones alrededor sí
    candidatas[f][c] = CASILLA_OCUPADA;
 c0008f8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c0008fc:	e1a03183 	lsl	r3, r3, #3
 c000900:	e51b2010 	ldr	r2, [fp, #-16]
 c000904:	e0822003 	add	r2, r2, r3
 c000908:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c00090c:	e59f1310 	ldr	r1, [pc, #784]	; c000c24 <actualizar_candidatas+0x350>
 c000910:	e5d11000 	ldrb	r1, [r1]
 c000914:	e7c21003 	strb	r1, [r2, r3]
    if (f > 0)
 c000918:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c00091c:	e3530000 	cmp	r3, #0
 c000920:	0a000045 	beq	c000a3c <actualizar_candidatas+0x168>
    {
        if (candidatas[f-1][c] != CASILLA_OCUPADA)
 c000924:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000928:	e2433001 	sub	r3, r3, #1
 c00092c:	e1a03183 	lsl	r3, r3, #3
 c000930:	e51b2010 	ldr	r2, [fp, #-16]
 c000934:	e0822003 	add	r2, r2, r3
 c000938:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c00093c:	e7d22003 	ldrb	r2, [r2, r3]
 c000940:	e59f32dc 	ldr	r3, [pc, #732]	; c000c24 <actualizar_candidatas+0x350>
 c000944:	e5d33000 	ldrb	r3, [r3]
 c000948:	e1520003 	cmp	r2, r3
 c00094c:	0a000008 	beq	c000974 <actualizar_candidatas+0xa0>
            candidatas[f-1][c] = SI;
 c000950:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000954:	e2433001 	sub	r3, r3, #1
 c000958:	e1a03183 	lsl	r3, r3, #3
 c00095c:	e51b2010 	ldr	r2, [fp, #-16]
 c000960:	e0822003 	add	r2, r2, r3
 c000964:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000968:	e59f12b8 	ldr	r1, [pc, #696]	; c000c28 <actualizar_candidatas+0x354>
 c00096c:	e5d11000 	ldrb	r1, [r1]
 c000970:	e7c21003 	strb	r1, [r2, r3]

        if ((c > 0) && (candidatas[f-1][c-1] != CASILLA_OCUPADA))
 c000974:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000978:	e3530000 	cmp	r3, #0
 c00097c:	0a000015 	beq	c0009d8 <actualizar_candidatas+0x104>
 c000980:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000984:	e2433001 	sub	r3, r3, #1
 c000988:	e1a03183 	lsl	r3, r3, #3
 c00098c:	e51b2010 	ldr	r2, [fp, #-16]
 c000990:	e0822003 	add	r2, r2, r3
 c000994:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000998:	e2433001 	sub	r3, r3, #1
 c00099c:	e7d22003 	ldrb	r2, [r2, r3]
 c0009a0:	e59f327c 	ldr	r3, [pc, #636]	; c000c24 <actualizar_candidatas+0x350>
 c0009a4:	e5d33000 	ldrb	r3, [r3]
 c0009a8:	e1520003 	cmp	r2, r3
 c0009ac:	0a000009 	beq	c0009d8 <actualizar_candidatas+0x104>
            candidatas[f-1][c-1] = SI;
 c0009b0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c0009b4:	e2433001 	sub	r3, r3, #1
 c0009b8:	e1a03183 	lsl	r3, r3, #3
 c0009bc:	e51b2010 	ldr	r2, [fp, #-16]
 c0009c0:	e0822003 	add	r2, r2, r3
 c0009c4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c0009c8:	e2433001 	sub	r3, r3, #1
 c0009cc:	e59f1254 	ldr	r1, [pc, #596]	; c000c28 <actualizar_candidatas+0x354>
 c0009d0:	e5d11000 	ldrb	r1, [r1]
 c0009d4:	e7c21003 	strb	r1, [r2, r3]

        if ((c < 7) && (candidatas[f-1][c+1] != CASILLA_OCUPADA))
 c0009d8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c0009dc:	e3530006 	cmp	r3, #6
 c0009e0:	8a000015 	bhi	c000a3c <actualizar_candidatas+0x168>
 c0009e4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c0009e8:	e2433001 	sub	r3, r3, #1
 c0009ec:	e1a03183 	lsl	r3, r3, #3
 c0009f0:	e51b2010 	ldr	r2, [fp, #-16]
 c0009f4:	e0822003 	add	r2, r2, r3
 c0009f8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c0009fc:	e2833001 	add	r3, r3, #1
 c000a00:	e7d22003 	ldrb	r2, [r2, r3]
 c000a04:	e59f3218 	ldr	r3, [pc, #536]	; c000c24 <actualizar_candidatas+0x350>
 c000a08:	e5d33000 	ldrb	r3, [r3]
 c000a0c:	e1520003 	cmp	r2, r3
 c000a10:	0a000009 	beq	c000a3c <actualizar_candidatas+0x168>
            candidatas[f-1][c+1] = SI;
 c000a14:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000a18:	e2433001 	sub	r3, r3, #1
 c000a1c:	e1a03183 	lsl	r3, r3, #3
 c000a20:	e51b2010 	ldr	r2, [fp, #-16]
 c000a24:	e0822003 	add	r2, r2, r3
 c000a28:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000a2c:	e2833001 	add	r3, r3, #1
 c000a30:	e59f11f0 	ldr	r1, [pc, #496]	; c000c28 <actualizar_candidatas+0x354>
 c000a34:	e5d11000 	ldrb	r1, [r1]
 c000a38:	e7c21003 	strb	r1, [r2, r3]
    }
    if (f < 7)
 c000a3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000a40:	e3530006 	cmp	r3, #6
 c000a44:	8a000045 	bhi	c000b60 <actualizar_candidatas+0x28c>
    {
        if (candidatas[f+1][c] != CASILLA_OCUPADA)
 c000a48:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000a4c:	e2833001 	add	r3, r3, #1
 c000a50:	e1a03183 	lsl	r3, r3, #3
 c000a54:	e51b2010 	ldr	r2, [fp, #-16]
 c000a58:	e0822003 	add	r2, r2, r3
 c000a5c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000a60:	e7d22003 	ldrb	r2, [r2, r3]
 c000a64:	e59f31b8 	ldr	r3, [pc, #440]	; c000c24 <actualizar_candidatas+0x350>
 c000a68:	e5d33000 	ldrb	r3, [r3]
 c000a6c:	e1520003 	cmp	r2, r3
 c000a70:	0a000008 	beq	c000a98 <actualizar_candidatas+0x1c4>
            candidatas[f+1][c] = SI;
 c000a74:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000a78:	e2833001 	add	r3, r3, #1
 c000a7c:	e1a03183 	lsl	r3, r3, #3
 c000a80:	e51b2010 	ldr	r2, [fp, #-16]
 c000a84:	e0822003 	add	r2, r2, r3
 c000a88:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000a8c:	e59f1194 	ldr	r1, [pc, #404]	; c000c28 <actualizar_candidatas+0x354>
 c000a90:	e5d11000 	ldrb	r1, [r1]
 c000a94:	e7c21003 	strb	r1, [r2, r3]

        if ((c > 0) && (candidatas[f+1][c-1] != CASILLA_OCUPADA))
 c000a98:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000a9c:	e3530000 	cmp	r3, #0
 c000aa0:	0a000015 	beq	c000afc <actualizar_candidatas+0x228>
 c000aa4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000aa8:	e2833001 	add	r3, r3, #1
 c000aac:	e1a03183 	lsl	r3, r3, #3
 c000ab0:	e51b2010 	ldr	r2, [fp, #-16]
 c000ab4:	e0822003 	add	r2, r2, r3
 c000ab8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000abc:	e2433001 	sub	r3, r3, #1
 c000ac0:	e7d22003 	ldrb	r2, [r2, r3]
 c000ac4:	e59f3158 	ldr	r3, [pc, #344]	; c000c24 <actualizar_candidatas+0x350>
 c000ac8:	e5d33000 	ldrb	r3, [r3]
 c000acc:	e1520003 	cmp	r2, r3
 c000ad0:	0a000009 	beq	c000afc <actualizar_candidatas+0x228>
            candidatas[f+1][c-1] = SI;
 c000ad4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000ad8:	e2833001 	add	r3, r3, #1
 c000adc:	e1a03183 	lsl	r3, r3, #3
 c000ae0:	e51b2010 	ldr	r2, [fp, #-16]
 c000ae4:	e0822003 	add	r2, r2, r3
 c000ae8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000aec:	e2433001 	sub	r3, r3, #1
 c000af0:	e59f1130 	ldr	r1, [pc, #304]	; c000c28 <actualizar_candidatas+0x354>
 c000af4:	e5d11000 	ldrb	r1, [r1]
 c000af8:	e7c21003 	strb	r1, [r2, r3]

        if ((c < 7) && (candidatas[f+1][c+1] != CASILLA_OCUPADA))
 c000afc:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000b00:	e3530006 	cmp	r3, #6
 c000b04:	8a000015 	bhi	c000b60 <actualizar_candidatas+0x28c>
 c000b08:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000b0c:	e2833001 	add	r3, r3, #1
 c000b10:	e1a03183 	lsl	r3, r3, #3
 c000b14:	e51b2010 	ldr	r2, [fp, #-16]
 c000b18:	e0822003 	add	r2, r2, r3
 c000b1c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000b20:	e2833001 	add	r3, r3, #1
 c000b24:	e7d22003 	ldrb	r2, [r2, r3]
 c000b28:	e59f30f4 	ldr	r3, [pc, #244]	; c000c24 <actualizar_candidatas+0x350>
 c000b2c:	e5d33000 	ldrb	r3, [r3]
 c000b30:	e1520003 	cmp	r2, r3
 c000b34:	0a000009 	beq	c000b60 <actualizar_candidatas+0x28c>
            candidatas[f+1][c+1] = SI;
 c000b38:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000b3c:	e2833001 	add	r3, r3, #1
 c000b40:	e1a03183 	lsl	r3, r3, #3
 c000b44:	e51b2010 	ldr	r2, [fp, #-16]
 c000b48:	e0822003 	add	r2, r2, r3
 c000b4c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000b50:	e2833001 	add	r3, r3, #1
 c000b54:	e59f10cc 	ldr	r1, [pc, #204]	; c000c28 <actualizar_candidatas+0x354>
 c000b58:	e5d11000 	ldrb	r1, [r1]
 c000b5c:	e7c21003 	strb	r1, [r2, r3]
    }
    if ((c > 0) && (candidatas[f][c-1] != CASILLA_OCUPADA))
 c000b60:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000b64:	e3530000 	cmp	r3, #0
 c000b68:	0a000013 	beq	c000bbc <actualizar_candidatas+0x2e8>
 c000b6c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000b70:	e1a03183 	lsl	r3, r3, #3
 c000b74:	e51b2010 	ldr	r2, [fp, #-16]
 c000b78:	e0822003 	add	r2, r2, r3
 c000b7c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000b80:	e2433001 	sub	r3, r3, #1
 c000b84:	e7d22003 	ldrb	r2, [r2, r3]
 c000b88:	e59f3094 	ldr	r3, [pc, #148]	; c000c24 <actualizar_candidatas+0x350>
 c000b8c:	e5d33000 	ldrb	r3, [r3]
 c000b90:	e1520003 	cmp	r2, r3
 c000b94:	0a000008 	beq	c000bbc <actualizar_candidatas+0x2e8>
        candidatas[f][c-1] = SI;
 c000b98:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000b9c:	e1a03183 	lsl	r3, r3, #3
 c000ba0:	e51b2010 	ldr	r2, [fp, #-16]
 c000ba4:	e0822003 	add	r2, r2, r3
 c000ba8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000bac:	e2433001 	sub	r3, r3, #1
 c000bb0:	e59f1070 	ldr	r1, [pc, #112]	; c000c28 <actualizar_candidatas+0x354>
 c000bb4:	e5d11000 	ldrb	r1, [r1]
 c000bb8:	e7c21003 	strb	r1, [r2, r3]

    if ((c < 7) && (candidatas[f][c+1] != CASILLA_OCUPADA))
 c000bbc:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000bc0:	e3530006 	cmp	r3, #6
 c000bc4:	8a000013 	bhi	c000c18 <actualizar_candidatas+0x344>
 c000bc8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000bcc:	e1a03183 	lsl	r3, r3, #3
 c000bd0:	e51b2010 	ldr	r2, [fp, #-16]
 c000bd4:	e0822003 	add	r2, r2, r3
 c000bd8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000bdc:	e2833001 	add	r3, r3, #1
 c000be0:	e7d22003 	ldrb	r2, [r2, r3]
 c000be4:	e59f3038 	ldr	r3, [pc, #56]	; c000c24 <actualizar_candidatas+0x350>
 c000be8:	e5d33000 	ldrb	r3, [r3]
 c000bec:	e1520003 	cmp	r2, r3
 c000bf0:	0a000008 	beq	c000c18 <actualizar_candidatas+0x344>
        candidatas[f][c+1] = SI;
 c000bf4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000bf8:	e1a03183 	lsl	r3, r3, #3
 c000bfc:	e51b2010 	ldr	r2, [fp, #-16]
 c000c00:	e0822003 	add	r2, r2, r3
 c000c04:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000c08:	e2833001 	add	r3, r3, #1
 c000c0c:	e59f1014 	ldr	r1, [pc, #20]	; c000c28 <actualizar_candidatas+0x354>
 c000c10:	e5d11000 	ldrb	r1, [r1]
 c000c14:	e7c21003 	strb	r1, [r2, r3]
}
 c000c18:	e24bd00c 	sub	sp, fp, #12
 c000c1c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000c20:	e12fff1e 	bx	lr
 c000c24:	0c001392 	.word	0x0c001392
 c000c28:	0c001391 	.word	0x0c001391

0c000c2c <reversi8>:
// la razón es que al meterlas en la pila no las pone juntas, y así jugar es más complicado.
// en esta versión el humano lleva negras y la máquina blancas
// no se comprueba que el humano mueva correctamente.
// Sólo que la máquina realice un movimiento correcto.
void reversi8()
{
 c000c2c:	e1a0c00d 	mov	ip, sp
 c000c30:	e92ddff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 c000c34:	e24cb004 	sub	fp, ip, #4
 c000c38:	e24ddf4d 	sub	sp, sp, #308	; 0x134

	 ////////////////////////////////////////////////////////////////////
	 // Tablero candidatas: se usa para no explorar todas las posiciones del tablero
	// sólo se exploran las que están alrededor de las fichas colocadas
	 ////////////////////////////////////////////////////////////////////
	char __attribute__ ((aligned (8))) candidatas[DIM][DIM] =
 c000c3c:	e59f3734 	ldr	r3, [pc, #1844]	; c001378 <reversi8+0x74c>
 c000c40:	e5d31000 	ldrb	r1, [r3]
 c000c44:	e59f372c 	ldr	r3, [pc, #1836]	; c001378 <reversi8+0x74c>
 c000c48:	e5d3c000 	ldrb	ip, [r3]
 c000c4c:	e59f3724 	ldr	r3, [pc, #1828]	; c001378 <reversi8+0x74c>
 c000c50:	e5d34000 	ldrb	r4, [r3]
 c000c54:	e59f371c 	ldr	r3, [pc, #1820]	; c001378 <reversi8+0x74c>
 c000c58:	e5d36000 	ldrb	r6, [r3]
 c000c5c:	e59f3714 	ldr	r3, [pc, #1812]	; c001378 <reversi8+0x74c>
 c000c60:	e5d38000 	ldrb	r8, [r3]
 c000c64:	e59f370c 	ldr	r3, [pc, #1804]	; c001378 <reversi8+0x74c>
 c000c68:	e5d39000 	ldrb	r9, [r3]
 c000c6c:	e59f3704 	ldr	r3, [pc, #1796]	; c001378 <reversi8+0x74c>
 c000c70:	e5d33000 	ldrb	r3, [r3]
 c000c74:	e50b3090 	str	r3, [fp, #-144]	; 0xffffff70
 c000c78:	e59f36f8 	ldr	r3, [pc, #1784]	; c001378 <reversi8+0x74c>
 c000c7c:	e5d33000 	ldrb	r3, [r3]
 c000c80:	e50b3094 	str	r3, [fp, #-148]	; 0xffffff6c
 c000c84:	e59f36ec 	ldr	r3, [pc, #1772]	; c001378 <reversi8+0x74c>
 c000c88:	e5d33000 	ldrb	r3, [r3]
 c000c8c:	e50b3098 	str	r3, [fp, #-152]	; 0xffffff68
 c000c90:	e59f36e0 	ldr	r3, [pc, #1760]	; c001378 <reversi8+0x74c>
 c000c94:	e5d33000 	ldrb	r3, [r3]
 c000c98:	e50b309c 	str	r3, [fp, #-156]	; 0xffffff64
 c000c9c:	e59f36d4 	ldr	r3, [pc, #1748]	; c001378 <reversi8+0x74c>
 c000ca0:	e5d33000 	ldrb	r3, [r3]
 c000ca4:	e50b30a0 	str	r3, [fp, #-160]	; 0xffffff60
 c000ca8:	e59f36c8 	ldr	r3, [pc, #1736]	; c001378 <reversi8+0x74c>
 c000cac:	e5d33000 	ldrb	r3, [r3]
 c000cb0:	e50b30a4 	str	r3, [fp, #-164]	; 0xffffff5c
 c000cb4:	e59f36bc 	ldr	r3, [pc, #1724]	; c001378 <reversi8+0x74c>
 c000cb8:	e5d33000 	ldrb	r3, [r3]
 c000cbc:	e50b30a8 	str	r3, [fp, #-168]	; 0xffffff58
 c000cc0:	e59f36b0 	ldr	r3, [pc, #1712]	; c001378 <reversi8+0x74c>
 c000cc4:	e5d33000 	ldrb	r3, [r3]
 c000cc8:	e50b30ac 	str	r3, [fp, #-172]	; 0xffffff54
 c000ccc:	e59f36a4 	ldr	r3, [pc, #1700]	; c001378 <reversi8+0x74c>
 c000cd0:	e5d33000 	ldrb	r3, [r3]
 c000cd4:	e50b30b0 	str	r3, [fp, #-176]	; 0xffffff50
 c000cd8:	e59f3698 	ldr	r3, [pc, #1688]	; c001378 <reversi8+0x74c>
 c000cdc:	e5d33000 	ldrb	r3, [r3]
 c000ce0:	e50b30b4 	str	r3, [fp, #-180]	; 0xffffff4c
 c000ce4:	e59f368c 	ldr	r3, [pc, #1676]	; c001378 <reversi8+0x74c>
 c000ce8:	e5d33000 	ldrb	r3, [r3]
 c000cec:	e50b30b8 	str	r3, [fp, #-184]	; 0xffffff48
 c000cf0:	e59f3680 	ldr	r3, [pc, #1664]	; c001378 <reversi8+0x74c>
 c000cf4:	e5d33000 	ldrb	r3, [r3]
 c000cf8:	e50b30bc 	str	r3, [fp, #-188]	; 0xffffff44
 c000cfc:	e59f3674 	ldr	r3, [pc, #1652]	; c001378 <reversi8+0x74c>
 c000d00:	e5d33000 	ldrb	r3, [r3]
 c000d04:	e50b30c0 	str	r3, [fp, #-192]	; 0xffffff40
 c000d08:	e59f3668 	ldr	r3, [pc, #1640]	; c001378 <reversi8+0x74c>
 c000d0c:	e5d33000 	ldrb	r3, [r3]
 c000d10:	e50b30c4 	str	r3, [fp, #-196]	; 0xffffff3c
 c000d14:	e59f365c 	ldr	r3, [pc, #1628]	; c001378 <reversi8+0x74c>
 c000d18:	e5d33000 	ldrb	r3, [r3]
 c000d1c:	e50b30c8 	str	r3, [fp, #-200]	; 0xffffff38
 c000d20:	e59f3650 	ldr	r3, [pc, #1616]	; c001378 <reversi8+0x74c>
 c000d24:	e5d33000 	ldrb	r3, [r3]
 c000d28:	e50b30cc 	str	r3, [fp, #-204]	; 0xffffff34
 c000d2c:	e59f3644 	ldr	r3, [pc, #1604]	; c001378 <reversi8+0x74c>
 c000d30:	e5d33000 	ldrb	r3, [r3]
 c000d34:	e50b30d0 	str	r3, [fp, #-208]	; 0xffffff30
 c000d38:	e59f3638 	ldr	r3, [pc, #1592]	; c001378 <reversi8+0x74c>
 c000d3c:	e5d33000 	ldrb	r3, [r3]
 c000d40:	e50b30d4 	str	r3, [fp, #-212]	; 0xffffff2c
 c000d44:	e59f362c 	ldr	r3, [pc, #1580]	; c001378 <reversi8+0x74c>
 c000d48:	e5d33000 	ldrb	r3, [r3]
 c000d4c:	e50b30d8 	str	r3, [fp, #-216]	; 0xffffff28
 c000d50:	e59f3620 	ldr	r3, [pc, #1568]	; c001378 <reversi8+0x74c>
 c000d54:	e5d33000 	ldrb	r3, [r3]
 c000d58:	e50b30dc 	str	r3, [fp, #-220]	; 0xffffff24
 c000d5c:	e59f3614 	ldr	r3, [pc, #1556]	; c001378 <reversi8+0x74c>
 c000d60:	e5d33000 	ldrb	r3, [r3]
 c000d64:	e50b30e0 	str	r3, [fp, #-224]	; 0xffffff20
 c000d68:	e59f3608 	ldr	r3, [pc, #1544]	; c001378 <reversi8+0x74c>
 c000d6c:	e5d33000 	ldrb	r3, [r3]
 c000d70:	e50b30e4 	str	r3, [fp, #-228]	; 0xffffff1c
 c000d74:	e59f35fc 	ldr	r3, [pc, #1532]	; c001378 <reversi8+0x74c>
 c000d78:	e5d33000 	ldrb	r3, [r3]
 c000d7c:	e50b30e8 	str	r3, [fp, #-232]	; 0xffffff18
 c000d80:	e59f35f0 	ldr	r3, [pc, #1520]	; c001378 <reversi8+0x74c>
 c000d84:	e5d33000 	ldrb	r3, [r3]
 c000d88:	e50b30ec 	str	r3, [fp, #-236]	; 0xffffff14
 c000d8c:	e59f35e4 	ldr	r3, [pc, #1508]	; c001378 <reversi8+0x74c>
 c000d90:	e5d33000 	ldrb	r3, [r3]
 c000d94:	e50b30f0 	str	r3, [fp, #-240]	; 0xffffff10
 c000d98:	e59f35d8 	ldr	r3, [pc, #1496]	; c001378 <reversi8+0x74c>
 c000d9c:	e5d33000 	ldrb	r3, [r3]
 c000da0:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c
 c000da4:	e59f35cc 	ldr	r3, [pc, #1484]	; c001378 <reversi8+0x74c>
 c000da8:	e5d33000 	ldrb	r3, [r3]
 c000dac:	e50b30f8 	str	r3, [fp, #-248]	; 0xffffff08
 c000db0:	e59f35c0 	ldr	r3, [pc, #1472]	; c001378 <reversi8+0x74c>
 c000db4:	e5d33000 	ldrb	r3, [r3]
 c000db8:	e50b30fc 	str	r3, [fp, #-252]	; 0xffffff04
 c000dbc:	e59f35b4 	ldr	r3, [pc, #1460]	; c001378 <reversi8+0x74c>
 c000dc0:	e5d33000 	ldrb	r3, [r3]
 c000dc4:	e50b3100 	str	r3, [fp, #-256]	; 0xffffff00
 c000dc8:	e59f35a8 	ldr	r3, [pc, #1448]	; c001378 <reversi8+0x74c>
 c000dcc:	e5d33000 	ldrb	r3, [r3]
 c000dd0:	e50b3104 	str	r3, [fp, #-260]	; 0xfffffefc
 c000dd4:	e59f359c 	ldr	r3, [pc, #1436]	; c001378 <reversi8+0x74c>
 c000dd8:	e5d33000 	ldrb	r3, [r3]
 c000ddc:	e50b3108 	str	r3, [fp, #-264]	; 0xfffffef8
 c000de0:	e59f3590 	ldr	r3, [pc, #1424]	; c001378 <reversi8+0x74c>
 c000de4:	e5d33000 	ldrb	r3, [r3]
 c000de8:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
 c000dec:	e59f3584 	ldr	r3, [pc, #1412]	; c001378 <reversi8+0x74c>
 c000df0:	e5d33000 	ldrb	r3, [r3]
 c000df4:	e50b3110 	str	r3, [fp, #-272]	; 0xfffffef0
 c000df8:	e59f3578 	ldr	r3, [pc, #1400]	; c001378 <reversi8+0x74c>
 c000dfc:	e5d33000 	ldrb	r3, [r3]
 c000e00:	e50b3114 	str	r3, [fp, #-276]	; 0xfffffeec
 c000e04:	e59f356c 	ldr	r3, [pc, #1388]	; c001378 <reversi8+0x74c>
 c000e08:	e5d33000 	ldrb	r3, [r3]
 c000e0c:	e50b3118 	str	r3, [fp, #-280]	; 0xfffffee8
 c000e10:	e59f3560 	ldr	r3, [pc, #1376]	; c001378 <reversi8+0x74c>
 c000e14:	e5d33000 	ldrb	r3, [r3]
 c000e18:	e50b311c 	str	r3, [fp, #-284]	; 0xfffffee4
 c000e1c:	e59f3554 	ldr	r3, [pc, #1364]	; c001378 <reversi8+0x74c>
 c000e20:	e5d33000 	ldrb	r3, [r3]
 c000e24:	e50b3120 	str	r3, [fp, #-288]	; 0xfffffee0
 c000e28:	e59f3548 	ldr	r3, [pc, #1352]	; c001378 <reversi8+0x74c>
 c000e2c:	e5d33000 	ldrb	r3, [r3]
 c000e30:	e50b3124 	str	r3, [fp, #-292]	; 0xfffffedc
 c000e34:	e59f353c 	ldr	r3, [pc, #1340]	; c001378 <reversi8+0x74c>
 c000e38:	e5d33000 	ldrb	r3, [r3]
 c000e3c:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
 c000e40:	e59f3530 	ldr	r3, [pc, #1328]	; c001378 <reversi8+0x74c>
 c000e44:	e5d33000 	ldrb	r3, [r3]
 c000e48:	e50b312c 	str	r3, [fp, #-300]	; 0xfffffed4
 c000e4c:	e59f3524 	ldr	r3, [pc, #1316]	; c001378 <reversi8+0x74c>
 c000e50:	e5d33000 	ldrb	r3, [r3]
 c000e54:	e50b3130 	str	r3, [fp, #-304]	; 0xfffffed0
 c000e58:	e59f3518 	ldr	r3, [pc, #1304]	; c001378 <reversi8+0x74c>
 c000e5c:	e5d33000 	ldrb	r3, [r3]
 c000e60:	e50b3134 	str	r3, [fp, #-308]	; 0xfffffecc
 c000e64:	e59f350c 	ldr	r3, [pc, #1292]	; c001378 <reversi8+0x74c>
 c000e68:	e5d33000 	ldrb	r3, [r3]
 c000e6c:	e50b3138 	str	r3, [fp, #-312]	; 0xfffffec8
 c000e70:	e59f3500 	ldr	r3, [pc, #1280]	; c001378 <reversi8+0x74c>
 c000e74:	e5d33000 	ldrb	r3, [r3]
 c000e78:	e50b313c 	str	r3, [fp, #-316]	; 0xfffffec4
 c000e7c:	e59f34f4 	ldr	r3, [pc, #1268]	; c001378 <reversi8+0x74c>
 c000e80:	e5d33000 	ldrb	r3, [r3]
 c000e84:	e50b3140 	str	r3, [fp, #-320]	; 0xfffffec0
 c000e88:	e59f34e8 	ldr	r3, [pc, #1256]	; c001378 <reversi8+0x74c>
 c000e8c:	e5d33000 	ldrb	r3, [r3]
 c000e90:	e50b3144 	str	r3, [fp, #-324]	; 0xfffffebc
 c000e94:	e59f34dc 	ldr	r3, [pc, #1244]	; c001378 <reversi8+0x74c>
 c000e98:	e5d33000 	ldrb	r3, [r3]
 c000e9c:	e50b3148 	str	r3, [fp, #-328]	; 0xfffffeb8
 c000ea0:	e59f34d0 	ldr	r3, [pc, #1232]	; c001378 <reversi8+0x74c>
 c000ea4:	e5d33000 	ldrb	r3, [r3]
 c000ea8:	e50b314c 	str	r3, [fp, #-332]	; 0xfffffeb4
 c000eac:	e59f34c4 	ldr	r3, [pc, #1220]	; c001378 <reversi8+0x74c>
 c000eb0:	e5d33000 	ldrb	r3, [r3]
 c000eb4:	e50b3150 	str	r3, [fp, #-336]	; 0xfffffeb0
 c000eb8:	e59f34b8 	ldr	r3, [pc, #1208]	; c001378 <reversi8+0x74c>
 c000ebc:	e5d33000 	ldrb	r3, [r3]
 c000ec0:	e50b3154 	str	r3, [fp, #-340]	; 0xfffffeac
 c000ec4:	e59f34ac 	ldr	r3, [pc, #1196]	; c001378 <reversi8+0x74c>
 c000ec8:	e5d33000 	ldrb	r3, [r3]
 c000ecc:	e50b3158 	str	r3, [fp, #-344]	; 0xfffffea8
 c000ed0:	e59f34a0 	ldr	r3, [pc, #1184]	; c001378 <reversi8+0x74c>
 c000ed4:	e5d33000 	ldrb	r3, [r3]
 c000ed8:	e50b315c 	str	r3, [fp, #-348]	; 0xfffffea4
 c000edc:	e59f3494 	ldr	r3, [pc, #1172]	; c001378 <reversi8+0x74c>
 c000ee0:	e5d3a000 	ldrb	sl, [r3]
 c000ee4:	e59f348c 	ldr	r3, [pc, #1164]	; c001378 <reversi8+0x74c>
 c000ee8:	e5d37000 	ldrb	r7, [r3]
 c000eec:	e59f3484 	ldr	r3, [pc, #1156]	; c001378 <reversi8+0x74c>
 c000ef0:	e5d35000 	ldrb	r5, [r3]
 c000ef4:	e59f347c 	ldr	r3, [pc, #1148]	; c001378 <reversi8+0x74c>
 c000ef8:	e5d3e000 	ldrb	lr, [r3]
 c000efc:	e59f3474 	ldr	r3, [pc, #1140]	; c001378 <reversi8+0x74c>
 c000f00:	e5d30000 	ldrb	r0, [r3]
 c000f04:	e59f346c 	ldr	r3, [pc, #1132]	; c001378 <reversi8+0x74c>
 c000f08:	e5d32000 	ldrb	r2, [r3]
 c000f0c:	e1a03001 	mov	r3, r1
 c000f10:	e54b307c 	strb	r3, [fp, #-124]	; 0xffffff84
 c000f14:	e1a0300c 	mov	r3, ip
 c000f18:	e54b307b 	strb	r3, [fp, #-123]	; 0xffffff85
 c000f1c:	e1a03004 	mov	r3, r4
 c000f20:	e54b307a 	strb	r3, [fp, #-122]	; 0xffffff86
 c000f24:	e1a03006 	mov	r3, r6
 c000f28:	e54b3079 	strb	r3, [fp, #-121]	; 0xffffff87
 c000f2c:	e1a03008 	mov	r3, r8
 c000f30:	e54b3078 	strb	r3, [fp, #-120]	; 0xffffff88
 c000f34:	e1a03009 	mov	r3, r9
 c000f38:	e54b3077 	strb	r3, [fp, #-119]	; 0xffffff89
 c000f3c:	e51b1090 	ldr	r1, [fp, #-144]	; 0xffffff70
 c000f40:	e1a03001 	mov	r3, r1
 c000f44:	e54b3076 	strb	r3, [fp, #-118]	; 0xffffff8a
 c000f48:	e51b1094 	ldr	r1, [fp, #-148]	; 0xffffff6c
 c000f4c:	e1a03001 	mov	r3, r1
 c000f50:	e54b3075 	strb	r3, [fp, #-117]	; 0xffffff8b
 c000f54:	e51b1098 	ldr	r1, [fp, #-152]	; 0xffffff68
 c000f58:	e1a03001 	mov	r3, r1
 c000f5c:	e54b3074 	strb	r3, [fp, #-116]	; 0xffffff8c
 c000f60:	e51b109c 	ldr	r1, [fp, #-156]	; 0xffffff64
 c000f64:	e1a03001 	mov	r3, r1
 c000f68:	e54b3073 	strb	r3, [fp, #-115]	; 0xffffff8d
 c000f6c:	e51b10a0 	ldr	r1, [fp, #-160]	; 0xffffff60
 c000f70:	e1a03001 	mov	r3, r1
 c000f74:	e54b3072 	strb	r3, [fp, #-114]	; 0xffffff8e
 c000f78:	e51b10a4 	ldr	r1, [fp, #-164]	; 0xffffff5c
 c000f7c:	e1a03001 	mov	r3, r1
 c000f80:	e54b3071 	strb	r3, [fp, #-113]	; 0xffffff8f
 c000f84:	e51b10a8 	ldr	r1, [fp, #-168]	; 0xffffff58
 c000f88:	e1a03001 	mov	r3, r1
 c000f8c:	e54b3070 	strb	r3, [fp, #-112]	; 0xffffff90
 c000f90:	e51b10ac 	ldr	r1, [fp, #-172]	; 0xffffff54
 c000f94:	e1a03001 	mov	r3, r1
 c000f98:	e54b306f 	strb	r3, [fp, #-111]	; 0xffffff91
 c000f9c:	e51b10b0 	ldr	r1, [fp, #-176]	; 0xffffff50
 c000fa0:	e1a03001 	mov	r3, r1
 c000fa4:	e54b306e 	strb	r3, [fp, #-110]	; 0xffffff92
 c000fa8:	e51b10b4 	ldr	r1, [fp, #-180]	; 0xffffff4c
 c000fac:	e1a03001 	mov	r3, r1
 c000fb0:	e54b306d 	strb	r3, [fp, #-109]	; 0xffffff93
 c000fb4:	e51b10b8 	ldr	r1, [fp, #-184]	; 0xffffff48
 c000fb8:	e1a03001 	mov	r3, r1
 c000fbc:	e54b306c 	strb	r3, [fp, #-108]	; 0xffffff94
 c000fc0:	e51b10bc 	ldr	r1, [fp, #-188]	; 0xffffff44
 c000fc4:	e1a03001 	mov	r3, r1
 c000fc8:	e54b306b 	strb	r3, [fp, #-107]	; 0xffffff95
 c000fcc:	e51b10c0 	ldr	r1, [fp, #-192]	; 0xffffff40
 c000fd0:	e1a03001 	mov	r3, r1
 c000fd4:	e54b306a 	strb	r3, [fp, #-106]	; 0xffffff96
 c000fd8:	e51b10c4 	ldr	r1, [fp, #-196]	; 0xffffff3c
 c000fdc:	e1a03001 	mov	r3, r1
 c000fe0:	e54b3069 	strb	r3, [fp, #-105]	; 0xffffff97
 c000fe4:	e51b10c8 	ldr	r1, [fp, #-200]	; 0xffffff38
 c000fe8:	e1a03001 	mov	r3, r1
 c000fec:	e54b3068 	strb	r3, [fp, #-104]	; 0xffffff98
 c000ff0:	e51b10cc 	ldr	r1, [fp, #-204]	; 0xffffff34
 c000ff4:	e1a03001 	mov	r3, r1
 c000ff8:	e54b3067 	strb	r3, [fp, #-103]	; 0xffffff99
 c000ffc:	e51b10d0 	ldr	r1, [fp, #-208]	; 0xffffff30
 c001000:	e1a03001 	mov	r3, r1
 c001004:	e54b3066 	strb	r3, [fp, #-102]	; 0xffffff9a
 c001008:	e51b10d4 	ldr	r1, [fp, #-212]	; 0xffffff2c
 c00100c:	e1a03001 	mov	r3, r1
 c001010:	e54b3065 	strb	r3, [fp, #-101]	; 0xffffff9b
 c001014:	e51b10d8 	ldr	r1, [fp, #-216]	; 0xffffff28
 c001018:	e1a03001 	mov	r3, r1
 c00101c:	e54b3064 	strb	r3, [fp, #-100]	; 0xffffff9c
 c001020:	e51b10dc 	ldr	r1, [fp, #-220]	; 0xffffff24
 c001024:	e1a03001 	mov	r3, r1
 c001028:	e54b3063 	strb	r3, [fp, #-99]	; 0xffffff9d
 c00102c:	e51b10e0 	ldr	r1, [fp, #-224]	; 0xffffff20
 c001030:	e1a03001 	mov	r3, r1
 c001034:	e54b3062 	strb	r3, [fp, #-98]	; 0xffffff9e
 c001038:	e51b10e4 	ldr	r1, [fp, #-228]	; 0xffffff1c
 c00103c:	e1a03001 	mov	r3, r1
 c001040:	e54b3061 	strb	r3, [fp, #-97]	; 0xffffff9f
 c001044:	e51b10e8 	ldr	r1, [fp, #-232]	; 0xffffff18
 c001048:	e1a03001 	mov	r3, r1
 c00104c:	e54b3060 	strb	r3, [fp, #-96]	; 0xffffffa0
 c001050:	e51b10ec 	ldr	r1, [fp, #-236]	; 0xffffff14
 c001054:	e1a03001 	mov	r3, r1
 c001058:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
 c00105c:	e51b10f0 	ldr	r1, [fp, #-240]	; 0xffffff10
 c001060:	e1a03001 	mov	r3, r1
 c001064:	e54b305e 	strb	r3, [fp, #-94]	; 0xffffffa2
 c001068:	e51b10f4 	ldr	r1, [fp, #-244]	; 0xffffff0c
 c00106c:	e1a03001 	mov	r3, r1
 c001070:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
 c001074:	e51b10f8 	ldr	r1, [fp, #-248]	; 0xffffff08
 c001078:	e1a03001 	mov	r3, r1
 c00107c:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
 c001080:	e51b10fc 	ldr	r1, [fp, #-252]	; 0xffffff04
 c001084:	e1a03001 	mov	r3, r1
 c001088:	e54b305b 	strb	r3, [fp, #-91]	; 0xffffffa5
 c00108c:	e51b1100 	ldr	r1, [fp, #-256]	; 0xffffff00
 c001090:	e1a03001 	mov	r3, r1
 c001094:	e54b305a 	strb	r3, [fp, #-90]	; 0xffffffa6
 c001098:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
 c00109c:	e1a03001 	mov	r3, r1
 c0010a0:	e54b3059 	strb	r3, [fp, #-89]	; 0xffffffa7
 c0010a4:	e51b1108 	ldr	r1, [fp, #-264]	; 0xfffffef8
 c0010a8:	e1a03001 	mov	r3, r1
 c0010ac:	e54b3058 	strb	r3, [fp, #-88]	; 0xffffffa8
 c0010b0:	e51b110c 	ldr	r1, [fp, #-268]	; 0xfffffef4
 c0010b4:	e1a03001 	mov	r3, r1
 c0010b8:	e54b3057 	strb	r3, [fp, #-87]	; 0xffffffa9
 c0010bc:	e51b1110 	ldr	r1, [fp, #-272]	; 0xfffffef0
 c0010c0:	e1a03001 	mov	r3, r1
 c0010c4:	e54b3056 	strb	r3, [fp, #-86]	; 0xffffffaa
 c0010c8:	e51b1114 	ldr	r1, [fp, #-276]	; 0xfffffeec
 c0010cc:	e1a03001 	mov	r3, r1
 c0010d0:	e54b3055 	strb	r3, [fp, #-85]	; 0xffffffab
 c0010d4:	e51b1118 	ldr	r1, [fp, #-280]	; 0xfffffee8
 c0010d8:	e1a03001 	mov	r3, r1
 c0010dc:	e54b3054 	strb	r3, [fp, #-84]	; 0xffffffac
 c0010e0:	e51b111c 	ldr	r1, [fp, #-284]	; 0xfffffee4
 c0010e4:	e1a03001 	mov	r3, r1
 c0010e8:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
 c0010ec:	e51b1120 	ldr	r1, [fp, #-288]	; 0xfffffee0
 c0010f0:	e1a03001 	mov	r3, r1
 c0010f4:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
 c0010f8:	e51b1124 	ldr	r1, [fp, #-292]	; 0xfffffedc
 c0010fc:	e1a03001 	mov	r3, r1
 c001100:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf
 c001104:	e51b1128 	ldr	r1, [fp, #-296]	; 0xfffffed8
 c001108:	e1a03001 	mov	r3, r1
 c00110c:	e54b3050 	strb	r3, [fp, #-80]	; 0xffffffb0
 c001110:	e51b112c 	ldr	r1, [fp, #-300]	; 0xfffffed4
 c001114:	e1a03001 	mov	r3, r1
 c001118:	e54b304f 	strb	r3, [fp, #-79]	; 0xffffffb1
 c00111c:	e51b1130 	ldr	r1, [fp, #-304]	; 0xfffffed0
 c001120:	e1a03001 	mov	r3, r1
 c001124:	e54b304e 	strb	r3, [fp, #-78]	; 0xffffffb2
 c001128:	e51b1134 	ldr	r1, [fp, #-308]	; 0xfffffecc
 c00112c:	e1a03001 	mov	r3, r1
 c001130:	e54b304d 	strb	r3, [fp, #-77]	; 0xffffffb3
 c001134:	e51b1138 	ldr	r1, [fp, #-312]	; 0xfffffec8
 c001138:	e1a03001 	mov	r3, r1
 c00113c:	e54b304c 	strb	r3, [fp, #-76]	; 0xffffffb4
 c001140:	e51b113c 	ldr	r1, [fp, #-316]	; 0xfffffec4
 c001144:	e1a03001 	mov	r3, r1
 c001148:	e54b304b 	strb	r3, [fp, #-75]	; 0xffffffb5
 c00114c:	e51b1140 	ldr	r1, [fp, #-320]	; 0xfffffec0
 c001150:	e1a03001 	mov	r3, r1
 c001154:	e54b304a 	strb	r3, [fp, #-74]	; 0xffffffb6
 c001158:	e51b1144 	ldr	r1, [fp, #-324]	; 0xfffffebc
 c00115c:	e1a03001 	mov	r3, r1
 c001160:	e54b3049 	strb	r3, [fp, #-73]	; 0xffffffb7
 c001164:	e51b1148 	ldr	r1, [fp, #-328]	; 0xfffffeb8
 c001168:	e1a03001 	mov	r3, r1
 c00116c:	e54b3048 	strb	r3, [fp, #-72]	; 0xffffffb8
 c001170:	e51b114c 	ldr	r1, [fp, #-332]	; 0xfffffeb4
 c001174:	e1a03001 	mov	r3, r1
 c001178:	e54b3047 	strb	r3, [fp, #-71]	; 0xffffffb9
 c00117c:	e51b1150 	ldr	r1, [fp, #-336]	; 0xfffffeb0
 c001180:	e1a03001 	mov	r3, r1
 c001184:	e54b3046 	strb	r3, [fp, #-70]	; 0xffffffba
 c001188:	e51b1154 	ldr	r1, [fp, #-340]	; 0xfffffeac
 c00118c:	e1a03001 	mov	r3, r1
 c001190:	e54b3045 	strb	r3, [fp, #-69]	; 0xffffffbb
 c001194:	e51b1158 	ldr	r1, [fp, #-344]	; 0xfffffea8
 c001198:	e1a03001 	mov	r3, r1
 c00119c:	e54b3044 	strb	r3, [fp, #-68]	; 0xffffffbc
 c0011a0:	e51b115c 	ldr	r1, [fp, #-348]	; 0xfffffea4
 c0011a4:	e1a03001 	mov	r3, r1
 c0011a8:	e54b3043 	strb	r3, [fp, #-67]	; 0xffffffbd
 c0011ac:	e1a0300a 	mov	r3, sl
 c0011b0:	e54b3042 	strb	r3, [fp, #-66]	; 0xffffffbe
 c0011b4:	e1a03007 	mov	r3, r7
 c0011b8:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
 c0011bc:	e1a03005 	mov	r3, r5
 c0011c0:	e54b3040 	strb	r3, [fp, #-64]	; 0xffffffc0
 c0011c4:	e1a0300e 	mov	r3, lr
 c0011c8:	e54b303f 	strb	r3, [fp, #-63]	; 0xffffffc1
 c0011cc:	e1a03000 	mov	r3, r0
 c0011d0:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
 c0011d4:	e1a03002 	mov	r3, r2
 c0011d8:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
        {NO,NO,NO,NO,NO,NO,NO,NO}
    };


    int done;     // la máquina ha conseguido mover o no
    int move = 0; // el humano ha conseguido mover o no
 c0011dc:	e3a03000 	mov	r3, #0
 c0011e0:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    int blancas, negras; // número de fichas de cada color
    int fin = 0;  // fin vale 1 si el humano no ha podido mover
 c0011e4:	e3a03000 	mov	r3, #0
 c0011e8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
                  // (ha introducido un valor de movimiento con algún 8)
                  // y luego la máquina tampoco puede
    char f, c;    // fila y columna elegidas por la máquina para su movimiento

    init_table(tablero, candidatas);
 c0011ec:	e24b307c 	sub	r3, fp, #124	; 0x7c
 c0011f0:	e59f0184 	ldr	r0, [pc, #388]	; c00137c <reversi8+0x750>
 c0011f4:	e1a01003 	mov	r1, r3
 c0011f8:	ebfffb87 	bl	c00001c <init_table>
    while (fin == 0)
 c0011fc:	ea000051 	b	c001348 <reversi8+0x71c>
    {
        move = 0;
 c001200:	e3a03000 	mov	r3, #0
 c001204:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
        esperar_mov(&ready);
 c001208:	e59f0170 	ldr	r0, [pc, #368]	; c001380 <reversi8+0x754>
 c00120c:	ebfffc07 	bl	c000230 <esperar_mov>
        // si la fila o columna son 8 asumimos que el jugador no puede mover
        if (((fila) != DIM) && ((columna) != DIM))
 c001210:	e59f316c 	ldr	r3, [pc, #364]	; c001384 <reversi8+0x758>
 c001214:	e5d33000 	ldrb	r3, [r3]
 c001218:	e3530008 	cmp	r3, #8
 c00121c:	0a000022 	beq	c0012ac <reversi8+0x680>
 c001220:	e59f3160 	ldr	r3, [pc, #352]	; c001388 <reversi8+0x75c>
 c001224:	e5d33000 	ldrb	r3, [r3]
 c001228:	e3530008 	cmp	r3, #8
 c00122c:	0a00001e 	beq	c0012ac <reversi8+0x680>
        {
            tablero[fila][columna] = FICHA_NEGRA;
 c001230:	e59f314c 	ldr	r3, [pc, #332]	; c001384 <reversi8+0x758>
 c001234:	e5d33000 	ldrb	r3, [r3]
 c001238:	e1a01003 	mov	r1, r3
 c00123c:	e59f3144 	ldr	r3, [pc, #324]	; c001388 <reversi8+0x75c>
 c001240:	e5d33000 	ldrb	r3, [r3]
 c001244:	e59f2130 	ldr	r2, [pc, #304]	; c00137c <reversi8+0x750>
 c001248:	e1a01181 	lsl	r1, r1, #3
 c00124c:	e0813003 	add	r3, r1, r3
 c001250:	e0823003 	add	r3, r2, r3
 c001254:	e3a02002 	mov	r2, #2
 c001258:	e5c32000 	strb	r2, [r3]
            actualizar_tablero(tablero, fila, columna, FICHA_NEGRA);
 c00125c:	e59f3120 	ldr	r3, [pc, #288]	; c001384 <reversi8+0x758>
 c001260:	e5d32000 	ldrb	r2, [r3]
 c001264:	e59f311c 	ldr	r3, [pc, #284]	; c001388 <reversi8+0x75c>
 c001268:	e5d33000 	ldrb	r3, [r3]
 c00126c:	e59f0108 	ldr	r0, [pc, #264]	; c00137c <reversi8+0x750>
 c001270:	e1a01002 	mov	r1, r2
 c001274:	e1a02003 	mov	r2, r3
 c001278:	e3a03002 	mov	r3, #2
 c00127c:	ebfffc91 	bl	c0004c8 <actualizar_tablero>
            actualizar_candidatas(candidatas, fila, columna);
 c001280:	e59f30fc 	ldr	r3, [pc, #252]	; c001384 <reversi8+0x758>
 c001284:	e5d32000 	ldrb	r2, [r3]
 c001288:	e59f30f8 	ldr	r3, [pc, #248]	; c001388 <reversi8+0x75c>
 c00128c:	e5d33000 	ldrb	r3, [r3]
 c001290:	e24b107c 	sub	r1, fp, #124	; 0x7c
 c001294:	e1a00001 	mov	r0, r1
 c001298:	e1a01002 	mov	r1, r2
 c00129c:	e1a02003 	mov	r2, r3
 c0012a0:	ebfffd8b 	bl	c0008d4 <actualizar_candidatas>
            move = 1;
 c0012a4:	e3a03001 	mov	r3, #1
 c0012a8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
        }

        // escribe el movimiento en las variables globales fila columna
        done = elegir_mov(candidatas, tablero, &f, &c);
 c0012ac:	e24b107c 	sub	r1, fp, #124	; 0x7c
 c0012b0:	e24b2085 	sub	r2, fp, #133	; 0x85
 c0012b4:	e24b3086 	sub	r3, fp, #134	; 0x86
 c0012b8:	e1a00001 	mov	r0, r1
 c0012bc:	e59f10b8 	ldr	r1, [pc, #184]	; c00137c <reversi8+0x750>
 c0012c0:	ebfffcbe 	bl	c0005c0 <elegir_mov>
 c0012c4:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
        if (done == -1)
 c0012c8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
 c0012cc:	e3730001 	cmn	r3, #1
 c0012d0:	1a000005 	bne	c0012ec <reversi8+0x6c0>
        {
            if (move == 0)
 c0012d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c0012d8:	e3530000 	cmp	r3, #0
 c0012dc:	1a000019 	bne	c001348 <reversi8+0x71c>
                fin = 1;
 c0012e0:	e3a03001 	mov	r3, #1
 c0012e4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
 c0012e8:	ea000016 	b	c001348 <reversi8+0x71c>
        }
        else
        {
            tablero[f][c] = FICHA_BLANCA;
 c0012ec:	e55b3085 	ldrb	r3, [fp, #-133]	; 0xffffff7b
 c0012f0:	e1a01003 	mov	r1, r3
 c0012f4:	e55b3086 	ldrb	r3, [fp, #-134]	; 0xffffff7a
 c0012f8:	e59f207c 	ldr	r2, [pc, #124]	; c00137c <reversi8+0x750>
 c0012fc:	e1a01181 	lsl	r1, r1, #3
 c001300:	e0813003 	add	r3, r1, r3
 c001304:	e0823003 	add	r3, r2, r3
 c001308:	e3a02001 	mov	r2, #1
 c00130c:	e5c32000 	strb	r2, [r3]
            actualizar_tablero(tablero, f, c, FICHA_BLANCA);
 c001310:	e55b2085 	ldrb	r2, [fp, #-133]	; 0xffffff7b
 c001314:	e55b3086 	ldrb	r3, [fp, #-134]	; 0xffffff7a
 c001318:	e59f005c 	ldr	r0, [pc, #92]	; c00137c <reversi8+0x750>
 c00131c:	e1a01002 	mov	r1, r2
 c001320:	e1a02003 	mov	r2, r3
 c001324:	e3a03001 	mov	r3, #1
 c001328:	ebfffc66 	bl	c0004c8 <actualizar_tablero>
            actualizar_candidatas(candidatas, f, c);
 c00132c:	e55b2085 	ldrb	r2, [fp, #-133]	; 0xffffff7b
 c001330:	e55b3086 	ldrb	r3, [fp, #-134]	; 0xffffff7a
 c001334:	e24b107c 	sub	r1, fp, #124	; 0x7c
 c001338:	e1a00001 	mov	r0, r1
 c00133c:	e1a01002 	mov	r1, r2
 c001340:	e1a02003 	mov	r2, r3
 c001344:	ebfffd62 	bl	c0008d4 <actualizar_candidatas>
                  // (ha introducido un valor de movimiento con algún 8)
                  // y luego la máquina tampoco puede
    char f, c;    // fila y columna elegidas por la máquina para su movimiento

    init_table(tablero, candidatas);
    while (fin == 0)
 c001348:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
 c00134c:	e3530000 	cmp	r3, #0
 c001350:	0affffaa 	beq	c001200 <reversi8+0x5d4>
            tablero[f][c] = FICHA_BLANCA;
            actualizar_tablero(tablero, f, c, FICHA_BLANCA);
            actualizar_candidatas(candidatas, f, c);
        }
    }
    contar(tablero, &blancas, &negras);
 c001354:	e24b2080 	sub	r2, fp, #128	; 0x80
 c001358:	e24b3084 	sub	r3, fp, #132	; 0x84
 c00135c:	e59f0018 	ldr	r0, [pc, #24]	; c00137c <reversi8+0x750>
 c001360:	e1a01002 	mov	r1, r2
 c001364:	e1a02003 	mov	r2, r3
 c001368:	ebfffd1a 	bl	c0007d8 <contar>
}
 c00136c:	e24bd028 	sub	sp, fp, #40	; 0x28
 c001370:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 c001374:	e12fff1e 	bx	lr
 c001378:	0c001390 	.word	0x0c001390
 c00137c:	0c0013e8 	.word	0x0c0013e8
 c001380:	0c00142a 	.word	0x0c00142a
 c001384:	0c001428 	.word	0x0c001428
 c001388:	0c001429 	.word	0x0c001429
