
PH_01_Sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cb0  0c000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000058  0c001cb0  0c001cb0  00009cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000048  0c001d08  0c001d08  00009d08  2**3
                  ALLOC
  3 .ARM.attributes 0000002e  00000000  00000000  00009d08  2**0
                  CONTENTS, READONLY
  4 .comment      0000002a  00000000  00000000  00009d36  2**0
                  CONTENTS, READONLY
  5 .debug_line   000002e7  00000000  00000000  00009d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000874  00000000  00000000  0000a047  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b2  00000000  00000000  0000a8bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000040  00000000  00000000  0000aa70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 000020fc  00000000  00000000  0000aab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000210  00000000  00000000  0000cbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 0000013a  00000000  00000000  0000cdbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000228  00000000  00000000  0000cef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000001a8  00000000  00000000  0000d120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c000000 <start>:
.global	start
start:
.arm /*indicates that we are using the ARM instruction set */
#------standard initial code
# --- Setup interrupt / exception vectors 
      B       Reset_Handler 
 c000000:	eaffffff 	b	c000004 <Reset_Handler>

0c000004 <Reset_Handler>:
# Reset Handler:
# the processor starts executing this code after system reset       
#######################################################################################################
Reset_Handler:  
#        
        MOV     sp, #0x4000      /*  set up stack pointer (r13) */ 
 c000004:	e3a0d901 	mov	sp, #16384	; 0x4000

.extern     reversi8
        ldr         r5, = reversi8
 c000008:	e59f51a0 	ldr	r5, [pc, #416]	; c0001b0 <retorno+0x8>
        mov         lr, pc 
 c00000c:	e1a0e00f 	mov	lr, pc
        bx          r5 
 c000010:	e12fff15 	bx	r5

0c000014 <stop>:


stop: 	
 		B     	stop    	/*  end of program */
 c000014:	eafffffe 	b	c000014 <stop>

0c000018 <patron_volteo_arm_c>:
#Parametros: r0=@tablero, r1=@longitud, r2=FA, r3=CA, pila: SF,SC,color almacenados en ese orden
#################################################################################################################
.section .text
.global patron_volteo_arm_c
patron_volteo_arm_c:
	mov ip, sp
 c000018:	e1a0c00d 	mov	ip, sp
	stmdb sp!, {r4-r10,fp, sp, lr, pc}
 c00001c:	e92deff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, sp, lr, pc}
	sub fp, ip, #4
 c000020:	e24cb004 	sub	fp, ip, #4
	//Guardamos los parametros iniciales que vamos a modificar en otros registros
	mov r10,r0 //@tablero
 c000024:	e1a0a000 	mov	sl, r0
	mov r9,r1 //@longitud
 c000028:	e1a09001 	mov	r9, r1
	//Inicializamos variables con las que vamos a trabajar
	//SF y SC se deben leer de la pila
	ldrsb r4,[fp,#4] //SF
 c00002c:	e1db40d4 	ldrsb	r4, [fp, #4]
	ldrsb r5,[fp,#8] //SC
 c000030:	e1db50d8 	ldrsb	r5, [fp, #8]

	add r8,r4,r2 //FA = FA + SF
 c000034:	e0848002 	add	r8, r4, r2
	add r7,r5,r3 //CA = CA + SC
 c000038:	e0857003 	add	r7, r5, r3
	//Preparamos llamada a ficha valida, r0=tablero, r1=FA , r2=CA ,r3=@posicion_valida
	mov r0,r10
 c00003c:	e1a0000a 	mov	r0, sl
	mov r1,r8
 c000040:	e1a01008 	mov	r1, r8
	mov r2,r7
 c000044:	e1a02007 	mov	r2, r7
	//posicion_valida=0
	sub r3,sp,#4 //@posicion_valida
 c000048:	e24d3004 	sub	r3, sp, #4
	mov r6,r3 //Nos guardamos la direccion para el retorno de la llamada
 c00004c:	e1a06003 	mov	r6, r3

	bl ficha_valida
 c000050:	eb0000ec 	bl	c000408 <ficha_valida>
	//Volvemos de la funcion ficha_valida, casilla se encuentra en r0 y @posicion_valida en r4
	ldrb r3,[r6]
 c000054:	e5d63000 	ldrb	r3, [r6]
	cmp r3,#1 //posicion==1
 c000058:	e3530001 	cmp	r3, #1
	bne no_patron
 c00005c:	1a000007 	bne	c000080 <no_patron>
	//cargamos color de la pila
	ldrb r6,[fp,#12] //r4=color
 c000060:	e5db600c 	ldrb	r6, [fp, #12]
	cmp r0,r6 //casilla==color
 c000064:	e1500006 	cmp	r0, r6
	ldrb r0,[r9] //cargamos el valor de longitud
 c000068:	e5d90000 	ldrb	r0, [r9]
	bne llamada_recursiva
 c00006c:	1a000005 	bne	c000088 <llamada_recursiva>
	cmp r0,#0 //longitud>0
 c000070:	e3500000 	cmp	r0, #0
	movgt r0,#1 //PATRON_ENCONTRADO
 c000074:	c3a00001 	movgt	r0, #1
	movle r0,#0 //NO_HAY_PATRON
 c000078:	d3a00000 	movle	r0, #0
	b return_patron_volteo_arm_c
 c00007c:	ea000009 	b	c0000a8 <return_patron_volteo_arm_c>

0c000080 <no_patron>:

no_patron:
	mov r0,#0
 c000080:	e3a00000 	mov	r0, #0
	b return_patron_volteo_arm_c
 c000084:	ea000007 	b	c0000a8 <return_patron_volteo_arm_c>

0c000088 <llamada_recursiva>:

llamada_recursiva:
	add r0,r0,#1	//*longitud=*longitud+1
 c000088:	e2800001 	add	r0, r0, #1
	strb r0,[r9]
 c00008c:	e5c90000 	strb	r0, [r9]

	mov r0,r10		//r0=@tablero
 c000090:	e1a0000a 	mov	r0, sl
	mov r1,r9		//r1=@longitud
 c000094:	e1a01009 	mov	r1, r9
	mov r2,r8		//r2=FA
 c000098:	e1a02008 	mov	r2, r8
	mov r3,r7		//r3=CA
 c00009c:	e1a03007 	mov	r3, r7
	stmdb sp!, {r4-r6}
 c0000a0:	e92d0070 	push	{r4, r5, r6}
	bl patron_volteo_arm_c
 c0000a4:	ebffffdb 	bl	c000018 <patron_volteo_arm_c>

0c0000a8 <return_patron_volteo_arm_c>:

return_patron_volteo_arm_c:
	ldmdb fp,{r4-r10,fp,sp,pc}
 c0000a8:	e91baff0 	ldmdb	fp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
	bx lr
 c0000ac:	e12fff1e 	bx	lr

0c0000b0 <patron_volteo_arm_arm>:
#Parametros: r0=@tablero, r1=@longitud, r2=FA, r3=CA, pila: SF,SC,color almacenados en ese orden
#################################################################################################################
.section .text
.global patron_volteo_arm_arm
patron_volteo_arm_arm:
	mov ip, sp
 c0000b0:	e1a0c00d 	mov	ip, sp
	stmdb sp!, {r4-r10,fp, sp, lr, pc}
 c0000b4:	e92deff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, sp, lr, pc}
	sub fp, ip, #4
 c0000b8:	e24cb004 	sub	fp, ip, #4
	//Guardamos los parametros iniciales que vamos a modificar en otros registros
	mov r10,r0 //@tablero
 c0000bc:	e1a0a000 	mov	sl, r0
	mov r9,r1 //@longitud
 c0000c0:	e1a09001 	mov	r9, r1
	//Inicializamos variables con las que vamos a trabajar
	//SF y SC se deben leer de la pila
	ldrsb r4,[fp,#4] //SF
 c0000c4:	e1db40d4 	ldrsb	r4, [fp, #4]
	ldrsb r5,[fp,#8] //SC
 c0000c8:	e1db50d8 	ldrsb	r5, [fp, #8]

	add r8,r4,r2 //FA = FA + SF
 c0000cc:	e0848002 	add	r8, r4, r2
	add r7,r5,r3 //CA = CA + SC
 c0000d0:	e0857003 	add	r7, r5, r3
	//Preparamos llamada a ficha valida, r0=tablero, r1=FA , r2=CA ,r3=@posicion_valida
	mov r0,r10
 c0000d4:	e1a0000a 	mov	r0, sl
	mov r1,r8
 c0000d8:	e1a01008 	mov	r1, r8
	mov r2,r7
 c0000dc:	e1a02007 	mov	r2, r7
	//posicion_valida=0
	sub r3,sp,#4 //@posicion_valida
 c0000e0:	e24d3004 	sub	r3, sp, #4
	mov r6,r3 //Nos guardamos la direccion para el retorno de la llamada
 c0000e4:	e1a06003 	mov	r6, r3

	bl ficha_valida_arm
 c0000e8:	eb000016 	bl	c000148 <ficha_valida_arm>
	//Volvemos de la funcion ficha_valida, casilla se encuentra en r0 y @posicion_valida en r4
	ldrb r3,[r6]
 c0000ec:	e5d63000 	ldrb	r3, [r6]
	cmp r3,#1 //posicion==1
 c0000f0:	e3530001 	cmp	r3, #1
	bne no_patron_arm_arm
 c0000f4:	1a000007 	bne	c000118 <no_patron_arm_arm>
	//cargamos color de la pila
	ldrb r6,[fp,#12] //r4=color
 c0000f8:	e5db600c 	ldrb	r6, [fp, #12]
	cmp r0,r6 //casilla==color
 c0000fc:	e1500006 	cmp	r0, r6
	ldrb r0,[r9] //cargamos el valor de longitud
 c000100:	e5d90000 	ldrb	r0, [r9]
	bne llamada_recursiva_arm_arm
 c000104:	1a000005 	bne	c000120 <llamada_recursiva_arm_arm>
	cmp r0,#0 //longitud>0
 c000108:	e3500000 	cmp	r0, #0
	movgt r0,#1 //PATRON_ENCONTRADO
 c00010c:	c3a00001 	movgt	r0, #1
	movle r0,#0 //NO_HAY_PATRON
 c000110:	d3a00000 	movle	r0, #0
	b return_patron_volteo_arm_arm
 c000114:	ea000009 	b	c000140 <return_patron_volteo_arm_arm>

0c000118 <no_patron_arm_arm>:

no_patron_arm_arm:
	mov r0,#0
 c000118:	e3a00000 	mov	r0, #0
	b return_patron_volteo_arm_arm
 c00011c:	ea000007 	b	c000140 <return_patron_volteo_arm_arm>

0c000120 <llamada_recursiva_arm_arm>:

llamada_recursiva_arm_arm:
	add r0,r0,#1	//*longitud=*longitud+1
 c000120:	e2800001 	add	r0, r0, #1
	strb r0,[r9]
 c000124:	e5c90000 	strb	r0, [r9]

	mov r0,r10		//r0=@tablero
 c000128:	e1a0000a 	mov	r0, sl
	mov r1,r9		//r1=@longitud
 c00012c:	e1a01009 	mov	r1, r9
	mov r2,r8		//r2=FA
 c000130:	e1a02008 	mov	r2, r8
	mov r3,r7		//r3=CA
 c000134:	e1a03007 	mov	r3, r7
	stmdb sp!, {r4-r6}
 c000138:	e92d0070 	push	{r4, r5, r6}
	bl patron_volteo_arm_arm
 c00013c:	ebffffdb 	bl	c0000b0 <patron_volteo_arm_arm>

0c000140 <return_patron_volteo_arm_arm>:

return_patron_volteo_arm_arm:
	ldmdb fp,{r4-r10,fp,sp,pc}
 c000140:	e91baff0 	ldmdb	fp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
	bx lr
 c000144:	e12fff1e 	bx	lr

0c000148 <ficha_valida_arm>:
#Parametros: r0=@tablero, r1=f, r2=c, r3=@posicion_valida
#################################################################################################################
.section .text
.global ficha_valida_arm
ficha_valida_arm:
	mov ip, sp
 c000148:	e1a0c00d 	mov	ip, sp
	stmdb sp!, {r4-r10,fp,ip, lr, pc}
 c00014c:	e92ddff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
	sub fp, ip, #4
 c000150:	e24cb004 	sub	fp, ip, #4
	mov r5, #8	//r5=DIM, suponiendo que el tamaño del tablero es 8x8
 c000154:	e3a05008 	mov	r5, #8
	mov r6, #0	//casilla vacia | valor minimo para indice de casilla
 c000158:	e3a06000 	mov	r6, #0
	mov r7, #1
 c00015c:	e3a07001 	mov	r7, #1
	mul r8, r1,r5	//calculamos numero de casillas para acceso a la ficha del tablero
 c000160:	e0080591 	mul	r8, r1, r5
	add r8, r8, r2	//r8=offset. @tablero + r8 = @ficha
 c000164:	e0888002 	add	r8, r8, r2
	cmp r5,r1
 c000168:	e1550001 	cmp	r5, r1
	ble no_valido	//DIM <=f
 c00016c:	da00000b 	ble	c0001a0 <no_valido>
	cmp r1,#0
 c000170:	e3510000 	cmp	r1, #0
	blt no_valido	//f<0
 c000174:	ba000009 	blt	c0001a0 <no_valido>
	cmp r5,r2
 c000178:	e1550002 	cmp	r5, r2
	ble no_valido	//DIM <=c
 c00017c:	da000007 	ble	c0001a0 <no_valido>
	cmp r2,r7
 c000180:	e1520007 	cmp	r2, r7
	blt no_valido	//c<0
 c000184:	ba000005 	blt	c0001a0 <no_valido>
	ldrb r9,[r0,r8]	//cargo en r9 tablero[f][c]
 c000188:	e7d09008 	ldrb	r9, [r0, r8]
	cmp r9,r6 //tablero[f][c] != casilla_vacia
 c00018c:	e1590006 	cmp	r9, r6
	beq no_valido
 c000190:	0a000002 	beq	c0001a0 <no_valido>
	strb r7,[r3]
 c000194:	e5c37000 	strb	r7, [r3]
 	mov r0,r9 //ficha =tablero[f][c]
 c000198:	e1a00009 	mov	r0, r9
 	b retorno
 c00019c:	ea000001 	b	c0001a8 <retorno>

0c0001a0 <no_valido>:

no_valido:
	strb r6,[r3]
 c0001a0:	e5c36000 	strb	r6, [r3]
	mov r0,r6
 c0001a4:	e1a00006 	mov	r0, r6

0c0001a8 <retorno>:

retorno:
	ldmdb fp,{r4-r10,fp,sp,pc}
 c0001a8:	e91baff0 	ldmdb	fp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
	bx lr
 c0001ac:	e12fff1e 	bx	lr
 c0001b0:	0c001520 	.word	0x0c001520

0c0001b4 <init_table>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 0 indica CASILLA_VACIA, 1 indica FICHA_BLANCA y 2 indica FICHA_NEGRA
// pone el tablero a cero y luego coloca las fichas centrales.
void init_table(char tablero[][DIM], char candidatas[][DIM])
{
 c0001b4:	e1a0c00d 	mov	ip, sp
 c0001b8:	e92dd800 	push	{fp, ip, lr, pc}
 c0001bc:	e24cb004 	sub	fp, ip, #4
 c0001c0:	e24dd010 	sub	sp, sp, #16
 c0001c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c0001c8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int i, j;

    for (i = 0; i < DIM; i++)
 c0001cc:	e3a03000 	mov	r3, #0
 c0001d0:	e50b3010 	str	r3, [fp, #-16]
 c0001d4:	ea000013 	b	c000228 <init_table+0x74>
    {
        for (j = 0; j < DIM; j++)
 c0001d8:	e3a03000 	mov	r3, #0
 c0001dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c0001e0:	ea00000a 	b	c000210 <init_table+0x5c>
            tablero[i][j] = CASILLA_VACIA;
 c0001e4:	e51b3010 	ldr	r3, [fp, #-16]
 c0001e8:	e1a03183 	lsl	r3, r3, #3
 c0001ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c0001f0:	e0822003 	add	r2, r2, r3
 c0001f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0001f8:	e0823003 	add	r3, r2, r3
 c0001fc:	e3a02000 	mov	r2, #0
 c000200:	e5c32000 	strb	r2, [r3]
{
    int i, j;

    for (i = 0; i < DIM; i++)
    {
        for (j = 0; j < DIM; j++)
 c000204:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000208:	e2833001 	add	r3, r3, #1
 c00020c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000210:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000214:	e3530007 	cmp	r3, #7
 c000218:	dafffff1 	ble	c0001e4 <init_table+0x30>
// pone el tablero a cero y luego coloca las fichas centrales.
void init_table(char tablero[][DIM], char candidatas[][DIM])
{
    int i, j;

    for (i = 0; i < DIM; i++)
 c00021c:	e51b3010 	ldr	r3, [fp, #-16]
 c000220:	e2833001 	add	r3, r3, #1
 c000224:	e50b3010 	str	r3, [fp, #-16]
 c000228:	e51b3010 	ldr	r3, [fp, #-16]
 c00022c:	e3530007 	cmp	r3, #7
 c000230:	daffffe8 	ble	c0001d8 <init_table+0x24>
	    }
	}
    }
#endif
    // arriba hay versión alternativa
    tablero[3][3] = FICHA_BLANCA;
 c000234:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000238:	e2833018 	add	r3, r3, #24
 c00023c:	e3a02001 	mov	r2, #1
 c000240:	e5c32003 	strb	r2, [r3, #3]
    tablero[4][4] = FICHA_BLANCA;
 c000244:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000248:	e2833020 	add	r3, r3, #32
 c00024c:	e3a02001 	mov	r2, #1
 c000250:	e5c32004 	strb	r2, [r3, #4]
    tablero[3][4] = FICHA_NEGRA;
 c000254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000258:	e2833018 	add	r3, r3, #24
 c00025c:	e3a02002 	mov	r2, #2
 c000260:	e5c32004 	strb	r2, [r3, #4]
    tablero[4][3] = FICHA_NEGRA;
 c000264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000268:	e2833020 	add	r3, r3, #32
 c00026c:	e3a02002 	mov	r2, #2
 c000270:	e5c32003 	strb	r2, [r3, #3]

    candidatas[3][3] = CASILLA_OCUPADA;
 c000274:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000278:	e2833018 	add	r3, r3, #24
 c00027c:	e59f213c 	ldr	r2, [pc, #316]	; c0003c0 <init_table+0x20c>
 c000280:	e5d22000 	ldrb	r2, [r2]
 c000284:	e5c32003 	strb	r2, [r3, #3]
    candidatas[4][4] = CASILLA_OCUPADA;
 c000288:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c00028c:	e2833020 	add	r3, r3, #32
 c000290:	e59f2128 	ldr	r2, [pc, #296]	; c0003c0 <init_table+0x20c>
 c000294:	e5d22000 	ldrb	r2, [r2]
 c000298:	e5c32004 	strb	r2, [r3, #4]
    candidatas[3][4] = CASILLA_OCUPADA;
 c00029c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0002a0:	e2833018 	add	r3, r3, #24
 c0002a4:	e59f2114 	ldr	r2, [pc, #276]	; c0003c0 <init_table+0x20c>
 c0002a8:	e5d22000 	ldrb	r2, [r2]
 c0002ac:	e5c32004 	strb	r2, [r3, #4]
    candidatas[4][3] = CASILLA_OCUPADA;
 c0002b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0002b4:	e2833020 	add	r3, r3, #32
 c0002b8:	e59f2100 	ldr	r2, [pc, #256]	; c0003c0 <init_table+0x20c>
 c0002bc:	e5d22000 	ldrb	r2, [r2]
 c0002c0:	e5c32003 	strb	r2, [r3, #3]

    // casillas a explorar:
    candidatas[2][2] = SI;
 c0002c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0002c8:	e2833010 	add	r3, r3, #16
 c0002cc:	e59f20f0 	ldr	r2, [pc, #240]	; c0003c4 <init_table+0x210>
 c0002d0:	e5d22000 	ldrb	r2, [r2]
 c0002d4:	e5c32002 	strb	r2, [r3, #2]
    candidatas[2][3] = SI;
 c0002d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0002dc:	e2833010 	add	r3, r3, #16
 c0002e0:	e59f20dc 	ldr	r2, [pc, #220]	; c0003c4 <init_table+0x210>
 c0002e4:	e5d22000 	ldrb	r2, [r2]
 c0002e8:	e5c32003 	strb	r2, [r3, #3]
    candidatas[2][4] = SI;
 c0002ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0002f0:	e2833010 	add	r3, r3, #16
 c0002f4:	e59f20c8 	ldr	r2, [pc, #200]	; c0003c4 <init_table+0x210>
 c0002f8:	e5d22000 	ldrb	r2, [r2]
 c0002fc:	e5c32004 	strb	r2, [r3, #4]
    candidatas[2][5] = SI;
 c000300:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000304:	e2833010 	add	r3, r3, #16
 c000308:	e59f20b4 	ldr	r2, [pc, #180]	; c0003c4 <init_table+0x210>
 c00030c:	e5d22000 	ldrb	r2, [r2]
 c000310:	e5c32005 	strb	r2, [r3, #5]
    candidatas[3][2] = SI;
 c000314:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000318:	e2833018 	add	r3, r3, #24
 c00031c:	e59f20a0 	ldr	r2, [pc, #160]	; c0003c4 <init_table+0x210>
 c000320:	e5d22000 	ldrb	r2, [r2]
 c000324:	e5c32002 	strb	r2, [r3, #2]
    candidatas[3][5] = SI;
 c000328:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c00032c:	e2833018 	add	r3, r3, #24
 c000330:	e59f208c 	ldr	r2, [pc, #140]	; c0003c4 <init_table+0x210>
 c000334:	e5d22000 	ldrb	r2, [r2]
 c000338:	e5c32005 	strb	r2, [r3, #5]
    candidatas[4][2] = SI;
 c00033c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000340:	e2833020 	add	r3, r3, #32
 c000344:	e59f2078 	ldr	r2, [pc, #120]	; c0003c4 <init_table+0x210>
 c000348:	e5d22000 	ldrb	r2, [r2]
 c00034c:	e5c32002 	strb	r2, [r3, #2]
    candidatas[4][5] = SI;
 c000350:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000354:	e2833020 	add	r3, r3, #32
 c000358:	e59f2064 	ldr	r2, [pc, #100]	; c0003c4 <init_table+0x210>
 c00035c:	e5d22000 	ldrb	r2, [r2]
 c000360:	e5c32005 	strb	r2, [r3, #5]
    candidatas[5][2] = SI;
 c000364:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000368:	e2833028 	add	r3, r3, #40	; 0x28
 c00036c:	e59f2050 	ldr	r2, [pc, #80]	; c0003c4 <init_table+0x210>
 c000370:	e5d22000 	ldrb	r2, [r2]
 c000374:	e5c32002 	strb	r2, [r3, #2]
    candidatas[5][3] = SI;
 c000378:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c00037c:	e2833028 	add	r3, r3, #40	; 0x28
 c000380:	e59f203c 	ldr	r2, [pc, #60]	; c0003c4 <init_table+0x210>
 c000384:	e5d22000 	ldrb	r2, [r2]
 c000388:	e5c32003 	strb	r2, [r3, #3]
    candidatas[5][4] = SI;
 c00038c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000390:	e2833028 	add	r3, r3, #40	; 0x28
 c000394:	e59f2028 	ldr	r2, [pc, #40]	; c0003c4 <init_table+0x210>
 c000398:	e5d22000 	ldrb	r2, [r2]
 c00039c:	e5c32004 	strb	r2, [r3, #4]
    candidatas[5][5] = SI;
 c0003a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0003a4:	e2833028 	add	r3, r3, #40	; 0x28
 c0003a8:	e59f2014 	ldr	r2, [pc, #20]	; c0003c4 <init_table+0x210>
 c0003ac:	e5d22000 	ldrb	r2, [r2]
 c0003b0:	e5c32005 	strb	r2, [r3, #5]
}
 c0003b4:	e24bd00c 	sub	sp, fp, #12
 c0003b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0003bc:	e12fff1e 	bx	lr
 c0003c0:	0c001cb2 	.word	0x0c001cb2
 c0003c4:	0c001cb1 	.word	0x0c001cb1

0c0003c8 <esperar_mov>:
// Espera a que ready valga 1.
// CUIDADO: si el compilador coloca esta variable en un registro, no funcionará.
// Hay que definirla como "volatile" para forzar a que antes de cada uso la cargue de memoria

void esperar_mov(char *ready)
{
 c0003c8:	e1a0c00d 	mov	ip, sp
 c0003cc:	e92dd800 	push	{fp, ip, lr, pc}
 c0003d0:	e24cb004 	sub	fp, ip, #4
 c0003d4:	e24dd008 	sub	sp, sp, #8
 c0003d8:	e50b0010 	str	r0, [fp, #-16]
    while (*ready == 0) {};  // bucle de espera de respuestas hasta que el se modifique el valor de ready (hay que hacerlo manualmente)
 c0003dc:	e1a00000 	nop			; (mov r0, r0)
 c0003e0:	e51b3010 	ldr	r3, [fp, #-16]
 c0003e4:	e5d33000 	ldrb	r3, [r3]
 c0003e8:	e3530000 	cmp	r3, #0
 c0003ec:	0afffffb 	beq	c0003e0 <esperar_mov+0x18>

    *ready = 0;  //una vez que pasemos el bucle volvemos a fijar ready a 0;
 c0003f0:	e51b3010 	ldr	r3, [fp, #-16]
 c0003f4:	e3a02000 	mov	r2, #0
 c0003f8:	e5c32000 	strb	r2, [r3]
}
 c0003fc:	e24bd00c 	sub	sp, fp, #12
 c000400:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000404:	e12fff1e 	bx	lr

0c000408 <ficha_valida>:
// Devuelve el contenido de la posición indicadas por la fila y columna actual.
// Además informa si la posición es válida y contiene alguna ficha.
// Esto lo hace por referencia (en *posicion_valida)
// Si devuelve un 0 no es válida o está vacia.
char ficha_valida(char tablero[][DIM], char f, char c, int *posicion_valida)
{
 c000408:	e1a0c00d 	mov	ip, sp
 c00040c:	e92dd800 	push	{fp, ip, lr, pc}
 c000410:	e24cb004 	sub	fp, ip, #4
 c000414:	e24dd018 	sub	sp, sp, #24
 c000418:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c00041c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c000420:	e1a03001 	mov	r3, r1
 c000424:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
 c000428:	e1a03002 	mov	r3, r2
 c00042c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6

    // ficha = tablero[f][c];
    // no puede accederse a tablero[f][c]
    // ya que algún índice puede ser negativo

    if ((f < DIM) && (f >= 0) && (c < DIM) && (c >= 0) && (tablero[f][c] != CASILLA_VACIA))
 c000430:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c000434:	e3530007 	cmp	r3, #7
 c000438:	8a000015 	bhi	c000494 <ficha_valida+0x8c>
 c00043c:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c000440:	e3530007 	cmp	r3, #7
 c000444:	8a000012 	bhi	c000494 <ficha_valida+0x8c>
 c000448:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c00044c:	e1a03183 	lsl	r3, r3, #3
 c000450:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c000454:	e0822003 	add	r2, r2, r3
 c000458:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c00045c:	e7d23003 	ldrb	r3, [r2, r3]
 c000460:	e3530000 	cmp	r3, #0
 c000464:	0a00000a 	beq	c000494 <ficha_valida+0x8c>
    {
        *posicion_valida = 1;
 c000468:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c00046c:	e3a02001 	mov	r2, #1
 c000470:	e5832000 	str	r2, [r3]
        ficha = tablero[f][c];
 c000474:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c000478:	e1a03183 	lsl	r3, r3, #3
 c00047c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c000480:	e0822003 	add	r2, r2, r3
 c000484:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c000488:	e7d23003 	ldrb	r3, [r2, r3]
 c00048c:	e54b300d 	strb	r3, [fp, #-13]
 c000490:	ea000004 	b	c0004a8 <ficha_valida+0xa0>
    }
    else
    {
        *posicion_valida = 0;
 c000494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000498:	e3a02000 	mov	r2, #0
 c00049c:	e5832000 	str	r2, [r3]
        ficha = CASILLA_VACIA;
 c0004a0:	e3a03000 	mov	r3, #0
 c0004a4:	e54b300d 	strb	r3, [fp, #-13]
    }
    return ficha;
 c0004a8:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c0004ac:	e1a00003 	mov	r0, r3
 c0004b0:	e24bd00c 	sub	sp, fp, #12
 c0004b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0004b8:	e12fff1e 	bx	lr

0c0004bc <patron_volteo>:
// color indica el color de la pieza que se acaba de colocar
// la función devuelve PATRON_ENCONTRADO (1) si encuentra patrón y NO_HAY_PATRON (0) en caso contrario
// FA y CA son la fila y columna a analizar
// longitud es un parámetro por referencia. Sirve para saber la longitud del patrón que se está analizando. Se usa para saber cuantas fichas habría que voltear
int patron_volteo(char tablero[][DIM], int *longitud, char FA, char CA, char SF, char SC, char color)
{
 c0004bc:	e1a0c00d 	mov	ip, sp
 c0004c0:	e92dd800 	push	{fp, ip, lr, pc}
 c0004c4:	e24cb004 	sub	fp, ip, #4
 c0004c8:	e24dd030 	sub	sp, sp, #48	; 0x30
 c0004cc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c0004d0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c0004d4:	e54b2025 	strb	r2, [fp, #-37]	; 0xffffffdb
 c0004d8:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
    int posicion_valida; // indica si la posición es valida y contiene una ficha de algún jugador
    int patron; //indica si se ha encontrado un patrón o no
    char casilla;   // casilla es la casilla que se lee del tablero
    FA = FA + SF;
 c0004dc:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
 c0004e0:	e5db3004 	ldrb	r3, [fp, #4]
 c0004e4:	e0823003 	add	r3, r2, r3
 c0004e8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    CA = CA + SC;
 c0004ec:	e55b2026 	ldrb	r2, [fp, #-38]	; 0xffffffda
 c0004f0:	e5db3008 	ldrb	r3, [fp, #8]
 c0004f4:	e0823003 	add	r3, r2, r3
 c0004f8:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
    casilla = ficha_valida(tablero, FA, CA, &posicion_valida);
 c0004fc:	e55b1025 	ldrb	r1, [fp, #-37]	; 0xffffffdb
 c000500:	e55b2026 	ldrb	r2, [fp, #-38]	; 0xffffffda
 c000504:	e24b3018 	sub	r3, fp, #24
 c000508:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c00050c:	ebffffbd 	bl	c000408 <ficha_valida>
 c000510:	e1a03000 	mov	r3, r0
 c000514:	e54b300d 	strb	r3, [fp, #-13]
    // mientras la casilla está en el tablero, no está vacía,
    // y es del color rival seguimos buscando el patron de volteo
    if ((posicion_valida == 1) && (casilla != color))
 c000518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c00051c:	e3530001 	cmp	r3, #1
 c000520:	1a000016 	bne	c000580 <patron_volteo+0xc4>
 c000524:	e55b200d 	ldrb	r2, [fp, #-13]
 c000528:	e5db300c 	ldrb	r3, [fp, #12]
 c00052c:	e1520003 	cmp	r2, r3
 c000530:	0a000012 	beq	c000580 <patron_volteo+0xc4>
    {
        *longitud = *longitud + 1;
 c000534:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c000538:	e5933000 	ldr	r3, [r3]
 c00053c:	e2832001 	add	r2, r3, #1
 c000540:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c000544:	e5832000 	str	r2, [r3]
        patron = patron_volteo(tablero, longitud, FA, CA, SF, SC, color);
 c000548:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
 c00054c:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
 c000550:	e5db1004 	ldrb	r1, [fp, #4]
 c000554:	e58d1000 	str	r1, [sp]
 c000558:	e5db1008 	ldrb	r1, [fp, #8]
 c00055c:	e58d1004 	str	r1, [sp, #4]
 c000560:	e5db100c 	ldrb	r1, [fp, #12]
 c000564:	e58d1008 	str	r1, [sp, #8]
 c000568:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c00056c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
 c000570:	ebffffd1 	bl	c0004bc <patron_volteo>
 c000574:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        //printf("longitud: %d \n", *longitud);
        //printf("fila: %d; columna: %d \n", FA, CA);
        return patron;
 c000578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c00057c:	ea00000f 	b	c0005c0 <patron_volteo+0x104>
    }
    // si la ultima posición era válida y la ficha es del jugador actual,
    // entonces hemos encontrado el patrón
    else if ((posicion_valida == 1) && (casilla == color))
 c000580:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000584:	e3530001 	cmp	r3, #1
 c000588:	1a00000b 	bne	c0005bc <patron_volteo+0x100>
 c00058c:	e55b200d 	ldrb	r2, [fp, #-13]
 c000590:	e5db300c 	ldrb	r3, [fp, #12]
 c000594:	e1520003 	cmp	r2, r3
 c000598:	1a000007 	bne	c0005bc <patron_volteo+0x100>
    {
        if (*longitud > 0) // longitud indica cuantas fichas hay que voltear
 c00059c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c0005a0:	e5933000 	ldr	r3, [r3]
 c0005a4:	e3530000 	cmp	r3, #0
 c0005a8:	da000001 	ble	c0005b4 <patron_volteo+0xf8>
            {
            return PATRON_ENCONTRADO; // si hay que voltear una ficha o más hemos encontrado el patrón
 c0005ac:	e3a03001 	mov	r3, #1
 c0005b0:	ea000002 	b	c0005c0 <patron_volteo+0x104>
            //printf("PATRON_ENCONTRADO \n");
            }
        else {
            return NO_HAY_PATRON; // si no hay que voltear no hay patrón
 c0005b4:	e3a03000 	mov	r3, #0
 c0005b8:	ea000000 	b	c0005c0 <patron_volteo+0x104>
            }
    }
    // en caso contrario es que no hay patrón
    else
    {
        return NO_HAY_PATRON;
 c0005bc:	e3a03000 	mov	r3, #0
        //printf("NO_HAY_PATRON \n");
    }
}
 c0005c0:	e1a00003 	mov	r0, r3
 c0005c4:	e24bd00c 	sub	sp, fp, #12
 c0005c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0005cc:	e12fff1e 	bx	lr

0c0005d0 <patron_volteo_test>:

//Funcion patron_volteo_test para comparar resultados entre las distintas implementaciones de patron_volteo
int patron_volteo_test(char tablero[][DIM], int *longitud, char FA, char CA, char SF, char SC, char color)
{
 c0005d0:	e1a0c00d 	mov	ip, sp
 c0005d4:	e92dd800 	push	{fp, ip, lr, pc}
 c0005d8:	e24cb004 	sub	fp, ip, #4
 c0005dc:	e24dd038 	sub	sp, sp, #56	; 0x38
 c0005e0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 c0005e4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
 c0005e8:	e54b202d 	strb	r2, [fp, #-45]	; 0xffffffd3
 c0005ec:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
	unsigned int timer2_c=0;
 c0005f0:	e3a03000 	mov	r3, #0
 c0005f4:	e50b3010 	str	r3, [fp, #-16]
	unsigned int timer2_arm_c=0;
 c0005f8:	e3a03000 	mov	r3, #0
 c0005fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	//timer2_empezar();
	int resultado_c=patron_volteo(tablero,longitud,FA,CA,SF,SC,color);
 c000600:	e55b202d 	ldrb	r2, [fp, #-45]	; 0xffffffd3
 c000604:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
 c000608:	e5db1004 	ldrb	r1, [fp, #4]
 c00060c:	e58d1000 	str	r1, [sp]
 c000610:	e5db1008 	ldrb	r1, [fp, #8]
 c000614:	e58d1004 	str	r1, [sp, #4]
 c000618:	e5db100c 	ldrb	r1, [fp, #12]
 c00061c:	e58d1008 	str	r1, [sp, #8]
 c000620:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
 c000624:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
 c000628:	ebffffa3 	bl	c0004bc <patron_volteo>
 c00062c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	//timer2_c=timer2_parar();

	//timer2_empezar();
	int resultado_arm_c=patron_volteo_arm_c(tablero,longitud,FA,CA,SF,SC,color);
 c000630:	e55b202d 	ldrb	r2, [fp, #-45]	; 0xffffffd3
 c000634:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
 c000638:	e5db1004 	ldrb	r1, [fp, #4]
 c00063c:	e58d1000 	str	r1, [sp]
 c000640:	e5db1008 	ldrb	r1, [fp, #8]
 c000644:	e58d1004 	str	r1, [sp, #4]
 c000648:	e5db100c 	ldrb	r1, [fp, #12]
 c00064c:	e58d1008 	str	r1, [sp, #8]
 c000650:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
 c000654:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
 c000658:	ebfffe6e 	bl	c000018 <patron_volteo_arm_c>
 c00065c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
	//timer2_arm_c=timer2_parar();

    //timer2_empezar();
    int resultado_arm_arm=patron_volteo_arm_arm(tablero,longitud,FA,CA,SF,SC,color);
 c000660:	e55b202d 	ldrb	r2, [fp, #-45]	; 0xffffffd3
 c000664:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
 c000668:	e5db1004 	ldrb	r1, [fp, #4]
 c00066c:	e58d1000 	str	r1, [sp]
 c000670:	e5db1008 	ldrb	r1, [fp, #8]
 c000674:	e58d1004 	str	r1, [sp, #4]
 c000678:	e5db100c 	ldrb	r1, [fp, #12]
 c00067c:	e58d1008 	str	r1, [sp, #8]
 c000680:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
 c000684:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
 c000688:	ebfffe88 	bl	c0000b0 <patron_volteo_arm_arm>
 c00068c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    //int timer2_arm_arm=timer2_parar();

    while(resultado_c != resultado_arm_c){}
 c000690:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c000694:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000698:	e1520003 	cmp	r2, r3
 c00069c:	1afffffb 	bne	c000690 <patron_volteo_test+0xc0>
    while(resultado_c != resultado_arm_arm){}
 c0006a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c0006a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c0006a8:	e1520003 	cmp	r2, r3
 c0006ac:	1afffffb 	bne	c0006a0 <patron_volteo_test+0xd0>
}
 c0006b0:	e1a00003 	mov	r0, r3
 c0006b4:	e24bd00c 	sub	sp, fp, #12
 c0006b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0006bc:	e12fff1e 	bx	lr

0c0006c0 <voltear>:
// voltea n fichas en la dirección que toque
// SF y SC son las cantidades a sumar para movernos en la dirección que toque
// color indica el color de la pieza que se acaba de colocar
// FA y CA son la fila y columna a analizar
void voltear(char tablero[][DIM], char FA, char CA, char SF, char SC, int n, char color)
{
 c0006c0:	e1a0c00d 	mov	ip, sp
 c0006c4:	e92dd800 	push	{fp, ip, lr, pc}
 c0006c8:	e24cb004 	sub	fp, ip, #4
 c0006cc:	e24dd010 	sub	sp, sp, #16
 c0006d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c0006d4:	e54b1019 	strb	r1, [fp, #-25]	; 0xffffffe7
 c0006d8:	e54b201a 	strb	r2, [fp, #-26]	; 0xffffffe6
 c0006dc:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
    int i;

    for (i = 0; i < n; i++)
 c0006e0:	e3a03000 	mov	r3, #0
 c0006e4:	e50b3010 	str	r3, [fp, #-16]
 c0006e8:	ea000011 	b	c000734 <voltear+0x74>
    {
        FA = FA + SF;
 c0006ec:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c0006f0:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c0006f4:	e0823003 	add	r3, r2, r3
 c0006f8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        CA = CA + SC;
 c0006fc:	e55b201a 	ldrb	r2, [fp, #-26]	; 0xffffffe6
 c000700:	e5db3004 	ldrb	r3, [fp, #4]
 c000704:	e0823003 	add	r3, r2, r3
 c000708:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
        tablero[FA][CA] = color;
 c00070c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c000710:	e1a03183 	lsl	r3, r3, #3
 c000714:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c000718:	e0822003 	add	r2, r2, r3
 c00071c:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c000720:	e5db100c 	ldrb	r1, [fp, #12]
 c000724:	e7c21003 	strb	r1, [r2, r3]
// FA y CA son la fila y columna a analizar
void voltear(char tablero[][DIM], char FA, char CA, char SF, char SC, int n, char color)
{
    int i;

    for (i = 0; i < n; i++)
 c000728:	e51b3010 	ldr	r3, [fp, #-16]
 c00072c:	e2833001 	add	r3, r3, #1
 c000730:	e50b3010 	str	r3, [fp, #-16]
 c000734:	e51b2010 	ldr	r2, [fp, #-16]
 c000738:	e59b3008 	ldr	r3, [fp, #8]
 c00073c:	e1520003 	cmp	r2, r3
 c000740:	baffffe9 	blt	c0006ec <voltear+0x2c>
    {
        FA = FA + SF;
        CA = CA + SC;
        tablero[FA][CA] = color;
    }
}
 c000744:	e24bd00c 	sub	sp, fp, #12
 c000748:	e89d6800 	ldm	sp, {fp, sp, lr}
 c00074c:	e12fff1e 	bx	lr

0c000750 <actualizar_tablero>:
// no comprueba que el movimiento realizado sea válido
// f y c son la fila y columna a analizar
// char vSF[DIM] = {-1,-1, 0, 1, 1, 1, 0,-1};
// char vSC[DIM] = { 0, 1, 1, 1, 0,-1,-1,-1};
int actualizar_tablero(char tablero[][DIM], char f, char c, char color, int modo_patron_volteo)
{
 c000750:	e1a0c00d 	mov	ip, sp
 c000754:	e92dd800 	push	{fp, ip, lr, pc}
 c000758:	e24cb004 	sub	fp, ip, #4
 c00075c:	e24dd028 	sub	sp, sp, #40	; 0x28
 c000760:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c000764:	e54b1021 	strb	r1, [fp, #-33]	; 0xffffffdf
 c000768:	e54b2022 	strb	r2, [fp, #-34]	; 0xffffffde
 c00076c:	e54b3023 	strb	r3, [fp, #-35]	; 0xffffffdd
    char SF, SC; // cantidades a sumar para movernos en la dirección que toque
    int i, flip, patron;

    for (i = 0; i < DIM; i++) // 0 es Norte, 1 NE, 2 E ...
 c000770:	e3a03000 	mov	r3, #0
 c000774:	e50b3010 	str	r3, [fp, #-16]
 c000778:	ea000049 	b	c0008a4 <actualizar_tablero+0x154>
    {
        SF = vSF[i];
 c00077c:	e59f2140 	ldr	r2, [pc, #320]	; c0008c4 <actualizar_tablero+0x174>
 c000780:	e51b3010 	ldr	r3, [fp, #-16]
 c000784:	e0823003 	add	r3, r2, r3
 c000788:	e5d33000 	ldrb	r3, [r3]
 c00078c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        SC = vSC[i];
 c000790:	e59f2130 	ldr	r2, [pc, #304]	; c0008c8 <actualizar_tablero+0x178>
 c000794:	e51b3010 	ldr	r3, [fp, #-16]
 c000798:	e0823003 	add	r3, r2, r3
 c00079c:	e5d33000 	ldrb	r3, [r3]
 c0007a0:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
        // flip: numero de fichas a voltear
        flip = 0;
 c0007a4:	e3a03000 	mov	r3, #0
 c0007a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        switch (modo_patron_volteo) {
 c0007ac:	e59b3004 	ldr	r3, [fp, #4]
 c0007b0:	e3530001 	cmp	r3, #1
 c0007b4:	0a000002 	beq	c0007c4 <actualizar_tablero+0x74>
 c0007b8:	e3530002 	cmp	r3, #2
 c0007bc:	0a00000d 	beq	c0007f8 <actualizar_tablero+0xa8>
 c0007c0:	ea000019 	b	c00082c <actualizar_tablero+0xdc>
        case MODO_ARM_C:
        	patron = patron_volteo_arm_c(tablero, &flip, f, c, SF, SC, color);
 c0007c4:	e24b101c 	sub	r1, fp, #28
 c0007c8:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c0007cc:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
 c0007d0:	e55b0015 	ldrb	r0, [fp, #-21]	; 0xffffffeb
 c0007d4:	e58d0000 	str	r0, [sp]
 c0007d8:	e55b0016 	ldrb	r0, [fp, #-22]	; 0xffffffea
 c0007dc:	e58d0004 	str	r0, [sp, #4]
 c0007e0:	e55b0023 	ldrb	r0, [fp, #-35]	; 0xffffffdd
 c0007e4:	e58d0008 	str	r0, [sp, #8]
 c0007e8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c0007ec:	ebfffe09 	bl	c000018 <patron_volteo_arm_c>
 c0007f0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        	break;
 c0007f4:	ea000019 	b	c000860 <actualizar_tablero+0x110>
        case MODO_ARM_ARM:
            patron = patron_volteo_arm_arm(tablero, &flip, f, c, SF, SC, color);
 c0007f8:	e24b101c 	sub	r1, fp, #28
 c0007fc:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c000800:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
 c000804:	e55b0015 	ldrb	r0, [fp, #-21]	; 0xffffffeb
 c000808:	e58d0000 	str	r0, [sp]
 c00080c:	e55b0016 	ldrb	r0, [fp, #-22]	; 0xffffffea
 c000810:	e58d0004 	str	r0, [sp, #4]
 c000814:	e55b0023 	ldrb	r0, [fp, #-35]	; 0xffffffdd
 c000818:	e58d0008 	str	r0, [sp, #8]
 c00081c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c000820:	ebfffe22 	bl	c0000b0 <patron_volteo_arm_arm>
 c000824:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            break;
 c000828:	ea00000c 	b	c000860 <actualizar_tablero+0x110>
        default:
        	patron = patron_volteo(tablero, &flip, f, c, SF, SC, color);
 c00082c:	e24b101c 	sub	r1, fp, #28
 c000830:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c000834:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
 c000838:	e55b0015 	ldrb	r0, [fp, #-21]	; 0xffffffeb
 c00083c:	e58d0000 	str	r0, [sp]
 c000840:	e55b0016 	ldrb	r0, [fp, #-22]	; 0xffffffea
 c000844:	e58d0004 	str	r0, [sp, #4]
 c000848:	e55b0023 	ldrb	r0, [fp, #-35]	; 0xffffffdd
 c00084c:	e58d0008 	str	r0, [sp, #8]
 c000850:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c000854:	ebffff18 	bl	c0004bc <patron_volteo>
 c000858:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        	break;
 c00085c:	e1a00000 	nop			; (mov r0, r0)
        }
        //printf("Flip: %d \n", flip);
        if (patron == PATRON_ENCONTRADO )
 c000860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000864:	e3530001 	cmp	r3, #1
 c000868:	1a00000a 	bne	c000898 <actualizar_tablero+0x148>
        {
            voltear(tablero, f, c, SF, SC, flip, color);
 c00086c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c000870:	e55b1021 	ldrb	r1, [fp, #-33]	; 0xffffffdf
 c000874:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
 c000878:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c00087c:	e55bc016 	ldrb	ip, [fp, #-22]	; 0xffffffea
 c000880:	e58dc000 	str	ip, [sp]
 c000884:	e58d0004 	str	r0, [sp, #4]
 c000888:	e55b0023 	ldrb	r0, [fp, #-35]	; 0xffffffdd
 c00088c:	e58d0008 	str	r0, [sp, #8]
 c000890:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c000894:	ebffff89 	bl	c0006c0 <voltear>
int actualizar_tablero(char tablero[][DIM], char f, char c, char color, int modo_patron_volteo)
{
    char SF, SC; // cantidades a sumar para movernos en la dirección que toque
    int i, flip, patron;

    for (i = 0; i < DIM; i++) // 0 es Norte, 1 NE, 2 E ...
 c000898:	e51b3010 	ldr	r3, [fp, #-16]
 c00089c:	e2833001 	add	r3, r3, #1
 c0008a0:	e50b3010 	str	r3, [fp, #-16]
 c0008a4:	e51b3010 	ldr	r3, [fp, #-16]
 c0008a8:	e3530007 	cmp	r3, #7
 c0008ac:	daffffb2 	ble	c00077c <actualizar_tablero+0x2c>
        if (patron == PATRON_ENCONTRADO )
        {
            voltear(tablero, f, c, SF, SC, flip, color);
        }
    }
    return 0;
 c0008b0:	e3a03000 	mov	r3, #0
}
 c0008b4:	e1a00003 	mov	r0, r3
 c0008b8:	e24bd00c 	sub	sp, fp, #12
 c0008bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0008c0:	e12fff1e 	bx	lr
 c0008c4:	0c001cf8 	.word	0x0c001cf8
 c0008c8:	0c001d00 	.word	0x0c001d00

0c0008cc <elegir_mov>:
// Candidatas
// NO    0
// SI    1
// CASILLA_OCUPADA 2
int elegir_mov(char candidatas[][DIM], char tablero[][DIM], char *f, char *c, int modo_patron_volteo)
{
 c0008cc:	e1a0c00d 	mov	ip, sp
 c0008d0:	e92dd800 	push	{fp, ip, lr, pc}
 c0008d4:	e24cb004 	sub	fp, ip, #4
 c0008d8:	e24dd048 	sub	sp, sp, #72	; 0x48
 c0008dc:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
 c0008e0:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
 c0008e4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
 c0008e8:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
    int i, j, k, found;
    int mf = -1; // almacena la fila del mejor movimiento encontrado
 c0008ec:	e3e03000 	mvn	r3, #0
 c0008f0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    int mc;      // almacena la columna del mejor movimiento encontrado
    char mejor = 0; // almacena el mejor valor encontrado
 c0008f4:	e3a03000 	mov	r3, #0
 c0008f8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    int patron, longitud;
    char SF, SC; // cantidades a sumar para movernos en la dirección que toque

    // Recorremos todo el tablero comprobando dónde podemos mover
    // Comparamos la puntuación de los movimientos encontrados y nos quedamos con el mejor
    for (i=0; i<DIM; i++)
 c0008fc:	e3a03000 	mov	r3, #0
 c000900:	e50b3010 	str	r3, [fp, #-16]
 c000904:	ea000087 	b	c000b28 <elegir_mov+0x25c>
    {
        for (j=0; j<DIM; j++)
 c000908:	e3a03000 	mov	r3, #0
 c00090c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000910:	ea00007e 	b	c000b10 <elegir_mov+0x244>
        {   // indica en qué casillas quizá se pueda mover
            if (candidatas[i][j] == SI)
 c000914:	e51b3010 	ldr	r3, [fp, #-16]
 c000918:	e1a03183 	lsl	r3, r3, #3
 c00091c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 c000920:	e0822003 	add	r2, r2, r3
 c000924:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000928:	e0823003 	add	r3, r2, r3
 c00092c:	e5d32000 	ldrb	r2, [r3]
 c000930:	e59f3230 	ldr	r3, [pc, #560]	; c000b68 <elegir_mov+0x29c>
 c000934:	e5d33000 	ldrb	r3, [r3]
 c000938:	e1520003 	cmp	r2, r3
 c00093c:	1a000070 	bne	c000b04 <elegir_mov+0x238>
            {
                if (tablero[i][j] == CASILLA_VACIA)
 c000940:	e51b3010 	ldr	r3, [fp, #-16]
 c000944:	e1a03183 	lsl	r3, r3, #3
 c000948:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
 c00094c:	e0822003 	add	r2, r2, r3
 c000950:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000954:	e0823003 	add	r3, r2, r3
 c000958:	e5d33000 	ldrb	r3, [r3]
 c00095c:	e3530000 	cmp	r3, #0
 c000960:	1a000067 	bne	c000b04 <elegir_mov+0x238>
                {
                    found = 0;
 c000964:	e3a03000 	mov	r3, #0
 c000968:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                    k = 0;
 c00096c:	e3a03000 	mov	r3, #0
 c000970:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

                    // en este bucle comprobamos si es un movimiento válido
                    // (es decir si implica voltear en alguna dirección)
                    while ((found == 0) && (k < DIM))
 c000974:	ea00005c 	b	c000aec <elegir_mov+0x220>
                    {
                        SF = vSF[k];    // k representa la dirección que miramos
 c000978:	e59f21ec 	ldr	r2, [pc, #492]	; c000b6c <elegir_mov+0x2a0>
 c00097c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000980:	e0823003 	add	r3, r2, r3
 c000984:	e5d33000 	ldrb	r3, [r3]
 c000988:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3
                        SC = vSC[k];    // 1 es norte, 2 NE, 3 E ...
 c00098c:	e59f21dc 	ldr	r2, [pc, #476]	; c000b70 <elegir_mov+0x2a4>
 c000990:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000994:	e0823003 	add	r3, r2, r3
 c000998:	e5d33000 	ldrb	r3, [r3]
 c00099c:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2

                        // nos dice qué hay que voltear en cada dirección
                        longitud = 0;
 c0009a0:	e3a03000 	mov	r3, #0
 c0009a4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                        switch (modo_patron_volteo) {
 c0009a8:	e59b3004 	ldr	r3, [fp, #4]
 c0009ac:	e3530001 	cmp	r3, #1
 c0009b0:	0a000002 	beq	c0009c0 <elegir_mov+0xf4>
 c0009b4:	e3530002 	cmp	r3, #2
 c0009b8:	0a00000f 	beq	c0009fc <elegir_mov+0x130>
 c0009bc:	ea00001d 	b	c000a38 <elegir_mov+0x16c>
                        case MODO_ARM_C:
                        	patron = patron_volteo_arm_c(tablero, &longitud, i, j, SF, SC, FICHA_BLANCA);
 c0009c0:	e51b3010 	ldr	r3, [fp, #-16]
 c0009c4:	e20320ff 	and	r2, r3, #255	; 0xff
 c0009c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0009cc:	e20330ff 	and	r3, r3, #255	; 0xff
 c0009d0:	e24b1034 	sub	r1, fp, #52	; 0x34
 c0009d4:	e55b002d 	ldrb	r0, [fp, #-45]	; 0xffffffd3
 c0009d8:	e58d0000 	str	r0, [sp]
 c0009dc:	e55b002e 	ldrb	r0, [fp, #-46]	; 0xffffffd2
 c0009e0:	e58d0004 	str	r0, [sp, #4]
 c0009e4:	e3a00001 	mov	r0, #1
 c0009e8:	e58d0008 	str	r0, [sp, #8]
 c0009ec:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
 c0009f0:	ebfffd88 	bl	c000018 <patron_volteo_arm_c>
 c0009f4:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
                        	break;
 c0009f8:	ea00001d 	b	c000a74 <elegir_mov+0x1a8>
                        case MODO_ARM_ARM:
                            patron = patron_volteo_arm_arm(tablero, &longitud, i, j, SF, SC, FICHA_BLANCA);
 c0009fc:	e51b3010 	ldr	r3, [fp, #-16]
 c000a00:	e20320ff 	and	r2, r3, #255	; 0xff
 c000a04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000a08:	e20330ff 	and	r3, r3, #255	; 0xff
 c000a0c:	e24b1034 	sub	r1, fp, #52	; 0x34
 c000a10:	e55b002d 	ldrb	r0, [fp, #-45]	; 0xffffffd3
 c000a14:	e58d0000 	str	r0, [sp]
 c000a18:	e55b002e 	ldrb	r0, [fp, #-46]	; 0xffffffd2
 c000a1c:	e58d0004 	str	r0, [sp, #4]
 c000a20:	e3a00001 	mov	r0, #1
 c000a24:	e58d0008 	str	r0, [sp, #8]
 c000a28:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
 c000a2c:	ebfffd9f 	bl	c0000b0 <patron_volteo_arm_arm>
 c000a30:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
                            break;
 c000a34:	ea00000e 	b	c000a74 <elegir_mov+0x1a8>
                        default:
                        	patron = patron_volteo(tablero, &longitud, i, j, SF, SC, FICHA_BLANCA);
 c000a38:	e51b3010 	ldr	r3, [fp, #-16]
 c000a3c:	e20320ff 	and	r2, r3, #255	; 0xff
 c000a40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000a44:	e20330ff 	and	r3, r3, #255	; 0xff
 c000a48:	e24b1034 	sub	r1, fp, #52	; 0x34
 c000a4c:	e55b002d 	ldrb	r0, [fp, #-45]	; 0xffffffd3
 c000a50:	e58d0000 	str	r0, [sp]
 c000a54:	e55b002e 	ldrb	r0, [fp, #-46]	; 0xffffffd2
 c000a58:	e58d0004 	str	r0, [sp, #4]
 c000a5c:	e3a00001 	mov	r0, #1
 c000a60:	e58d0008 	str	r0, [sp, #8]
 c000a64:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
 c000a68:	ebfffe93 	bl	c0004bc <patron_volteo>
 c000a6c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
                        	break;
 c000a70:	e1a00000 	nop			; (mov r0, r0)
                        }
                        //  //printf("%d ", patron);
                        if (patron == PATRON_ENCONTRADO)
 c000a74:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c000a78:	e3530001 	cmp	r3, #1
 c000a7c:	1a000017 	bne	c000ae0 <elegir_mov+0x214>
                        {
                            found = 1;
 c000a80:	e3a03001 	mov	r3, #1
 c000a84:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                            if (tabla_valor[i][j] > mejor)
 c000a88:	e59f20e4 	ldr	r2, [pc, #228]	; c000b74 <elegir_mov+0x2a8>
 c000a8c:	e51b3010 	ldr	r3, [fp, #-16]
 c000a90:	e1a01183 	lsl	r1, r3, #3
 c000a94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000a98:	e0813003 	add	r3, r1, r3
 c000a9c:	e0823003 	add	r3, r2, r3
 c000aa0:	e5d33000 	ldrb	r3, [r3]
 c000aa4:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
 c000aa8:	e1520003 	cmp	r2, r3
 c000aac:	2a00000b 	bcs	c000ae0 <elegir_mov+0x214>
                            {
                                mf = i;
 c000ab0:	e51b3010 	ldr	r3, [fp, #-16]
 c000ab4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                                mc = j;
 c000ab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000abc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                                mejor = tabla_valor[i][j];
 c000ac0:	e59f20ac 	ldr	r2, [pc, #172]	; c000b74 <elegir_mov+0x2a8>
 c000ac4:	e51b3010 	ldr	r3, [fp, #-16]
 c000ac8:	e1a01183 	lsl	r1, r3, #3
 c000acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000ad0:	e0813003 	add	r3, r1, r3
 c000ad4:	e0823003 	add	r3, r2, r3
 c000ad8:	e5d33000 	ldrb	r3, [r3]
 c000adc:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
                            }
                        }
                        k++;
 c000ae0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000ae4:	e2833001 	add	r3, r3, #1
 c000ae8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    found = 0;
                    k = 0;

                    // en este bucle comprobamos si es un movimiento válido
                    // (es decir si implica voltear en alguna dirección)
                    while ((found == 0) && (k < DIM))
 c000aec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000af0:	e3530000 	cmp	r3, #0
 c000af4:	1a000002 	bne	c000b04 <elegir_mov+0x238>
 c000af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000afc:	e3530007 	cmp	r3, #7
 c000b00:	daffff9c 	ble	c000978 <elegir_mov+0xac>

    // Recorremos todo el tablero comprobando dónde podemos mover
    // Comparamos la puntuación de los movimientos encontrados y nos quedamos con el mejor
    for (i=0; i<DIM; i++)
    {
        for (j=0; j<DIM; j++)
 c000b04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000b08:	e2833001 	add	r3, r3, #1
 c000b0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000b10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000b14:	e3530007 	cmp	r3, #7
 c000b18:	daffff7d 	ble	c000914 <elegir_mov+0x48>
    int patron, longitud;
    char SF, SC; // cantidades a sumar para movernos en la dirección que toque

    // Recorremos todo el tablero comprobando dónde podemos mover
    // Comparamos la puntuación de los movimientos encontrados y nos quedamos con el mejor
    for (i=0; i<DIM; i++)
 c000b1c:	e51b3010 	ldr	r3, [fp, #-16]
 c000b20:	e2833001 	add	r3, r3, #1
 c000b24:	e50b3010 	str	r3, [fp, #-16]
 c000b28:	e51b3010 	ldr	r3, [fp, #-16]
 c000b2c:	e3530007 	cmp	r3, #7
 c000b30:	daffff74 	ble	c000908 <elegir_mov+0x3c>
                    }
                }
            }
        }
    }
    *f = (char) mf;
 c000b34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000b38:	e20320ff 	and	r2, r3, #255	; 0xff
 c000b3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
 c000b40:	e5c32000 	strb	r2, [r3]
    *c = (char) mc;
 c000b44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c000b48:	e20320ff 	and	r2, r3, #255	; 0xff
 c000b4c:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
 c000b50:	e5c32000 	strb	r2, [r3]
    // si no se ha encontrado una posición válida devuelve -1
    return mf;
 c000b54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
}
 c000b58:	e1a00003 	mov	r0, r3
 c000b5c:	e24bd00c 	sub	sp, fp, #12
 c000b60:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000b64:	e12fff1e 	bx	lr
 c000b68:	0c001cb1 	.word	0x0c001cb1
 c000b6c:	0c001cf8 	.word	0x0c001cf8
 c000b70:	0c001d00 	.word	0x0c001d00
 c000b74:	0c001cb8 	.word	0x0c001cb8

0c000b78 <contar>:
////////////////////////////////////////////////////////////////////////////////
// Cuenta el número de fichas de cada color.
// Los guarda en la dirección b (blancas) y n (negras)
void contar(char tablero[][DIM], int *b, int *n)
{
 c000b78:	e1a0c00d 	mov	ip, sp
 c000b7c:	e92dd800 	push	{fp, ip, lr, pc}
 c000b80:	e24cb004 	sub	fp, ip, #4
 c000b84:	e24dd018 	sub	sp, sp, #24
 c000b88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c000b8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c000b90:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    int i,j;

    *b = 0;
 c000b94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000b98:	e3a02000 	mov	r2, #0
 c000b9c:	e5832000 	str	r2, [r3]
    *n = 0;
 c000ba0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000ba4:	e3a02000 	mov	r2, #0
 c000ba8:	e5832000 	str	r2, [r3]

    // recorremos todo el tablero contando las fichas de cada color
    for (i=0; i<DIM; i++)
 c000bac:	e3a03000 	mov	r3, #0
 c000bb0:	e50b3010 	str	r3, [fp, #-16]
 c000bb4:	ea000028 	b	c000c5c <contar+0xe4>
    {
        for (j=0; j<DIM; j++)
 c000bb8:	e3a03000 	mov	r3, #0
 c000bbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000bc0:	ea00001f 	b	c000c44 <contar+0xcc>
        {
            if (tablero[i][j] == FICHA_BLANCA)
 c000bc4:	e51b3010 	ldr	r3, [fp, #-16]
 c000bc8:	e1a03183 	lsl	r3, r3, #3
 c000bcc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c000bd0:	e0822003 	add	r2, r2, r3
 c000bd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000bd8:	e0823003 	add	r3, r2, r3
 c000bdc:	e5d33000 	ldrb	r3, [r3]
 c000be0:	e3530001 	cmp	r3, #1
 c000be4:	1a000005 	bne	c000c00 <contar+0x88>
            {
                (*b)++;
 c000be8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000bec:	e5933000 	ldr	r3, [r3]
 c000bf0:	e2832001 	add	r2, r3, #1
 c000bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000bf8:	e5832000 	str	r2, [r3]
 c000bfc:	ea00000d 	b	c000c38 <contar+0xc0>
            }
            else if (tablero[i][j] == FICHA_NEGRA)
 c000c00:	e51b3010 	ldr	r3, [fp, #-16]
 c000c04:	e1a03183 	lsl	r3, r3, #3
 c000c08:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c000c0c:	e0822003 	add	r2, r2, r3
 c000c10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000c14:	e0823003 	add	r3, r2, r3
 c000c18:	e5d33000 	ldrb	r3, [r3]
 c000c1c:	e3530002 	cmp	r3, #2
 c000c20:	1a000004 	bne	c000c38 <contar+0xc0>
            {
                (*n)++;
 c000c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000c28:	e5933000 	ldr	r3, [r3]
 c000c2c:	e2832001 	add	r2, r3, #1
 c000c30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c000c34:	e5832000 	str	r2, [r3]
    *n = 0;

    // recorremos todo el tablero contando las fichas de cada color
    for (i=0; i<DIM; i++)
    {
        for (j=0; j<DIM; j++)
 c000c38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000c3c:	e2833001 	add	r3, r3, #1
 c000c40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c000c44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000c48:	e3530007 	cmp	r3, #7
 c000c4c:	daffffdc 	ble	c000bc4 <contar+0x4c>

    *b = 0;
    *n = 0;

    // recorremos todo el tablero contando las fichas de cada color
    for (i=0; i<DIM; i++)
 c000c50:	e51b3010 	ldr	r3, [fp, #-16]
 c000c54:	e2833001 	add	r3, r3, #1
 c000c58:	e50b3010 	str	r3, [fp, #-16]
 c000c5c:	e51b3010 	ldr	r3, [fp, #-16]
 c000c60:	e3530007 	cmp	r3, #7
 c000c64:	daffffd3 	ble	c000bb8 <contar+0x40>
            {
                (*n)++;
            }
        }
    }
}
 c000c68:	e24bd00c 	sub	sp, fp, #12
 c000c6c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000c70:	e12fff1e 	bx	lr

0c000c74 <actualizar_candidatas>:

void actualizar_candidatas(char candidatas[][DIM], char f, char c)
{
 c000c74:	e1a0c00d 	mov	ip, sp
 c000c78:	e92dd800 	push	{fp, ip, lr, pc}
 c000c7c:	e24cb004 	sub	fp, ip, #4
 c000c80:	e24dd008 	sub	sp, sp, #8
 c000c84:	e50b0010 	str	r0, [fp, #-16]
 c000c88:	e1a03002 	mov	r3, r2
 c000c8c:	e1a02001 	mov	r2, r1
 c000c90:	e54b2011 	strb	r2, [fp, #-17]	; 0xffffffef
 c000c94:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    // donde ya se ha colocado no se puede volver a colocar
    // En las posiciones alrededor sí
    candidatas[f][c] = CASILLA_OCUPADA;
 c000c98:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000c9c:	e1a03183 	lsl	r3, r3, #3
 c000ca0:	e51b2010 	ldr	r2, [fp, #-16]
 c000ca4:	e0822003 	add	r2, r2, r3
 c000ca8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000cac:	e59f1310 	ldr	r1, [pc, #784]	; c000fc4 <actualizar_candidatas+0x350>
 c000cb0:	e5d11000 	ldrb	r1, [r1]
 c000cb4:	e7c21003 	strb	r1, [r2, r3]
    if (f > 0)
 c000cb8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000cbc:	e3530000 	cmp	r3, #0
 c000cc0:	0a000045 	beq	c000ddc <actualizar_candidatas+0x168>
    {
        if (candidatas[f-1][c] != CASILLA_OCUPADA)
 c000cc4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000cc8:	e2433001 	sub	r3, r3, #1
 c000ccc:	e1a03183 	lsl	r3, r3, #3
 c000cd0:	e51b2010 	ldr	r2, [fp, #-16]
 c000cd4:	e0822003 	add	r2, r2, r3
 c000cd8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000cdc:	e7d22003 	ldrb	r2, [r2, r3]
 c000ce0:	e59f32dc 	ldr	r3, [pc, #732]	; c000fc4 <actualizar_candidatas+0x350>
 c000ce4:	e5d33000 	ldrb	r3, [r3]
 c000ce8:	e1520003 	cmp	r2, r3
 c000cec:	0a000008 	beq	c000d14 <actualizar_candidatas+0xa0>
            candidatas[f-1][c] = SI;
 c000cf0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000cf4:	e2433001 	sub	r3, r3, #1
 c000cf8:	e1a03183 	lsl	r3, r3, #3
 c000cfc:	e51b2010 	ldr	r2, [fp, #-16]
 c000d00:	e0822003 	add	r2, r2, r3
 c000d04:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000d08:	e59f12b8 	ldr	r1, [pc, #696]	; c000fc8 <actualizar_candidatas+0x354>
 c000d0c:	e5d11000 	ldrb	r1, [r1]
 c000d10:	e7c21003 	strb	r1, [r2, r3]

        if ((c > 0) && (candidatas[f-1][c-1] != CASILLA_OCUPADA))
 c000d14:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000d18:	e3530000 	cmp	r3, #0
 c000d1c:	0a000015 	beq	c000d78 <actualizar_candidatas+0x104>
 c000d20:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000d24:	e2433001 	sub	r3, r3, #1
 c000d28:	e1a03183 	lsl	r3, r3, #3
 c000d2c:	e51b2010 	ldr	r2, [fp, #-16]
 c000d30:	e0822003 	add	r2, r2, r3
 c000d34:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000d38:	e2433001 	sub	r3, r3, #1
 c000d3c:	e7d22003 	ldrb	r2, [r2, r3]
 c000d40:	e59f327c 	ldr	r3, [pc, #636]	; c000fc4 <actualizar_candidatas+0x350>
 c000d44:	e5d33000 	ldrb	r3, [r3]
 c000d48:	e1520003 	cmp	r2, r3
 c000d4c:	0a000009 	beq	c000d78 <actualizar_candidatas+0x104>
            candidatas[f-1][c-1] = SI;
 c000d50:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000d54:	e2433001 	sub	r3, r3, #1
 c000d58:	e1a03183 	lsl	r3, r3, #3
 c000d5c:	e51b2010 	ldr	r2, [fp, #-16]
 c000d60:	e0822003 	add	r2, r2, r3
 c000d64:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000d68:	e2433001 	sub	r3, r3, #1
 c000d6c:	e59f1254 	ldr	r1, [pc, #596]	; c000fc8 <actualizar_candidatas+0x354>
 c000d70:	e5d11000 	ldrb	r1, [r1]
 c000d74:	e7c21003 	strb	r1, [r2, r3]

        if ((c < 7) && (candidatas[f-1][c+1] != CASILLA_OCUPADA))
 c000d78:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000d7c:	e3530006 	cmp	r3, #6
 c000d80:	8a000015 	bhi	c000ddc <actualizar_candidatas+0x168>
 c000d84:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000d88:	e2433001 	sub	r3, r3, #1
 c000d8c:	e1a03183 	lsl	r3, r3, #3
 c000d90:	e51b2010 	ldr	r2, [fp, #-16]
 c000d94:	e0822003 	add	r2, r2, r3
 c000d98:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000d9c:	e2833001 	add	r3, r3, #1
 c000da0:	e7d22003 	ldrb	r2, [r2, r3]
 c000da4:	e59f3218 	ldr	r3, [pc, #536]	; c000fc4 <actualizar_candidatas+0x350>
 c000da8:	e5d33000 	ldrb	r3, [r3]
 c000dac:	e1520003 	cmp	r2, r3
 c000db0:	0a000009 	beq	c000ddc <actualizar_candidatas+0x168>
            candidatas[f-1][c+1] = SI;
 c000db4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000db8:	e2433001 	sub	r3, r3, #1
 c000dbc:	e1a03183 	lsl	r3, r3, #3
 c000dc0:	e51b2010 	ldr	r2, [fp, #-16]
 c000dc4:	e0822003 	add	r2, r2, r3
 c000dc8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000dcc:	e2833001 	add	r3, r3, #1
 c000dd0:	e59f11f0 	ldr	r1, [pc, #496]	; c000fc8 <actualizar_candidatas+0x354>
 c000dd4:	e5d11000 	ldrb	r1, [r1]
 c000dd8:	e7c21003 	strb	r1, [r2, r3]
    }
    if (f < 7)
 c000ddc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000de0:	e3530006 	cmp	r3, #6
 c000de4:	8a000045 	bhi	c000f00 <actualizar_candidatas+0x28c>
    {
        if (candidatas[f+1][c] != CASILLA_OCUPADA)
 c000de8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000dec:	e2833001 	add	r3, r3, #1
 c000df0:	e1a03183 	lsl	r3, r3, #3
 c000df4:	e51b2010 	ldr	r2, [fp, #-16]
 c000df8:	e0822003 	add	r2, r2, r3
 c000dfc:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000e00:	e7d22003 	ldrb	r2, [r2, r3]
 c000e04:	e59f31b8 	ldr	r3, [pc, #440]	; c000fc4 <actualizar_candidatas+0x350>
 c000e08:	e5d33000 	ldrb	r3, [r3]
 c000e0c:	e1520003 	cmp	r2, r3
 c000e10:	0a000008 	beq	c000e38 <actualizar_candidatas+0x1c4>
            candidatas[f+1][c] = SI;
 c000e14:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000e18:	e2833001 	add	r3, r3, #1
 c000e1c:	e1a03183 	lsl	r3, r3, #3
 c000e20:	e51b2010 	ldr	r2, [fp, #-16]
 c000e24:	e0822003 	add	r2, r2, r3
 c000e28:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000e2c:	e59f1194 	ldr	r1, [pc, #404]	; c000fc8 <actualizar_candidatas+0x354>
 c000e30:	e5d11000 	ldrb	r1, [r1]
 c000e34:	e7c21003 	strb	r1, [r2, r3]

        if ((c > 0) && (candidatas[f+1][c-1] != CASILLA_OCUPADA))
 c000e38:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000e3c:	e3530000 	cmp	r3, #0
 c000e40:	0a000015 	beq	c000e9c <actualizar_candidatas+0x228>
 c000e44:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000e48:	e2833001 	add	r3, r3, #1
 c000e4c:	e1a03183 	lsl	r3, r3, #3
 c000e50:	e51b2010 	ldr	r2, [fp, #-16]
 c000e54:	e0822003 	add	r2, r2, r3
 c000e58:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000e5c:	e2433001 	sub	r3, r3, #1
 c000e60:	e7d22003 	ldrb	r2, [r2, r3]
 c000e64:	e59f3158 	ldr	r3, [pc, #344]	; c000fc4 <actualizar_candidatas+0x350>
 c000e68:	e5d33000 	ldrb	r3, [r3]
 c000e6c:	e1520003 	cmp	r2, r3
 c000e70:	0a000009 	beq	c000e9c <actualizar_candidatas+0x228>
            candidatas[f+1][c-1] = SI;
 c000e74:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000e78:	e2833001 	add	r3, r3, #1
 c000e7c:	e1a03183 	lsl	r3, r3, #3
 c000e80:	e51b2010 	ldr	r2, [fp, #-16]
 c000e84:	e0822003 	add	r2, r2, r3
 c000e88:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000e8c:	e2433001 	sub	r3, r3, #1
 c000e90:	e59f1130 	ldr	r1, [pc, #304]	; c000fc8 <actualizar_candidatas+0x354>
 c000e94:	e5d11000 	ldrb	r1, [r1]
 c000e98:	e7c21003 	strb	r1, [r2, r3]

        if ((c < 7) && (candidatas[f+1][c+1] != CASILLA_OCUPADA))
 c000e9c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000ea0:	e3530006 	cmp	r3, #6
 c000ea4:	8a000015 	bhi	c000f00 <actualizar_candidatas+0x28c>
 c000ea8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000eac:	e2833001 	add	r3, r3, #1
 c000eb0:	e1a03183 	lsl	r3, r3, #3
 c000eb4:	e51b2010 	ldr	r2, [fp, #-16]
 c000eb8:	e0822003 	add	r2, r2, r3
 c000ebc:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000ec0:	e2833001 	add	r3, r3, #1
 c000ec4:	e7d22003 	ldrb	r2, [r2, r3]
 c000ec8:	e59f30f4 	ldr	r3, [pc, #244]	; c000fc4 <actualizar_candidatas+0x350>
 c000ecc:	e5d33000 	ldrb	r3, [r3]
 c000ed0:	e1520003 	cmp	r2, r3
 c000ed4:	0a000009 	beq	c000f00 <actualizar_candidatas+0x28c>
            candidatas[f+1][c+1] = SI;
 c000ed8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000edc:	e2833001 	add	r3, r3, #1
 c000ee0:	e1a03183 	lsl	r3, r3, #3
 c000ee4:	e51b2010 	ldr	r2, [fp, #-16]
 c000ee8:	e0822003 	add	r2, r2, r3
 c000eec:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000ef0:	e2833001 	add	r3, r3, #1
 c000ef4:	e59f10cc 	ldr	r1, [pc, #204]	; c000fc8 <actualizar_candidatas+0x354>
 c000ef8:	e5d11000 	ldrb	r1, [r1]
 c000efc:	e7c21003 	strb	r1, [r2, r3]
    }
    if ((c > 0) && (candidatas[f][c-1] != CASILLA_OCUPADA))
 c000f00:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000f04:	e3530000 	cmp	r3, #0
 c000f08:	0a000013 	beq	c000f5c <actualizar_candidatas+0x2e8>
 c000f0c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000f10:	e1a03183 	lsl	r3, r3, #3
 c000f14:	e51b2010 	ldr	r2, [fp, #-16]
 c000f18:	e0822003 	add	r2, r2, r3
 c000f1c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000f20:	e2433001 	sub	r3, r3, #1
 c000f24:	e7d22003 	ldrb	r2, [r2, r3]
 c000f28:	e59f3094 	ldr	r3, [pc, #148]	; c000fc4 <actualizar_candidatas+0x350>
 c000f2c:	e5d33000 	ldrb	r3, [r3]
 c000f30:	e1520003 	cmp	r2, r3
 c000f34:	0a000008 	beq	c000f5c <actualizar_candidatas+0x2e8>
        candidatas[f][c-1] = SI;
 c000f38:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000f3c:	e1a03183 	lsl	r3, r3, #3
 c000f40:	e51b2010 	ldr	r2, [fp, #-16]
 c000f44:	e0822003 	add	r2, r2, r3
 c000f48:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000f4c:	e2433001 	sub	r3, r3, #1
 c000f50:	e59f1070 	ldr	r1, [pc, #112]	; c000fc8 <actualizar_candidatas+0x354>
 c000f54:	e5d11000 	ldrb	r1, [r1]
 c000f58:	e7c21003 	strb	r1, [r2, r3]

    if ((c < 7) && (candidatas[f][c+1] != CASILLA_OCUPADA))
 c000f5c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000f60:	e3530006 	cmp	r3, #6
 c000f64:	8a000013 	bhi	c000fb8 <actualizar_candidatas+0x344>
 c000f68:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000f6c:	e1a03183 	lsl	r3, r3, #3
 c000f70:	e51b2010 	ldr	r2, [fp, #-16]
 c000f74:	e0822003 	add	r2, r2, r3
 c000f78:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000f7c:	e2833001 	add	r3, r3, #1
 c000f80:	e7d22003 	ldrb	r2, [r2, r3]
 c000f84:	e59f3038 	ldr	r3, [pc, #56]	; c000fc4 <actualizar_candidatas+0x350>
 c000f88:	e5d33000 	ldrb	r3, [r3]
 c000f8c:	e1520003 	cmp	r2, r3
 c000f90:	0a000008 	beq	c000fb8 <actualizar_candidatas+0x344>
        candidatas[f][c+1] = SI;
 c000f94:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c000f98:	e1a03183 	lsl	r3, r3, #3
 c000f9c:	e51b2010 	ldr	r2, [fp, #-16]
 c000fa0:	e0822003 	add	r2, r2, r3
 c000fa4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c000fa8:	e2833001 	add	r3, r3, #1
 c000fac:	e59f1014 	ldr	r1, [pc, #20]	; c000fc8 <actualizar_candidatas+0x354>
 c000fb0:	e5d11000 	ldrb	r1, [r1]
 c000fb4:	e7c21003 	strb	r1, [r2, r3]
}
 c000fb8:	e24bd00c 	sub	sp, fp, #12
 c000fbc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000fc0:	e12fff1e 	bx	lr
 c000fc4:	0c001cb2 	.word	0x0c001cb2
 c000fc8:	0c001cb1 	.word	0x0c001cb1

0c000fcc <init_test>:

void init_test(char tablero[][DIM],char candidatas[][DIM]){
 c000fcc:	e1a0c00d 	mov	ip, sp
 c000fd0:	e92dd800 	push	{fp, ip, lr, pc}
 c000fd4:	e24cb004 	sub	fp, ip, #4
 c000fd8:	e24dd020 	sub	sp, sp, #32
 c000fdc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c000fe0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4

	//Caso de prueba basico, tablero inicial con ficha negra en 2,3
	tablero[2][3]=FICHA_NEGRA;
 c000fe4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000fe8:	e2833010 	add	r3, r3, #16
 c000fec:	e3a02002 	mov	r2, #2
 c000ff0:	e5c32003 	strb	r2, [r3, #3]
	candidatas[2][3]=CASILLA_OCUPADA;
 c000ff4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000ff8:	e2833010 	add	r3, r3, #16
 c000ffc:	e59f2518 	ldr	r2, [pc, #1304]	; c00151c <init_test+0x550>
 c001000:	e5d22000 	ldrb	r2, [r2]
 c001004:	e5c32003 	strb	r2, [r3, #3]
    int longitud=0;
 c001008:	e3a03000 	mov	r3, #0
 c00100c:	e50b3010 	str	r3, [fp, #-16]
    patron_volteo_test(tablero,&longitud,2,3,-1,0,FICHA_NEGRA);
 c001010:	e24b3010 	sub	r3, fp, #16
 c001014:	e3a020ff 	mov	r2, #255	; 0xff
 c001018:	e58d2000 	str	r2, [sp]
 c00101c:	e3a02000 	mov	r2, #0
 c001020:	e58d2004 	str	r2, [sp, #4]
 c001024:	e3a02002 	mov	r2, #2
 c001028:	e58d2008 	str	r2, [sp, #8]
 c00102c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001030:	e1a01003 	mov	r1, r3
 c001034:	e3a02002 	mov	r2, #2
 c001038:	e3a03003 	mov	r3, #3
 c00103c:	ebfffd63 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,2,3,1,0,FICHA_NEGRA); //Patron encontrado
 c001040:	e24b3010 	sub	r3, fp, #16
 c001044:	e3a02001 	mov	r2, #1
 c001048:	e58d2000 	str	r2, [sp]
 c00104c:	e3a02000 	mov	r2, #0
 c001050:	e58d2004 	str	r2, [sp, #4]
 c001054:	e3a02002 	mov	r2, #2
 c001058:	e58d2008 	str	r2, [sp, #8]
 c00105c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001060:	e1a01003 	mov	r1, r3
 c001064:	e3a02002 	mov	r2, #2
 c001068:	e3a03003 	mov	r3, #3
 c00106c:	ebfffd57 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,2,3,1,1,FICHA_NEGRA);	//Patron encontrado
 c001070:	e24b3010 	sub	r3, fp, #16
 c001074:	e3a02001 	mov	r2, #1
 c001078:	e58d2000 	str	r2, [sp]
 c00107c:	e3a02001 	mov	r2, #1
 c001080:	e58d2004 	str	r2, [sp, #4]
 c001084:	e3a02002 	mov	r2, #2
 c001088:	e58d2008 	str	r2, [sp, #8]
 c00108c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001090:	e1a01003 	mov	r1, r3
 c001094:	e3a02002 	mov	r2, #2
 c001098:	e3a03003 	mov	r3, #3
 c00109c:	ebfffd4b 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,2,3,0,-1,FICHA_NEGRA);
 c0010a0:	e24b3010 	sub	r3, fp, #16
 c0010a4:	e3a02000 	mov	r2, #0
 c0010a8:	e58d2000 	str	r2, [sp]
 c0010ac:	e3a020ff 	mov	r2, #255	; 0xff
 c0010b0:	e58d2004 	str	r2, [sp, #4]
 c0010b4:	e3a02002 	mov	r2, #2
 c0010b8:	e58d2008 	str	r2, [sp, #8]
 c0010bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0010c0:	e1a01003 	mov	r1, r3
 c0010c4:	e3a02002 	mov	r2, #2
 c0010c8:	e3a03003 	mov	r3, #3
 c0010cc:	ebfffd3f 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,2,3,-1,-1,FICHA_NEGRA);
 c0010d0:	e24b3010 	sub	r3, fp, #16
 c0010d4:	e3a020ff 	mov	r2, #255	; 0xff
 c0010d8:	e58d2000 	str	r2, [sp]
 c0010dc:	e3a020ff 	mov	r2, #255	; 0xff
 c0010e0:	e58d2004 	str	r2, [sp, #4]
 c0010e4:	e3a02002 	mov	r2, #2
 c0010e8:	e58d2008 	str	r2, [sp, #8]
 c0010ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0010f0:	e1a01003 	mov	r1, r3
 c0010f4:	e3a02002 	mov	r2, #2
 c0010f8:	e3a03003 	mov	r3, #3
 c0010fc:	ebfffd33 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,2,3,0,1,FICHA_NEGRA);
 c001100:	e24b3010 	sub	r3, fp, #16
 c001104:	e3a02000 	mov	r2, #0
 c001108:	e58d2000 	str	r2, [sp]
 c00110c:	e3a02001 	mov	r2, #1
 c001110:	e58d2004 	str	r2, [sp, #4]
 c001114:	e3a02002 	mov	r2, #2
 c001118:	e58d2008 	str	r2, [sp, #8]
 c00111c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001120:	e1a01003 	mov	r1, r3
 c001124:	e3a02002 	mov	r2, #2
 c001128:	e3a03003 	mov	r3, #3
 c00112c:	ebfffd27 	bl	c0005d0 <patron_volteo_test>
    init_table(tablero,candidatas);
 c001130:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001134:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c001138:	ebfffc1d 	bl	c0001b4 <init_table>

    //Caso de prueba, tablero inicial con ficha negra en 0,0. No se deberia encontrar patron.
	tablero[0][0]=FICHA_NEGRA;
 c00113c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c001140:	e3a02002 	mov	r2, #2
 c001144:	e5c32000 	strb	r2, [r3]
	candidatas[0][0]=CASILLA_OCUPADA;
 c001148:	e59f33cc 	ldr	r3, [pc, #972]	; c00151c <init_test+0x550>
 c00114c:	e5d32000 	ldrb	r2, [r3]
 c001150:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c001154:	e5c32000 	strb	r2, [r3]
    longitud=0;
 c001158:	e3a03000 	mov	r3, #0
 c00115c:	e50b3010 	str	r3, [fp, #-16]
    patron_volteo_test(tablero,&longitud,0,0,-1,0,FICHA_NEGRA);
 c001160:	e24b3010 	sub	r3, fp, #16
 c001164:	e3a020ff 	mov	r2, #255	; 0xff
 c001168:	e58d2000 	str	r2, [sp]
 c00116c:	e3a02000 	mov	r2, #0
 c001170:	e58d2004 	str	r2, [sp, #4]
 c001174:	e3a02002 	mov	r2, #2
 c001178:	e58d2008 	str	r2, [sp, #8]
 c00117c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001180:	e1a01003 	mov	r1, r3
 c001184:	e3a02000 	mov	r2, #0
 c001188:	e3a03000 	mov	r3, #0
 c00118c:	ebfffd0f 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,0,0,1,0,FICHA_NEGRA);
 c001190:	e24b3010 	sub	r3, fp, #16
 c001194:	e3a02001 	mov	r2, #1
 c001198:	e58d2000 	str	r2, [sp]
 c00119c:	e3a02000 	mov	r2, #0
 c0011a0:	e58d2004 	str	r2, [sp, #4]
 c0011a4:	e3a02002 	mov	r2, #2
 c0011a8:	e58d2008 	str	r2, [sp, #8]
 c0011ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0011b0:	e1a01003 	mov	r1, r3
 c0011b4:	e3a02000 	mov	r2, #0
 c0011b8:	e3a03000 	mov	r3, #0
 c0011bc:	ebfffd03 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,0,0,1,1,FICHA_NEGRA);
 c0011c0:	e24b3010 	sub	r3, fp, #16
 c0011c4:	e3a02001 	mov	r2, #1
 c0011c8:	e58d2000 	str	r2, [sp]
 c0011cc:	e3a02001 	mov	r2, #1
 c0011d0:	e58d2004 	str	r2, [sp, #4]
 c0011d4:	e3a02002 	mov	r2, #2
 c0011d8:	e58d2008 	str	r2, [sp, #8]
 c0011dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0011e0:	e1a01003 	mov	r1, r3
 c0011e4:	e3a02000 	mov	r2, #0
 c0011e8:	e3a03000 	mov	r3, #0
 c0011ec:	ebfffcf7 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,0,0,0,-1,FICHA_NEGRA);
 c0011f0:	e24b3010 	sub	r3, fp, #16
 c0011f4:	e3a02000 	mov	r2, #0
 c0011f8:	e58d2000 	str	r2, [sp]
 c0011fc:	e3a020ff 	mov	r2, #255	; 0xff
 c001200:	e58d2004 	str	r2, [sp, #4]
 c001204:	e3a02002 	mov	r2, #2
 c001208:	e58d2008 	str	r2, [sp, #8]
 c00120c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001210:	e1a01003 	mov	r1, r3
 c001214:	e3a02000 	mov	r2, #0
 c001218:	e3a03000 	mov	r3, #0
 c00121c:	ebfffceb 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,0,0,-1,-1,FICHA_NEGRA);
 c001220:	e24b3010 	sub	r3, fp, #16
 c001224:	e3a020ff 	mov	r2, #255	; 0xff
 c001228:	e58d2000 	str	r2, [sp]
 c00122c:	e3a020ff 	mov	r2, #255	; 0xff
 c001230:	e58d2004 	str	r2, [sp, #4]
 c001234:	e3a02002 	mov	r2, #2
 c001238:	e58d2008 	str	r2, [sp, #8]
 c00123c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001240:	e1a01003 	mov	r1, r3
 c001244:	e3a02000 	mov	r2, #0
 c001248:	e3a03000 	mov	r3, #0
 c00124c:	ebfffcdf 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,0,0,0,1,FICHA_NEGRA);
 c001250:	e24b3010 	sub	r3, fp, #16
 c001254:	e3a02000 	mov	r2, #0
 c001258:	e58d2000 	str	r2, [sp]
 c00125c:	e3a02001 	mov	r2, #1
 c001260:	e58d2004 	str	r2, [sp, #4]
 c001264:	e3a02002 	mov	r2, #2
 c001268:	e58d2008 	str	r2, [sp, #8]
 c00126c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001270:	e1a01003 	mov	r1, r3
 c001274:	e3a02000 	mov	r2, #0
 c001278:	e3a03000 	mov	r3, #0
 c00127c:	ebfffcd3 	bl	c0005d0 <patron_volteo_test>
    init_table(tablero,candidatas);
 c001280:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001284:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c001288:	ebfffbc9 	bl	c0001b4 <init_table>

    //Caso de prueba, tablero inicial con ficha negra en 7,7. No se deberia encontrar patron.
	tablero[7][7]=FICHA_NEGRA;
 c00128c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c001290:	e2833038 	add	r3, r3, #56	; 0x38
 c001294:	e3a02002 	mov	r2, #2
 c001298:	e5c32007 	strb	r2, [r3, #7]
	candidatas[7][7]=CASILLA_OCUPADA;
 c00129c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0012a0:	e2833038 	add	r3, r3, #56	; 0x38
 c0012a4:	e59f2270 	ldr	r2, [pc, #624]	; c00151c <init_test+0x550>
 c0012a8:	e5d22000 	ldrb	r2, [r2]
 c0012ac:	e5c32007 	strb	r2, [r3, #7]
    longitud=0;
 c0012b0:	e3a03000 	mov	r3, #0
 c0012b4:	e50b3010 	str	r3, [fp, #-16]
    patron_volteo_test(tablero,&longitud,7,7,-1,0,FICHA_NEGRA);
 c0012b8:	e24b3010 	sub	r3, fp, #16
 c0012bc:	e3a020ff 	mov	r2, #255	; 0xff
 c0012c0:	e58d2000 	str	r2, [sp]
 c0012c4:	e3a02000 	mov	r2, #0
 c0012c8:	e58d2004 	str	r2, [sp, #4]
 c0012cc:	e3a02002 	mov	r2, #2
 c0012d0:	e58d2008 	str	r2, [sp, #8]
 c0012d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0012d8:	e1a01003 	mov	r1, r3
 c0012dc:	e3a02007 	mov	r2, #7
 c0012e0:	e3a03007 	mov	r3, #7
 c0012e4:	ebfffcb9 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,7,7,1,0,FICHA_NEGRA);
 c0012e8:	e24b3010 	sub	r3, fp, #16
 c0012ec:	e3a02001 	mov	r2, #1
 c0012f0:	e58d2000 	str	r2, [sp]
 c0012f4:	e3a02000 	mov	r2, #0
 c0012f8:	e58d2004 	str	r2, [sp, #4]
 c0012fc:	e3a02002 	mov	r2, #2
 c001300:	e58d2008 	str	r2, [sp, #8]
 c001304:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001308:	e1a01003 	mov	r1, r3
 c00130c:	e3a02007 	mov	r2, #7
 c001310:	e3a03007 	mov	r3, #7
 c001314:	ebfffcad 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,7,7,1,1,FICHA_NEGRA);
 c001318:	e24b3010 	sub	r3, fp, #16
 c00131c:	e3a02001 	mov	r2, #1
 c001320:	e58d2000 	str	r2, [sp]
 c001324:	e3a02001 	mov	r2, #1
 c001328:	e58d2004 	str	r2, [sp, #4]
 c00132c:	e3a02002 	mov	r2, #2
 c001330:	e58d2008 	str	r2, [sp, #8]
 c001334:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001338:	e1a01003 	mov	r1, r3
 c00133c:	e3a02007 	mov	r2, #7
 c001340:	e3a03007 	mov	r3, #7
 c001344:	ebfffca1 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,7,7,0,-1,FICHA_NEGRA);
 c001348:	e24b3010 	sub	r3, fp, #16
 c00134c:	e3a02000 	mov	r2, #0
 c001350:	e58d2000 	str	r2, [sp]
 c001354:	e3a020ff 	mov	r2, #255	; 0xff
 c001358:	e58d2004 	str	r2, [sp, #4]
 c00135c:	e3a02002 	mov	r2, #2
 c001360:	e58d2008 	str	r2, [sp, #8]
 c001364:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001368:	e1a01003 	mov	r1, r3
 c00136c:	e3a02007 	mov	r2, #7
 c001370:	e3a03007 	mov	r3, #7
 c001374:	ebfffc95 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,7,7,-1,-1,FICHA_NEGRA);
 c001378:	e24b3010 	sub	r3, fp, #16
 c00137c:	e3a020ff 	mov	r2, #255	; 0xff
 c001380:	e58d2000 	str	r2, [sp]
 c001384:	e3a020ff 	mov	r2, #255	; 0xff
 c001388:	e58d2004 	str	r2, [sp, #4]
 c00138c:	e3a02002 	mov	r2, #2
 c001390:	e58d2008 	str	r2, [sp, #8]
 c001394:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001398:	e1a01003 	mov	r1, r3
 c00139c:	e3a02007 	mov	r2, #7
 c0013a0:	e3a03007 	mov	r3, #7
 c0013a4:	ebfffc89 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,7,7,0,1,FICHA_NEGRA);
 c0013a8:	e24b3010 	sub	r3, fp, #16
 c0013ac:	e3a02000 	mov	r2, #0
 c0013b0:	e58d2000 	str	r2, [sp]
 c0013b4:	e3a02001 	mov	r2, #1
 c0013b8:	e58d2004 	str	r2, [sp, #4]
 c0013bc:	e3a02002 	mov	r2, #2
 c0013c0:	e58d2008 	str	r2, [sp, #8]
 c0013c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0013c8:	e1a01003 	mov	r1, r3
 c0013cc:	e3a02007 	mov	r2, #7
 c0013d0:	e3a03007 	mov	r3, #7
 c0013d4:	ebfffc7d 	bl	c0005d0 <patron_volteo_test>
    init_table(tablero,candidatas);
 c0013d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0013dc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c0013e0:	ebfffb73 	bl	c0001b4 <init_table>

    //Caso de prueba, patron en diagonal con ficha negra en 0,0 y 5,5 y el resto fichas blancas
	tablero[0][0]=FICHA_NEGRA;
 c0013e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0013e8:	e3a02002 	mov	r2, #2
 c0013ec:	e5c32000 	strb	r2, [r3]
	candidatas[0][0]=CASILLA_OCUPADA;
 c0013f0:	e59f3124 	ldr	r3, [pc, #292]	; c00151c <init_test+0x550>
 c0013f4:	e5d32000 	ldrb	r2, [r3]
 c0013f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0013fc:	e5c32000 	strb	r2, [r3]
	tablero[1][1]=FICHA_BLANCA;
 c001400:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c001404:	e2833008 	add	r3, r3, #8
 c001408:	e3a02001 	mov	r2, #1
 c00140c:	e5c32001 	strb	r2, [r3, #1]
	candidatas[1][1]=CASILLA_OCUPADA;
 c001410:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c001414:	e2833008 	add	r3, r3, #8
 c001418:	e59f20fc 	ldr	r2, [pc, #252]	; c00151c <init_test+0x550>
 c00141c:	e5d22000 	ldrb	r2, [r2]
 c001420:	e5c32001 	strb	r2, [r3, #1]
	tablero[2][2]=FICHA_BLANCA;
 c001424:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c001428:	e2833010 	add	r3, r3, #16
 c00142c:	e3a02001 	mov	r2, #1
 c001430:	e5c32002 	strb	r2, [r3, #2]
	candidatas[2][2]=CASILLA_OCUPADA;
 c001434:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c001438:	e2833010 	add	r3, r3, #16
 c00143c:	e59f20d8 	ldr	r2, [pc, #216]	; c00151c <init_test+0x550>
 c001440:	e5d22000 	ldrb	r2, [r2]
 c001444:	e5c32002 	strb	r2, [r3, #2]
	tablero[5][5]=FICHA_NEGRA;
 c001448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c00144c:	e2833028 	add	r3, r3, #40	; 0x28
 c001450:	e3a02002 	mov	r2, #2
 c001454:	e5c32005 	strb	r2, [r3, #5]
	candidatas[5][5]=CASILLA_OCUPADA;
 c001458:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c00145c:	e2833028 	add	r3, r3, #40	; 0x28
 c001460:	e59f20b4 	ldr	r2, [pc, #180]	; c00151c <init_test+0x550>
 c001464:	e5d22000 	ldrb	r2, [r2]
 c001468:	e5c32005 	strb	r2, [r3, #5]
    longitud=0;
 c00146c:	e3a03000 	mov	r3, #0
 c001470:	e50b3010 	str	r3, [fp, #-16]
    patron_volteo_test(tablero,&longitud,0,0,1,0,FICHA_NEGRA);
 c001474:	e24b3010 	sub	r3, fp, #16
 c001478:	e3a02001 	mov	r2, #1
 c00147c:	e58d2000 	str	r2, [sp]
 c001480:	e3a02000 	mov	r2, #0
 c001484:	e58d2004 	str	r2, [sp, #4]
 c001488:	e3a02002 	mov	r2, #2
 c00148c:	e58d2008 	str	r2, [sp, #8]
 c001490:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001494:	e1a01003 	mov	r1, r3
 c001498:	e3a02000 	mov	r2, #0
 c00149c:	e3a03000 	mov	r3, #0
 c0014a0:	ebfffc4a 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,0,0,0,1,FICHA_NEGRA);
 c0014a4:	e24b3010 	sub	r3, fp, #16
 c0014a8:	e3a02000 	mov	r2, #0
 c0014ac:	e58d2000 	str	r2, [sp]
 c0014b0:	e3a02001 	mov	r2, #1
 c0014b4:	e58d2004 	str	r2, [sp, #4]
 c0014b8:	e3a02002 	mov	r2, #2
 c0014bc:	e58d2008 	str	r2, [sp, #8]
 c0014c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0014c4:	e1a01003 	mov	r1, r3
 c0014c8:	e3a02000 	mov	r2, #0
 c0014cc:	e3a03000 	mov	r3, #0
 c0014d0:	ebfffc3e 	bl	c0005d0 <patron_volteo_test>
    patron_volteo_test(tablero,&longitud,0,0,1,1,FICHA_NEGRA); //Patron encontrado
 c0014d4:	e24b3010 	sub	r3, fp, #16
 c0014d8:	e3a02001 	mov	r2, #1
 c0014dc:	e58d2000 	str	r2, [sp]
 c0014e0:	e3a02001 	mov	r2, #1
 c0014e4:	e58d2004 	str	r2, [sp, #4]
 c0014e8:	e3a02002 	mov	r2, #2
 c0014ec:	e58d2008 	str	r2, [sp, #8]
 c0014f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0014f4:	e1a01003 	mov	r1, r3
 c0014f8:	e3a02000 	mov	r2, #0
 c0014fc:	e3a03000 	mov	r3, #0
 c001500:	ebfffc32 	bl	c0005d0 <patron_volteo_test>
    init_table(tablero,candidatas);
 c001504:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c001508:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c00150c:	ebfffb28 	bl	c0001b4 <init_table>

}
 c001510:	e24bd00c 	sub	sp, fp, #12
 c001514:	e89d6800 	ldm	sp, {fp, sp, lr}
 c001518:	e12fff1e 	bx	lr
 c00151c:	0c001cb2 	.word	0x0c001cb2

0c001520 <reversi8>:
// la razón es que al meterlas en la pila no las pone juntas, y así jugar es más complicado.
// en esta versión el humano lleva negras y la máquina blancas
// no se comprueba que el humano mueva correctamente.
// Sólo que la máquina realice un movimiento correcto.
void reversi8()
{
 c001520:	e1a0c00d 	mov	ip, sp
 c001524:	e92ddff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 c001528:	e24cb004 	sub	fp, ip, #4
 c00152c:	e24ddf4f 	sub	sp, sp, #316	; 0x13c

	 ////////////////////////////////////////////////////////////////////
	 // Tablero candidatas: se usa para no explorar todas las posiciones del tablero
	// sólo se exploran las que están alrededor de las fichas colocadas
	 ////////////////////////////////////////////////////////////////////
	char __attribute__ ((aligned (8))) candidatas[DIM][DIM] =
 c001530:	e59f3764 	ldr	r3, [pc, #1892]	; c001c9c <reversi8+0x77c>
 c001534:	e5d31000 	ldrb	r1, [r3]
 c001538:	e59f375c 	ldr	r3, [pc, #1884]	; c001c9c <reversi8+0x77c>
 c00153c:	e5d3c000 	ldrb	ip, [r3]
 c001540:	e59f3754 	ldr	r3, [pc, #1876]	; c001c9c <reversi8+0x77c>
 c001544:	e5d34000 	ldrb	r4, [r3]
 c001548:	e59f374c 	ldr	r3, [pc, #1868]	; c001c9c <reversi8+0x77c>
 c00154c:	e5d36000 	ldrb	r6, [r3]
 c001550:	e59f3744 	ldr	r3, [pc, #1860]	; c001c9c <reversi8+0x77c>
 c001554:	e5d38000 	ldrb	r8, [r3]
 c001558:	e59f373c 	ldr	r3, [pc, #1852]	; c001c9c <reversi8+0x77c>
 c00155c:	e5d39000 	ldrb	r9, [r3]
 c001560:	e59f3734 	ldr	r3, [pc, #1844]	; c001c9c <reversi8+0x77c>
 c001564:	e5d33000 	ldrb	r3, [r3]
 c001568:	e50b3090 	str	r3, [fp, #-144]	; 0xffffff70
 c00156c:	e59f3728 	ldr	r3, [pc, #1832]	; c001c9c <reversi8+0x77c>
 c001570:	e5d33000 	ldrb	r3, [r3]
 c001574:	e50b3094 	str	r3, [fp, #-148]	; 0xffffff6c
 c001578:	e59f371c 	ldr	r3, [pc, #1820]	; c001c9c <reversi8+0x77c>
 c00157c:	e5d33000 	ldrb	r3, [r3]
 c001580:	e50b3098 	str	r3, [fp, #-152]	; 0xffffff68
 c001584:	e59f3710 	ldr	r3, [pc, #1808]	; c001c9c <reversi8+0x77c>
 c001588:	e5d33000 	ldrb	r3, [r3]
 c00158c:	e50b309c 	str	r3, [fp, #-156]	; 0xffffff64
 c001590:	e59f3704 	ldr	r3, [pc, #1796]	; c001c9c <reversi8+0x77c>
 c001594:	e5d33000 	ldrb	r3, [r3]
 c001598:	e50b30a0 	str	r3, [fp, #-160]	; 0xffffff60
 c00159c:	e59f36f8 	ldr	r3, [pc, #1784]	; c001c9c <reversi8+0x77c>
 c0015a0:	e5d33000 	ldrb	r3, [r3]
 c0015a4:	e50b30a4 	str	r3, [fp, #-164]	; 0xffffff5c
 c0015a8:	e59f36ec 	ldr	r3, [pc, #1772]	; c001c9c <reversi8+0x77c>
 c0015ac:	e5d33000 	ldrb	r3, [r3]
 c0015b0:	e50b30a8 	str	r3, [fp, #-168]	; 0xffffff58
 c0015b4:	e59f36e0 	ldr	r3, [pc, #1760]	; c001c9c <reversi8+0x77c>
 c0015b8:	e5d33000 	ldrb	r3, [r3]
 c0015bc:	e50b30ac 	str	r3, [fp, #-172]	; 0xffffff54
 c0015c0:	e59f36d4 	ldr	r3, [pc, #1748]	; c001c9c <reversi8+0x77c>
 c0015c4:	e5d33000 	ldrb	r3, [r3]
 c0015c8:	e50b30b0 	str	r3, [fp, #-176]	; 0xffffff50
 c0015cc:	e59f36c8 	ldr	r3, [pc, #1736]	; c001c9c <reversi8+0x77c>
 c0015d0:	e5d33000 	ldrb	r3, [r3]
 c0015d4:	e50b30b4 	str	r3, [fp, #-180]	; 0xffffff4c
 c0015d8:	e59f36bc 	ldr	r3, [pc, #1724]	; c001c9c <reversi8+0x77c>
 c0015dc:	e5d33000 	ldrb	r3, [r3]
 c0015e0:	e50b30b8 	str	r3, [fp, #-184]	; 0xffffff48
 c0015e4:	e59f36b0 	ldr	r3, [pc, #1712]	; c001c9c <reversi8+0x77c>
 c0015e8:	e5d33000 	ldrb	r3, [r3]
 c0015ec:	e50b30bc 	str	r3, [fp, #-188]	; 0xffffff44
 c0015f0:	e59f36a4 	ldr	r3, [pc, #1700]	; c001c9c <reversi8+0x77c>
 c0015f4:	e5d33000 	ldrb	r3, [r3]
 c0015f8:	e50b30c0 	str	r3, [fp, #-192]	; 0xffffff40
 c0015fc:	e59f3698 	ldr	r3, [pc, #1688]	; c001c9c <reversi8+0x77c>
 c001600:	e5d33000 	ldrb	r3, [r3]
 c001604:	e50b30c4 	str	r3, [fp, #-196]	; 0xffffff3c
 c001608:	e59f368c 	ldr	r3, [pc, #1676]	; c001c9c <reversi8+0x77c>
 c00160c:	e5d33000 	ldrb	r3, [r3]
 c001610:	e50b30c8 	str	r3, [fp, #-200]	; 0xffffff38
 c001614:	e59f3680 	ldr	r3, [pc, #1664]	; c001c9c <reversi8+0x77c>
 c001618:	e5d33000 	ldrb	r3, [r3]
 c00161c:	e50b30cc 	str	r3, [fp, #-204]	; 0xffffff34
 c001620:	e59f3674 	ldr	r3, [pc, #1652]	; c001c9c <reversi8+0x77c>
 c001624:	e5d33000 	ldrb	r3, [r3]
 c001628:	e50b30d0 	str	r3, [fp, #-208]	; 0xffffff30
 c00162c:	e59f3668 	ldr	r3, [pc, #1640]	; c001c9c <reversi8+0x77c>
 c001630:	e5d33000 	ldrb	r3, [r3]
 c001634:	e50b30d4 	str	r3, [fp, #-212]	; 0xffffff2c
 c001638:	e59f365c 	ldr	r3, [pc, #1628]	; c001c9c <reversi8+0x77c>
 c00163c:	e5d33000 	ldrb	r3, [r3]
 c001640:	e50b30d8 	str	r3, [fp, #-216]	; 0xffffff28
 c001644:	e59f3650 	ldr	r3, [pc, #1616]	; c001c9c <reversi8+0x77c>
 c001648:	e5d33000 	ldrb	r3, [r3]
 c00164c:	e50b30dc 	str	r3, [fp, #-220]	; 0xffffff24
 c001650:	e59f3644 	ldr	r3, [pc, #1604]	; c001c9c <reversi8+0x77c>
 c001654:	e5d33000 	ldrb	r3, [r3]
 c001658:	e50b30e0 	str	r3, [fp, #-224]	; 0xffffff20
 c00165c:	e59f3638 	ldr	r3, [pc, #1592]	; c001c9c <reversi8+0x77c>
 c001660:	e5d33000 	ldrb	r3, [r3]
 c001664:	e50b30e4 	str	r3, [fp, #-228]	; 0xffffff1c
 c001668:	e59f362c 	ldr	r3, [pc, #1580]	; c001c9c <reversi8+0x77c>
 c00166c:	e5d33000 	ldrb	r3, [r3]
 c001670:	e50b30e8 	str	r3, [fp, #-232]	; 0xffffff18
 c001674:	e59f3620 	ldr	r3, [pc, #1568]	; c001c9c <reversi8+0x77c>
 c001678:	e5d33000 	ldrb	r3, [r3]
 c00167c:	e50b30ec 	str	r3, [fp, #-236]	; 0xffffff14
 c001680:	e59f3614 	ldr	r3, [pc, #1556]	; c001c9c <reversi8+0x77c>
 c001684:	e5d33000 	ldrb	r3, [r3]
 c001688:	e50b30f0 	str	r3, [fp, #-240]	; 0xffffff10
 c00168c:	e59f3608 	ldr	r3, [pc, #1544]	; c001c9c <reversi8+0x77c>
 c001690:	e5d33000 	ldrb	r3, [r3]
 c001694:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c
 c001698:	e59f35fc 	ldr	r3, [pc, #1532]	; c001c9c <reversi8+0x77c>
 c00169c:	e5d33000 	ldrb	r3, [r3]
 c0016a0:	e50b30f8 	str	r3, [fp, #-248]	; 0xffffff08
 c0016a4:	e59f35f0 	ldr	r3, [pc, #1520]	; c001c9c <reversi8+0x77c>
 c0016a8:	e5d33000 	ldrb	r3, [r3]
 c0016ac:	e50b30fc 	str	r3, [fp, #-252]	; 0xffffff04
 c0016b0:	e59f35e4 	ldr	r3, [pc, #1508]	; c001c9c <reversi8+0x77c>
 c0016b4:	e5d33000 	ldrb	r3, [r3]
 c0016b8:	e50b3100 	str	r3, [fp, #-256]	; 0xffffff00
 c0016bc:	e59f35d8 	ldr	r3, [pc, #1496]	; c001c9c <reversi8+0x77c>
 c0016c0:	e5d33000 	ldrb	r3, [r3]
 c0016c4:	e50b3104 	str	r3, [fp, #-260]	; 0xfffffefc
 c0016c8:	e59f35cc 	ldr	r3, [pc, #1484]	; c001c9c <reversi8+0x77c>
 c0016cc:	e5d33000 	ldrb	r3, [r3]
 c0016d0:	e50b3108 	str	r3, [fp, #-264]	; 0xfffffef8
 c0016d4:	e59f35c0 	ldr	r3, [pc, #1472]	; c001c9c <reversi8+0x77c>
 c0016d8:	e5d33000 	ldrb	r3, [r3]
 c0016dc:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
 c0016e0:	e59f35b4 	ldr	r3, [pc, #1460]	; c001c9c <reversi8+0x77c>
 c0016e4:	e5d33000 	ldrb	r3, [r3]
 c0016e8:	e50b3110 	str	r3, [fp, #-272]	; 0xfffffef0
 c0016ec:	e59f35a8 	ldr	r3, [pc, #1448]	; c001c9c <reversi8+0x77c>
 c0016f0:	e5d33000 	ldrb	r3, [r3]
 c0016f4:	e50b3114 	str	r3, [fp, #-276]	; 0xfffffeec
 c0016f8:	e59f359c 	ldr	r3, [pc, #1436]	; c001c9c <reversi8+0x77c>
 c0016fc:	e5d33000 	ldrb	r3, [r3]
 c001700:	e50b3118 	str	r3, [fp, #-280]	; 0xfffffee8
 c001704:	e59f3590 	ldr	r3, [pc, #1424]	; c001c9c <reversi8+0x77c>
 c001708:	e5d33000 	ldrb	r3, [r3]
 c00170c:	e50b311c 	str	r3, [fp, #-284]	; 0xfffffee4
 c001710:	e59f3584 	ldr	r3, [pc, #1412]	; c001c9c <reversi8+0x77c>
 c001714:	e5d33000 	ldrb	r3, [r3]
 c001718:	e50b3120 	str	r3, [fp, #-288]	; 0xfffffee0
 c00171c:	e59f3578 	ldr	r3, [pc, #1400]	; c001c9c <reversi8+0x77c>
 c001720:	e5d33000 	ldrb	r3, [r3]
 c001724:	e50b3124 	str	r3, [fp, #-292]	; 0xfffffedc
 c001728:	e59f356c 	ldr	r3, [pc, #1388]	; c001c9c <reversi8+0x77c>
 c00172c:	e5d33000 	ldrb	r3, [r3]
 c001730:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
 c001734:	e59f3560 	ldr	r3, [pc, #1376]	; c001c9c <reversi8+0x77c>
 c001738:	e5d33000 	ldrb	r3, [r3]
 c00173c:	e50b312c 	str	r3, [fp, #-300]	; 0xfffffed4
 c001740:	e59f3554 	ldr	r3, [pc, #1364]	; c001c9c <reversi8+0x77c>
 c001744:	e5d33000 	ldrb	r3, [r3]
 c001748:	e50b3130 	str	r3, [fp, #-304]	; 0xfffffed0
 c00174c:	e59f3548 	ldr	r3, [pc, #1352]	; c001c9c <reversi8+0x77c>
 c001750:	e5d33000 	ldrb	r3, [r3]
 c001754:	e50b3134 	str	r3, [fp, #-308]	; 0xfffffecc
 c001758:	e59f353c 	ldr	r3, [pc, #1340]	; c001c9c <reversi8+0x77c>
 c00175c:	e5d33000 	ldrb	r3, [r3]
 c001760:	e50b3138 	str	r3, [fp, #-312]	; 0xfffffec8
 c001764:	e59f3530 	ldr	r3, [pc, #1328]	; c001c9c <reversi8+0x77c>
 c001768:	e5d33000 	ldrb	r3, [r3]
 c00176c:	e50b313c 	str	r3, [fp, #-316]	; 0xfffffec4
 c001770:	e59f3524 	ldr	r3, [pc, #1316]	; c001c9c <reversi8+0x77c>
 c001774:	e5d33000 	ldrb	r3, [r3]
 c001778:	e50b3140 	str	r3, [fp, #-320]	; 0xfffffec0
 c00177c:	e59f3518 	ldr	r3, [pc, #1304]	; c001c9c <reversi8+0x77c>
 c001780:	e5d33000 	ldrb	r3, [r3]
 c001784:	e50b3144 	str	r3, [fp, #-324]	; 0xfffffebc
 c001788:	e59f350c 	ldr	r3, [pc, #1292]	; c001c9c <reversi8+0x77c>
 c00178c:	e5d33000 	ldrb	r3, [r3]
 c001790:	e50b3148 	str	r3, [fp, #-328]	; 0xfffffeb8
 c001794:	e59f3500 	ldr	r3, [pc, #1280]	; c001c9c <reversi8+0x77c>
 c001798:	e5d33000 	ldrb	r3, [r3]
 c00179c:	e50b314c 	str	r3, [fp, #-332]	; 0xfffffeb4
 c0017a0:	e59f34f4 	ldr	r3, [pc, #1268]	; c001c9c <reversi8+0x77c>
 c0017a4:	e5d33000 	ldrb	r3, [r3]
 c0017a8:	e50b3150 	str	r3, [fp, #-336]	; 0xfffffeb0
 c0017ac:	e59f34e8 	ldr	r3, [pc, #1256]	; c001c9c <reversi8+0x77c>
 c0017b0:	e5d33000 	ldrb	r3, [r3]
 c0017b4:	e50b3154 	str	r3, [fp, #-340]	; 0xfffffeac
 c0017b8:	e59f34dc 	ldr	r3, [pc, #1244]	; c001c9c <reversi8+0x77c>
 c0017bc:	e5d33000 	ldrb	r3, [r3]
 c0017c0:	e50b3158 	str	r3, [fp, #-344]	; 0xfffffea8
 c0017c4:	e59f34d0 	ldr	r3, [pc, #1232]	; c001c9c <reversi8+0x77c>
 c0017c8:	e5d33000 	ldrb	r3, [r3]
 c0017cc:	e50b315c 	str	r3, [fp, #-348]	; 0xfffffea4
 c0017d0:	e59f34c4 	ldr	r3, [pc, #1220]	; c001c9c <reversi8+0x77c>
 c0017d4:	e5d3a000 	ldrb	sl, [r3]
 c0017d8:	e59f34bc 	ldr	r3, [pc, #1212]	; c001c9c <reversi8+0x77c>
 c0017dc:	e5d37000 	ldrb	r7, [r3]
 c0017e0:	e59f34b4 	ldr	r3, [pc, #1204]	; c001c9c <reversi8+0x77c>
 c0017e4:	e5d35000 	ldrb	r5, [r3]
 c0017e8:	e59f34ac 	ldr	r3, [pc, #1196]	; c001c9c <reversi8+0x77c>
 c0017ec:	e5d3e000 	ldrb	lr, [r3]
 c0017f0:	e59f34a4 	ldr	r3, [pc, #1188]	; c001c9c <reversi8+0x77c>
 c0017f4:	e5d30000 	ldrb	r0, [r3]
 c0017f8:	e59f349c 	ldr	r3, [pc, #1180]	; c001c9c <reversi8+0x77c>
 c0017fc:	e5d32000 	ldrb	r2, [r3]
 c001800:	e1a03001 	mov	r3, r1
 c001804:	e54b307c 	strb	r3, [fp, #-124]	; 0xffffff84
 c001808:	e1a0300c 	mov	r3, ip
 c00180c:	e54b307b 	strb	r3, [fp, #-123]	; 0xffffff85
 c001810:	e1a03004 	mov	r3, r4
 c001814:	e54b307a 	strb	r3, [fp, #-122]	; 0xffffff86
 c001818:	e1a03006 	mov	r3, r6
 c00181c:	e54b3079 	strb	r3, [fp, #-121]	; 0xffffff87
 c001820:	e1a03008 	mov	r3, r8
 c001824:	e54b3078 	strb	r3, [fp, #-120]	; 0xffffff88
 c001828:	e1a03009 	mov	r3, r9
 c00182c:	e54b3077 	strb	r3, [fp, #-119]	; 0xffffff89
 c001830:	e51b1090 	ldr	r1, [fp, #-144]	; 0xffffff70
 c001834:	e1a03001 	mov	r3, r1
 c001838:	e54b3076 	strb	r3, [fp, #-118]	; 0xffffff8a
 c00183c:	e51b1094 	ldr	r1, [fp, #-148]	; 0xffffff6c
 c001840:	e1a03001 	mov	r3, r1
 c001844:	e54b3075 	strb	r3, [fp, #-117]	; 0xffffff8b
 c001848:	e51b1098 	ldr	r1, [fp, #-152]	; 0xffffff68
 c00184c:	e1a03001 	mov	r3, r1
 c001850:	e54b3074 	strb	r3, [fp, #-116]	; 0xffffff8c
 c001854:	e51b109c 	ldr	r1, [fp, #-156]	; 0xffffff64
 c001858:	e1a03001 	mov	r3, r1
 c00185c:	e54b3073 	strb	r3, [fp, #-115]	; 0xffffff8d
 c001860:	e51b10a0 	ldr	r1, [fp, #-160]	; 0xffffff60
 c001864:	e1a03001 	mov	r3, r1
 c001868:	e54b3072 	strb	r3, [fp, #-114]	; 0xffffff8e
 c00186c:	e51b10a4 	ldr	r1, [fp, #-164]	; 0xffffff5c
 c001870:	e1a03001 	mov	r3, r1
 c001874:	e54b3071 	strb	r3, [fp, #-113]	; 0xffffff8f
 c001878:	e51b10a8 	ldr	r1, [fp, #-168]	; 0xffffff58
 c00187c:	e1a03001 	mov	r3, r1
 c001880:	e54b3070 	strb	r3, [fp, #-112]	; 0xffffff90
 c001884:	e51b10ac 	ldr	r1, [fp, #-172]	; 0xffffff54
 c001888:	e1a03001 	mov	r3, r1
 c00188c:	e54b306f 	strb	r3, [fp, #-111]	; 0xffffff91
 c001890:	e51b10b0 	ldr	r1, [fp, #-176]	; 0xffffff50
 c001894:	e1a03001 	mov	r3, r1
 c001898:	e54b306e 	strb	r3, [fp, #-110]	; 0xffffff92
 c00189c:	e51b10b4 	ldr	r1, [fp, #-180]	; 0xffffff4c
 c0018a0:	e1a03001 	mov	r3, r1
 c0018a4:	e54b306d 	strb	r3, [fp, #-109]	; 0xffffff93
 c0018a8:	e51b10b8 	ldr	r1, [fp, #-184]	; 0xffffff48
 c0018ac:	e1a03001 	mov	r3, r1
 c0018b0:	e54b306c 	strb	r3, [fp, #-108]	; 0xffffff94
 c0018b4:	e51b10bc 	ldr	r1, [fp, #-188]	; 0xffffff44
 c0018b8:	e1a03001 	mov	r3, r1
 c0018bc:	e54b306b 	strb	r3, [fp, #-107]	; 0xffffff95
 c0018c0:	e51b10c0 	ldr	r1, [fp, #-192]	; 0xffffff40
 c0018c4:	e1a03001 	mov	r3, r1
 c0018c8:	e54b306a 	strb	r3, [fp, #-106]	; 0xffffff96
 c0018cc:	e51b10c4 	ldr	r1, [fp, #-196]	; 0xffffff3c
 c0018d0:	e1a03001 	mov	r3, r1
 c0018d4:	e54b3069 	strb	r3, [fp, #-105]	; 0xffffff97
 c0018d8:	e51b10c8 	ldr	r1, [fp, #-200]	; 0xffffff38
 c0018dc:	e1a03001 	mov	r3, r1
 c0018e0:	e54b3068 	strb	r3, [fp, #-104]	; 0xffffff98
 c0018e4:	e51b10cc 	ldr	r1, [fp, #-204]	; 0xffffff34
 c0018e8:	e1a03001 	mov	r3, r1
 c0018ec:	e54b3067 	strb	r3, [fp, #-103]	; 0xffffff99
 c0018f0:	e51b10d0 	ldr	r1, [fp, #-208]	; 0xffffff30
 c0018f4:	e1a03001 	mov	r3, r1
 c0018f8:	e54b3066 	strb	r3, [fp, #-102]	; 0xffffff9a
 c0018fc:	e51b10d4 	ldr	r1, [fp, #-212]	; 0xffffff2c
 c001900:	e1a03001 	mov	r3, r1
 c001904:	e54b3065 	strb	r3, [fp, #-101]	; 0xffffff9b
 c001908:	e51b10d8 	ldr	r1, [fp, #-216]	; 0xffffff28
 c00190c:	e1a03001 	mov	r3, r1
 c001910:	e54b3064 	strb	r3, [fp, #-100]	; 0xffffff9c
 c001914:	e51b10dc 	ldr	r1, [fp, #-220]	; 0xffffff24
 c001918:	e1a03001 	mov	r3, r1
 c00191c:	e54b3063 	strb	r3, [fp, #-99]	; 0xffffff9d
 c001920:	e51b10e0 	ldr	r1, [fp, #-224]	; 0xffffff20
 c001924:	e1a03001 	mov	r3, r1
 c001928:	e54b3062 	strb	r3, [fp, #-98]	; 0xffffff9e
 c00192c:	e51b10e4 	ldr	r1, [fp, #-228]	; 0xffffff1c
 c001930:	e1a03001 	mov	r3, r1
 c001934:	e54b3061 	strb	r3, [fp, #-97]	; 0xffffff9f
 c001938:	e51b10e8 	ldr	r1, [fp, #-232]	; 0xffffff18
 c00193c:	e1a03001 	mov	r3, r1
 c001940:	e54b3060 	strb	r3, [fp, #-96]	; 0xffffffa0
 c001944:	e51b10ec 	ldr	r1, [fp, #-236]	; 0xffffff14
 c001948:	e1a03001 	mov	r3, r1
 c00194c:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
 c001950:	e51b10f0 	ldr	r1, [fp, #-240]	; 0xffffff10
 c001954:	e1a03001 	mov	r3, r1
 c001958:	e54b305e 	strb	r3, [fp, #-94]	; 0xffffffa2
 c00195c:	e51b10f4 	ldr	r1, [fp, #-244]	; 0xffffff0c
 c001960:	e1a03001 	mov	r3, r1
 c001964:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
 c001968:	e51b10f8 	ldr	r1, [fp, #-248]	; 0xffffff08
 c00196c:	e1a03001 	mov	r3, r1
 c001970:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
 c001974:	e51b10fc 	ldr	r1, [fp, #-252]	; 0xffffff04
 c001978:	e1a03001 	mov	r3, r1
 c00197c:	e54b305b 	strb	r3, [fp, #-91]	; 0xffffffa5
 c001980:	e51b1100 	ldr	r1, [fp, #-256]	; 0xffffff00
 c001984:	e1a03001 	mov	r3, r1
 c001988:	e54b305a 	strb	r3, [fp, #-90]	; 0xffffffa6
 c00198c:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
 c001990:	e1a03001 	mov	r3, r1
 c001994:	e54b3059 	strb	r3, [fp, #-89]	; 0xffffffa7
 c001998:	e51b1108 	ldr	r1, [fp, #-264]	; 0xfffffef8
 c00199c:	e1a03001 	mov	r3, r1
 c0019a0:	e54b3058 	strb	r3, [fp, #-88]	; 0xffffffa8
 c0019a4:	e51b110c 	ldr	r1, [fp, #-268]	; 0xfffffef4
 c0019a8:	e1a03001 	mov	r3, r1
 c0019ac:	e54b3057 	strb	r3, [fp, #-87]	; 0xffffffa9
 c0019b0:	e51b1110 	ldr	r1, [fp, #-272]	; 0xfffffef0
 c0019b4:	e1a03001 	mov	r3, r1
 c0019b8:	e54b3056 	strb	r3, [fp, #-86]	; 0xffffffaa
 c0019bc:	e51b1114 	ldr	r1, [fp, #-276]	; 0xfffffeec
 c0019c0:	e1a03001 	mov	r3, r1
 c0019c4:	e54b3055 	strb	r3, [fp, #-85]	; 0xffffffab
 c0019c8:	e51b1118 	ldr	r1, [fp, #-280]	; 0xfffffee8
 c0019cc:	e1a03001 	mov	r3, r1
 c0019d0:	e54b3054 	strb	r3, [fp, #-84]	; 0xffffffac
 c0019d4:	e51b111c 	ldr	r1, [fp, #-284]	; 0xfffffee4
 c0019d8:	e1a03001 	mov	r3, r1
 c0019dc:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
 c0019e0:	e51b1120 	ldr	r1, [fp, #-288]	; 0xfffffee0
 c0019e4:	e1a03001 	mov	r3, r1
 c0019e8:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
 c0019ec:	e51b1124 	ldr	r1, [fp, #-292]	; 0xfffffedc
 c0019f0:	e1a03001 	mov	r3, r1
 c0019f4:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf
 c0019f8:	e51b1128 	ldr	r1, [fp, #-296]	; 0xfffffed8
 c0019fc:	e1a03001 	mov	r3, r1
 c001a00:	e54b3050 	strb	r3, [fp, #-80]	; 0xffffffb0
 c001a04:	e51b112c 	ldr	r1, [fp, #-300]	; 0xfffffed4
 c001a08:	e1a03001 	mov	r3, r1
 c001a0c:	e54b304f 	strb	r3, [fp, #-79]	; 0xffffffb1
 c001a10:	e51b1130 	ldr	r1, [fp, #-304]	; 0xfffffed0
 c001a14:	e1a03001 	mov	r3, r1
 c001a18:	e54b304e 	strb	r3, [fp, #-78]	; 0xffffffb2
 c001a1c:	e51b1134 	ldr	r1, [fp, #-308]	; 0xfffffecc
 c001a20:	e1a03001 	mov	r3, r1
 c001a24:	e54b304d 	strb	r3, [fp, #-77]	; 0xffffffb3
 c001a28:	e51b1138 	ldr	r1, [fp, #-312]	; 0xfffffec8
 c001a2c:	e1a03001 	mov	r3, r1
 c001a30:	e54b304c 	strb	r3, [fp, #-76]	; 0xffffffb4
 c001a34:	e51b113c 	ldr	r1, [fp, #-316]	; 0xfffffec4
 c001a38:	e1a03001 	mov	r3, r1
 c001a3c:	e54b304b 	strb	r3, [fp, #-75]	; 0xffffffb5
 c001a40:	e51b1140 	ldr	r1, [fp, #-320]	; 0xfffffec0
 c001a44:	e1a03001 	mov	r3, r1
 c001a48:	e54b304a 	strb	r3, [fp, #-74]	; 0xffffffb6
 c001a4c:	e51b1144 	ldr	r1, [fp, #-324]	; 0xfffffebc
 c001a50:	e1a03001 	mov	r3, r1
 c001a54:	e54b3049 	strb	r3, [fp, #-73]	; 0xffffffb7
 c001a58:	e51b1148 	ldr	r1, [fp, #-328]	; 0xfffffeb8
 c001a5c:	e1a03001 	mov	r3, r1
 c001a60:	e54b3048 	strb	r3, [fp, #-72]	; 0xffffffb8
 c001a64:	e51b114c 	ldr	r1, [fp, #-332]	; 0xfffffeb4
 c001a68:	e1a03001 	mov	r3, r1
 c001a6c:	e54b3047 	strb	r3, [fp, #-71]	; 0xffffffb9
 c001a70:	e51b1150 	ldr	r1, [fp, #-336]	; 0xfffffeb0
 c001a74:	e1a03001 	mov	r3, r1
 c001a78:	e54b3046 	strb	r3, [fp, #-70]	; 0xffffffba
 c001a7c:	e51b1154 	ldr	r1, [fp, #-340]	; 0xfffffeac
 c001a80:	e1a03001 	mov	r3, r1
 c001a84:	e54b3045 	strb	r3, [fp, #-69]	; 0xffffffbb
 c001a88:	e51b1158 	ldr	r1, [fp, #-344]	; 0xfffffea8
 c001a8c:	e1a03001 	mov	r3, r1
 c001a90:	e54b3044 	strb	r3, [fp, #-68]	; 0xffffffbc
 c001a94:	e51b115c 	ldr	r1, [fp, #-348]	; 0xfffffea4
 c001a98:	e1a03001 	mov	r3, r1
 c001a9c:	e54b3043 	strb	r3, [fp, #-67]	; 0xffffffbd
 c001aa0:	e1a0300a 	mov	r3, sl
 c001aa4:	e54b3042 	strb	r3, [fp, #-66]	; 0xffffffbe
 c001aa8:	e1a03007 	mov	r3, r7
 c001aac:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
 c001ab0:	e1a03005 	mov	r3, r5
 c001ab4:	e54b3040 	strb	r3, [fp, #-64]	; 0xffffffc0
 c001ab8:	e1a0300e 	mov	r3, lr
 c001abc:	e54b303f 	strb	r3, [fp, #-63]	; 0xffffffc1
 c001ac0:	e1a03000 	mov	r3, r0
 c001ac4:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
 c001ac8:	e1a03002 	mov	r3, r2
 c001acc:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
        {NO,NO,NO,NO,NO,NO,NO,NO}
    };


    int done;     // la máquina ha conseguido mover o no
    int move = 0; // el humano ha conseguido mover o no
 c001ad0:	e3a03000 	mov	r3, #0
 c001ad4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    int blancas, negras; // número de fichas de cada color
    int fin = 0;  // fin vale 1 si el humano no ha podido mover
 c001ad8:	e3a03000 	mov	r3, #0
 c001adc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
                  // (ha introducido un valor de movimiento con algún 8)
                  // y luego la máquina tampoco puede
    char f, c;    // fila y columna elegidas por la máquina para su movimiento


    int modo_patron_volteo = MODO_ARM_C;  //indica la funcion de patron_volteo que se va a usar para el juego.
 c001ae0:	e3a03001 	mov	r3, #1
 c001ae4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8

    init_table(tablero, candidatas);
 c001ae8:	e24b307c 	sub	r3, fp, #124	; 0x7c
 c001aec:	e59f01ac 	ldr	r0, [pc, #428]	; c001ca0 <reversi8+0x780>
 c001af0:	e1a01003 	mov	r1, r3
 c001af4:	ebfff9ae 	bl	c0001b4 <init_table>
    init_test(tablero,candidatas);
 c001af8:	e24b307c 	sub	r3, fp, #124	; 0x7c
 c001afc:	e59f019c 	ldr	r0, [pc, #412]	; c001ca0 <reversi8+0x780>
 c001b00:	e1a01003 	mov	r1, r3
 c001b04:	ebfffd30 	bl	c000fcc <init_test>
    while (fin == 0)
 c001b08:	ea000057 	b	c001c6c <reversi8+0x74c>
    {
        move = 0;
 c001b0c:	e3a03000 	mov	r3, #0
 c001b10:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
        esperar_mov(&ready);
 c001b14:	e59f0188 	ldr	r0, [pc, #392]	; c001ca4 <reversi8+0x784>
 c001b18:	ebfffa2a 	bl	c0003c8 <esperar_mov>
        // si la fila o columna son 8 asumimos que el jugador no puede mover
        if (((fila) != DIM) && ((columna) != DIM))
 c001b1c:	e59f3184 	ldr	r3, [pc, #388]	; c001ca8 <reversi8+0x788>
 c001b20:	e5d33000 	ldrb	r3, [r3]
 c001b24:	e3530008 	cmp	r3, #8
 c001b28:	0a000024 	beq	c001bc0 <reversi8+0x6a0>
 c001b2c:	e59f3178 	ldr	r3, [pc, #376]	; c001cac <reversi8+0x78c>
 c001b30:	e5d33000 	ldrb	r3, [r3]
 c001b34:	e3530008 	cmp	r3, #8
 c001b38:	0a000020 	beq	c001bc0 <reversi8+0x6a0>
        {
            tablero[fila][columna] = FICHA_NEGRA;
 c001b3c:	e59f3164 	ldr	r3, [pc, #356]	; c001ca8 <reversi8+0x788>
 c001b40:	e5d33000 	ldrb	r3, [r3]
 c001b44:	e1a01003 	mov	r1, r3
 c001b48:	e59f315c 	ldr	r3, [pc, #348]	; c001cac <reversi8+0x78c>
 c001b4c:	e5d33000 	ldrb	r3, [r3]
 c001b50:	e59f2148 	ldr	r2, [pc, #328]	; c001ca0 <reversi8+0x780>
 c001b54:	e1a01181 	lsl	r1, r1, #3
 c001b58:	e0813003 	add	r3, r1, r3
 c001b5c:	e0823003 	add	r3, r2, r3
 c001b60:	e3a02002 	mov	r2, #2
 c001b64:	e5c32000 	strb	r2, [r3]
            actualizar_tablero(tablero, fila, columna, FICHA_NEGRA, modo_patron_volteo);
 c001b68:	e59f3138 	ldr	r3, [pc, #312]	; c001ca8 <reversi8+0x788>
 c001b6c:	e5d32000 	ldrb	r2, [r3]
 c001b70:	e59f3134 	ldr	r3, [pc, #308]	; c001cac <reversi8+0x78c>
 c001b74:	e5d33000 	ldrb	r3, [r3]
 c001b78:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
 c001b7c:	e58d1000 	str	r1, [sp]
 c001b80:	e59f0118 	ldr	r0, [pc, #280]	; c001ca0 <reversi8+0x780>
 c001b84:	e1a01002 	mov	r1, r2
 c001b88:	e1a02003 	mov	r2, r3
 c001b8c:	e3a03002 	mov	r3, #2
 c001b90:	ebfffaee 	bl	c000750 <actualizar_tablero>
            actualizar_candidatas(candidatas, fila, columna);
 c001b94:	e59f310c 	ldr	r3, [pc, #268]	; c001ca8 <reversi8+0x788>
 c001b98:	e5d32000 	ldrb	r2, [r3]
 c001b9c:	e59f3108 	ldr	r3, [pc, #264]	; c001cac <reversi8+0x78c>
 c001ba0:	e5d33000 	ldrb	r3, [r3]
 c001ba4:	e24b107c 	sub	r1, fp, #124	; 0x7c
 c001ba8:	e1a00001 	mov	r0, r1
 c001bac:	e1a01002 	mov	r1, r2
 c001bb0:	e1a02003 	mov	r2, r3
 c001bb4:	ebfffc2e 	bl	c000c74 <actualizar_candidatas>
            move = 1;
 c001bb8:	e3a03001 	mov	r3, #1
 c001bbc:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
        }

        // escribe el movimiento en las variables globales fila columna
        done = elegir_mov(candidatas, tablero, &f, &c, modo_patron_volteo);
 c001bc0:	e24b107c 	sub	r1, fp, #124	; 0x7c
 c001bc4:	e24b2085 	sub	r2, fp, #133	; 0x85
 c001bc8:	e24b3086 	sub	r3, fp, #134	; 0x86
 c001bcc:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
 c001bd0:	e58d0000 	str	r0, [sp]
 c001bd4:	e1a00001 	mov	r0, r1
 c001bd8:	e59f10c0 	ldr	r1, [pc, #192]	; c001ca0 <reversi8+0x780>
 c001bdc:	ebfffb3a 	bl	c0008cc <elegir_mov>
 c001be0:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
        if (done == -1)
 c001be4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 c001be8:	e3730001 	cmn	r3, #1
 c001bec:	1a000005 	bne	c001c08 <reversi8+0x6e8>
        {
            if (move == 0)
 c001bf0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c001bf4:	e3530000 	cmp	r3, #0
 c001bf8:	1a00001b 	bne	c001c6c <reversi8+0x74c>
                fin = 1;
 c001bfc:	e3a03001 	mov	r3, #1
 c001c00:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
 c001c04:	ea000018 	b	c001c6c <reversi8+0x74c>
        }
        else
        {
            tablero[f][c] = FICHA_BLANCA;
 c001c08:	e55b3085 	ldrb	r3, [fp, #-133]	; 0xffffff7b
 c001c0c:	e1a01003 	mov	r1, r3
 c001c10:	e55b3086 	ldrb	r3, [fp, #-134]	; 0xffffff7a
 c001c14:	e59f2084 	ldr	r2, [pc, #132]	; c001ca0 <reversi8+0x780>
 c001c18:	e1a01181 	lsl	r1, r1, #3
 c001c1c:	e0813003 	add	r3, r1, r3
 c001c20:	e0823003 	add	r3, r2, r3
 c001c24:	e3a02001 	mov	r2, #1
 c001c28:	e5c32000 	strb	r2, [r3]
            actualizar_tablero(tablero, f, c, FICHA_BLANCA, modo_patron_volteo);
 c001c2c:	e55b2085 	ldrb	r2, [fp, #-133]	; 0xffffff7b
 c001c30:	e55b3086 	ldrb	r3, [fp, #-134]	; 0xffffff7a
 c001c34:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
 c001c38:	e58d1000 	str	r1, [sp]
 c001c3c:	e59f005c 	ldr	r0, [pc, #92]	; c001ca0 <reversi8+0x780>
 c001c40:	e1a01002 	mov	r1, r2
 c001c44:	e1a02003 	mov	r2, r3
 c001c48:	e3a03001 	mov	r3, #1
 c001c4c:	ebfffabf 	bl	c000750 <actualizar_tablero>
            actualizar_candidatas(candidatas, f, c);
 c001c50:	e55b2085 	ldrb	r2, [fp, #-133]	; 0xffffff7b
 c001c54:	e55b3086 	ldrb	r3, [fp, #-134]	; 0xffffff7a
 c001c58:	e24b107c 	sub	r1, fp, #124	; 0x7c
 c001c5c:	e1a00001 	mov	r0, r1
 c001c60:	e1a01002 	mov	r1, r2
 c001c64:	e1a02003 	mov	r2, r3
 c001c68:	ebfffc01 	bl	c000c74 <actualizar_candidatas>

    int modo_patron_volteo = MODO_ARM_C;  //indica la funcion de patron_volteo que se va a usar para el juego.

    init_table(tablero, candidatas);
    init_test(tablero,candidatas);
    while (fin == 0)
 c001c6c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
 c001c70:	e3530000 	cmp	r3, #0
 c001c74:	0affffa4 	beq	c001b0c <reversi8+0x5ec>
            tablero[f][c] = FICHA_BLANCA;
            actualizar_tablero(tablero, f, c, FICHA_BLANCA, modo_patron_volteo);
            actualizar_candidatas(candidatas, f, c);
        }
    }
    contar(tablero, &blancas, &negras);
 c001c78:	e24b2080 	sub	r2, fp, #128	; 0x80
 c001c7c:	e24b3084 	sub	r3, fp, #132	; 0x84
 c001c80:	e59f0018 	ldr	r0, [pc, #24]	; c001ca0 <reversi8+0x780>
 c001c84:	e1a01002 	mov	r1, r2
 c001c88:	e1a02003 	mov	r2, r3
 c001c8c:	ebfffbb9 	bl	c000b78 <contar>
}
 c001c90:	e24bd028 	sub	sp, fp, #40	; 0x28
 c001c94:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 c001c98:	e12fff1e 	bx	lr
 c001c9c:	0c001cb0 	.word	0x0c001cb0
 c001ca0:	0c001d08 	.word	0x0c001d08
 c001ca4:	0c001d4a 	.word	0x0c001d4a
 c001ca8:	0c001d48 	.word	0x0c001d48
 c001cac:	0c001d49 	.word	0x0c001d49
