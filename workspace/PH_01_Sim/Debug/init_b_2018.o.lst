   1              	# 1 "../init_b_2018.asm"
   1              	.text
   0              	
   0              	
   0              	
   2              	#        ENTRY            		/*  mark the first instruction to call */
   3              	.global	start
   4              	start:
   5              	.arm /*indicates that we are using the ARM instruction set */
   6              	#------standard initial code
   7              	# --- Setup interrupt / exception vectors 
   8 0000 FFFFFFEA 	      B       Reset_Handler 
   9              	/* In this version we do not use the following handlers */
  10              	###################################################################################################
  11              	#-----------Undefined_Handler: 
  12              	#      B       Undefined_Handler 
  13              	#----------SWI_Handler: 
  14              	#      B       SWI_Handler 
  15              	#----------Prefetch_Handler: 
  16              	#      B       Prefetch_Handler 
  17              	#----------Abort_Handler: 
  18              	#      B       Abort_Handler 
  19              	#         NOP      /* Reserved vector */ 
  20              	#----------IRQ_Handler: 
  21              	#      B       IRQ_Handler 
  22              	#----------FIQ_Handler: 
  23              	#      B       FIQ_Handler 
  24              	###################################################################################################
  25              	# Reset Handler:
  26              	# the processor starts executing this code after system reset       
  27              	###################################################################################################
  28              	Reset_Handler:  
  29              	#        
  30 0004 01D9A0E3 	        MOV     sp, #0x4000      /*  set up stack pointer (r13) */ 
  31              	
  32              	.extern     reversi8
  33 0008 A0519FE5 	        ldr         r5, = reversi8
  34 000c 0FE0A0E1 	        mov         lr, pc 
  35 0010 15FF2FE1 	        bx          r5 
  36              	
  37              	
  38              	stop: 	
  39 0014 FEFFFFEA 	 		B     	stop    	/*  end of program */
  40              	
  41              	/*********************************************************************************************
  42              	* Fichero:		arm_functions.asm
  43              	* Autores:		Yasmina Albero e Iván Escuín
  44              	* Descrip:		funciones arm de patron_volteo
  45              	* Version: 1.0
  46              	*********************************************************************************************/
  47              	
  48              	###################################################################################################
  49              	#Funcion patron_volteo_arm_c
  50              	#Parametros: r0=@tablero, r1=@longitud, r2=FA, r3=CA, pila: SF,SC,color almacenados en ese orden
  51              	###################################################################################################
  52              	.section .text
  53              	.global patron_volteo_arm_c
  54              	patron_volteo_arm_c:
  55 0018 0DC0A0E1 		mov ip, sp
  56 001c F0EF2DE9 		stmdb sp!, {r4-r10,fp, sp, lr, pc}
****  Warning:if writeback register is in list, it must be the lowest reg in the list
  57 0020 04B04CE2 		sub fp, ip, #4
  58              		//Guardamos los parametros iniciales que vamos a modificar en otros registros
  59 0024 00A0A0E1 		mov r10,r0 //@tablero
  60 0028 0190A0E1 		mov r9,r1 //@longitud
  61              		//Inicializamos variables con las que vamos a trabajar
  62              		//SF y SC se deben leer de la pila
  63 002c D440DBE1 		ldrsb r4,[fp,#4] //SF
  64 0030 D850DBE1 		ldrsb r5,[fp,#8] //SC
  65              	
  66 0034 028084E0 		add r8,r4,r2 //FA = FA + SF
  67 0038 037085E0 		add r7,r5,r3 //CA = CA + SC
  68              		//Preparamos llamada a ficha valida, r0=tablero, r1=FA , r2=CA ,r3=@posicion_valida
  69 003c 0A00A0E1 		mov r0,r10
  70 0040 0810A0E1 		mov r1,r8
  71 0044 0720A0E1 		mov r2,r7
  72              		//posicion_valida=0
  73 0048 04304DE2 		sub r3,sp,#4 //@posicion_valida
  74 004c 0360A0E1 		mov r6,r3 //Nos guardamos la direccion para el retorno de la llamada
  75              	
  76 0050 FEFFFFEB 		bl ficha_valida
  77              		//Volvemos de la funcion ficha_valida, casilla se encuentra en r0 y @posicion_valida en r4
  78 0054 0030D6E5 		ldrb r3,[r6]
  79 0058 010053E3 		cmp r3,#1 //posicion==1
  80 005c 0700001A 		bne no_patron
  81              		//cargamos color de la pila
  82 0060 0C60DBE5 		ldrb r6,[fp,#12] //r4=color
  83 0064 060050E1 		cmp r0,r6 //casilla==color
  84 0068 0000D9E5 		ldrb r0,[r9] //cargamos el valor de longitud
  85 006c 0500001A 		bne llamada_recursiva
  86 0070 000050E3 		cmp r0,#0 //longitud>0
  87 0074 0100A0C3 		movgt r0,#1 //PATRON_ENCONTRADO
  88 0078 0000A0D3 		movle r0,#0 //NO_HAY_PATRON
  89 007c 090000EA 		b return_patron_volteo_arm_c
  90              	
  91              	no_patron:
  92 0080 0000A0E3 		mov r0,#0
  93 0084 070000EA 		b return_patron_volteo_arm_c
  94              	
  95              	llamada_recursiva:
  96 0088 010080E2 		add r0,r0,#1	//*longitud=*longitud+1
  97 008c 0000C9E5 		strb r0,[r9]
  98              	
  99 0090 0A00A0E1 		mov r0,r10		//r0=@tablero
 100 0094 0910A0E1 		mov r1,r9		//r1=@longitud
 101 0098 0820A0E1 		mov r2,r8		//r2=FA
 102 009c 0730A0E1 		mov r3,r7		//r3=CA
 103 00a0 70002DE9 		stmdb sp!, {r4-r6}
 104 00a4 FEFFFFEB 		bl patron_volteo_arm_c
 105              	
 106              	return_patron_volteo_arm_c:
 107 00a8 F0AF1BE9 		ldmdb fp,{r4-r10,fp,sp,pc}
 108 00ac 1EFF2FE1 		bx lr
 109              	
 110              	
 111              	###################################################################################################
 112              	#Funcion patron_volteo_arm_arm
 113              	#Parametros: r0=@tablero, r1=@longitud, r2=FA, r3=CA, pila: SF,SC,color almacenados en ese orden
 114              	###################################################################################################
 115              	.section .text
 116              	.global patron_volteo_arm_arm
 117              	patron_volteo_arm_arm:
 118 00b0 0DC0A0E1 		mov ip, sp
 119 00b4 F0EF2DE9 		stmdb sp!, {r4-r10,fp, sp, lr, pc}
****  Warning:if writeback register is in list, it must be the lowest reg in the list
 120 00b8 04B04CE2 		sub fp, ip, #4
 121              		//Guardamos los parametros iniciales que vamos a modificar en otros registros
 122 00bc 00A0A0E1 		mov r10,r0 //@tablero
 123 00c0 0190A0E1 		mov r9,r1 //@longitud
 124              		//Inicializamos variables con las que vamos a trabajar
 125              		//SF y SC se deben leer de la pila
 126 00c4 D440DBE1 		ldrsb r4,[fp,#4] //SF
 127 00c8 D850DBE1 		ldrsb r5,[fp,#8] //SC
 128              	
 129 00cc 028084E0 		add r8,r4,r2 //FA = FA + SF
 130 00d0 037085E0 		add r7,r5,r3 //CA = CA + SC
 131              		//Preparamos llamada a ficha valida, r0=tablero, r1=FA , r2=CA ,r3=@posicion_valida
 132 00d4 0A00A0E1 		mov r0,r10
 133 00d8 0810A0E1 		mov r1,r8
 134 00dc 0720A0E1 		mov r2,r7
 135              		//posicion_valida=0
 136 00e0 04304DE2 		sub r3,sp,#4 //@posicion_valida
 137 00e4 0360A0E1 		mov r6,r3 //Nos guardamos la direccion para el retorno de la llamada
 138              	
 139 00e8 FEFFFFEB 		bl ficha_valida_arm
 140              		//Volvemos de la funcion ficha_valida, casilla se encuentra en r0 y @posicion_valida en r4
 141 00ec 0030D6E5 		ldrb r3,[r6]
 142 00f0 010053E3 		cmp r3,#1 //posicion==1
 143 00f4 0700001A 		bne no_patron_arm_arm
 144              		//cargamos color de la pila
 145 00f8 0C60DBE5 		ldrb r6,[fp,#12] //r4=color
 146 00fc 060050E1 		cmp r0,r6 //casilla==color
 147 0100 0000D9E5 		ldrb r0,[r9] //cargamos el valor de longitud
 148 0104 0500001A 		bne llamada_recursiva_arm_arm
 149 0108 000050E3 		cmp r0,#0 //longitud>0
 150 010c 0100A0C3 		movgt r0,#1 //PATRON_ENCONTRADO
 151 0110 0000A0D3 		movle r0,#0 //NO_HAY_PATRON
 152 0114 090000EA 		b return_patron_volteo_arm_arm
 153              	
 154              	no_patron_arm_arm:
 155 0118 0000A0E3 		mov r0,#0
 156 011c 070000EA 		b return_patron_volteo_arm_arm
 157              	
 158              	llamada_recursiva_arm_arm:
 159 0120 010080E2 		add r0,r0,#1	//*longitud=*longitud+1
 160 0124 0000C9E5 		strb r0,[r9]
 161              	
 162 0128 0A00A0E1 		mov r0,r10		//r0=@tablero
 163 012c 0910A0E1 		mov r1,r9		//r1=@longitud
 164 0130 0820A0E1 		mov r2,r8		//r2=FA
 165 0134 0730A0E1 		mov r3,r7		//r3=CA
 166 0138 70002DE9 		stmdb sp!, {r4-r6}
 167 013c FEFFFFEB 		bl patron_volteo_arm_arm
 168              	
 169              	return_patron_volteo_arm_arm:
 170 0140 F0AF1BE9 		ldmdb fp,{r4-r10,fp,sp,pc}
 171 0144 1EFF2FE1 		bx lr
 172              	
 173              	###################################################################################################
 174              	#Funcion ficha_valida_arm
 175              	#Parametros: r0=@tablero, r1=f, r2=c, r3=@posicion_valida
 176              	###################################################################################################
 177              	.section .text
 178              	.global ficha_valida_arm
 179              	ficha_valida_arm:
 180 0148 0DC0A0E1 		mov ip, sp
 181 014c F0DF2DE9 		stmdb sp!, {r4-r10,fp,ip, lr, pc}
 182 0150 04B04CE2 		sub fp, ip, #4
 183 0154 0850A0E3 		mov r5, #8	//r5=DIM, suponiendo que el tamaño del tablero es 8x8
 184 0158 0060A0E3 		mov r6, #0	//casilla vacia | valor minimo para indice de casilla
 185 015c 0170A0E3 		mov r7, #1
 186 0160 910508E0 		mul r8, r1,r5	//calculamos numero de casillas para acceso a la ficha del tablero
 187 0164 028088E0 		add r8, r8, r2	//r8=offset. @tablero + r8 = @ficha
 188 0168 010055E1 		cmp r5,r1
 189 016c 0B0000DA 		ble no_valido	//DIM <=f
 190 0170 000051E3 		cmp r1,#0
 191 0174 090000BA 		blt no_valido	//f<0
 192 0178 020055E1 		cmp r5,r2
 193 017c 070000DA 		ble no_valido	//DIM <=c
 194 0180 070052E1 		cmp r2,r7
 195 0184 050000BA 		blt no_valido	//c<0
 196 0188 0890D0E7 		ldrb r9,[r0,r8]	//cargo en r9 tablero[f][c]
 197 018c 060059E1 		cmp r9,r6 //tablero[f][c] != casilla_vacia
 198 0190 0200000A 		beq no_valido
 199 0194 0070C3E5 		strb r7,[r3]
 200 0198 0900A0E1 	 	mov r0,r9 //ficha =tablero[f][c]
 201 019c 010000EA 	 	b retorno
 202              	
 203              	no_valido:
 204 01a0 0060C3E5 		strb r6,[r3]
 205 01a4 0600A0E1 		mov r0,r6
 206              	
 207              	retorno:
 208 01a8 F0AF1BE9 		ldmdb fp,{r4-r10,fp,sp,pc}
 209 01ac 1EFF2FE1 		bx lr
 210              	###################################################################################################
 211              	
 212              	
 213              	.data
 214              	
 215              	
 216              	
 217              	.end
DEFINED SYMBOLS
  ../init_b_2018.asm:4      .text:00000000 start
  ../init_b_2018.asm:28     .text:00000004 Reset_Handler
  ../init_b_2018.asm:8      .text:00000000 $a
  ../init_b_2018.asm:38     .text:00000014 stop
  ../init_b_2018.asm:54     .text:00000018 patron_volteo_arm_c
  ../init_b_2018.asm:91     .text:00000080 no_patron
  ../init_b_2018.asm:95     .text:00000088 llamada_recursiva
  ../init_b_2018.asm:106    .text:000000a8 return_patron_volteo_arm_c
  ../init_b_2018.asm:117    .text:000000b0 patron_volteo_arm_arm
  ../init_b_2018.asm:179    .text:00000148 ficha_valida_arm
  ../init_b_2018.asm:154    .text:00000118 no_patron_arm_arm
  ../init_b_2018.asm:158    .text:00000120 llamada_recursiva_arm_arm
  ../init_b_2018.asm:169    .text:00000140 return_patron_volteo_arm_arm
  ../init_b_2018.asm:203    .text:000001a0 no_valido
  ../init_b_2018.asm:207    .text:000001a8 retorno
  ../init_b_2018.asm:213    .text:000001b0 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
reversi8
ficha_valida
