/*********************************************************************************************
* Fichero:		timer2.c
* Autores:		Yasmina Albero e Iván Escuín
* Descrip:		funciones de control del timer2 del s3c44b0x
* Version: 1.0
*********************************************************************************************/

/*--- ficheros de cabecera ---*/

#include "44b.h"
#include "44blib.h"

/*--- variables globales ---*/
volatile unsigned int n_interrupt;

/* declaración de función que es rutina de servicio de interrupción
 * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
void latido_ISR(void) __attribute__((interrupt("IRQ")));

/*--- codigo de las funciones ---*/
/* Rutina de servicio de interrupción para timer2 */
void latido_ISR(void)
{
	n_interrupt++;

	/* borrar bit en I_ISPC para desactivar la solicitud de interrupción*/
	rI_ISPC |= BIT_TIMER0; // BIT_TIMER0 está definido en 44b.h y pone un uno en el bit 11 que correponde al Timer0
}

/* Función que inicializa el timer2, dejandolo listo para empezar la cuenta con timer2_empezar() */
void latido_inicializar(void)
{
	/* Configuraion controlador de interrupciones */
	rINTMOD = 0x0; // Configura las linas como de tipo IRQ
	rINTCON = 0x1; // Habilita int. vectorizadas y la linea IRQ (FIQ no)
	rINTMSK &= ~(BIT_TIMER0); // habilitamos en vector de mascaras de interrupcion el Timer2 (bits 26 y 11, BIT_GLOBAL y BIT_TIMER2 están definidos en 44b.h)

	/* Establece la rutina de servicio para TIMER2 */
	pISR_TIMER0 = (unsigned) latido_ISR;

	/* Configura el Timer0 */
	rTCFG0 = rTCFG0 & 0xffffffC8; // Preescalado del timer2 en bits [7:0] de TCFG0. Dividimos entre 1 para el maximo valor

	/*****************************************
	 * Bits de seleccion del MUX timer 0:	 *
	 * 1/2 -> 0000	1/4-> 0001				 *
	 * 1/8 -> 0010	1/16-> 0011	1/32 -> 0100 *
	 *****************************************/
	rTCFG1 = rTCFG1 & 0xfffffff4; // Selección del mux para el divisor de frecuencia, bits [3:0] para timer2.
	rTCNTB2 = 1000;// valor inicial de cuenta (la cuenta es descendente)
	rTCMPB2 = 0 ;// valor de comparación (valor original 12800)
	//Timer control register, para timer0 bits [3:0] -> [3] auto-reload, [2] output inverter, [1] manual update, [0] start/stop
	/* establecer update=manual (bit 1), inverter=off (0 en bit 2)*/
	rTCON = 0x0000002;
}
