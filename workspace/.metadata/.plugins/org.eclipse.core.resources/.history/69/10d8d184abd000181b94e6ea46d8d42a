.text
#        ENTRY            		/*  mark the first instruction to call */
.global	start
start:
.arm /*indicates that we are using the ARM instruction set */
#------standard initial code
# --- Setup interrupt / exception vectors 
      B       Reset_Handler 
/* In this version we do not use the following handlers */
#######################################################################################################
#-----------Undefined_Handler: 
#      B       Undefined_Handler 
#----------SWI_Handler: 
#      B       SWI_Handler 
#----------Prefetch_Handler: 
#      B       Prefetch_Handler 
#----------Abort_Handler: 
#      B       Abort_Handler 
#         NOP      /* Reserved vector */ 
#----------IRQ_Handler: 
#      B       IRQ_Handler 
#----------FIQ_Handler: 
#      B       FIQ_Handler 
#######################################################################################################
# Reset Handler:
# the processor starts executing this code after system reset       
#######################################################################################################
Reset_Handler:  
#        
        MOV     sp, #0x4000      /*  set up stack pointer (r13) */ 

.extern     reversi8
        ldr         r5, = reversi8
        mov         lr, pc 
        bx          r5 


stop: 	
 		B     	stop    	/*  end of program */

#################################################################################################################		
AREA codigo,CODE,READONLY
#################################################################################################################

;Funcion patron_volteo_arm_c
#################################################################################################################
patron_volteo_arm_c:
mov ip, sp
stmdb sp!, {r4-r10,fp, sp, lr, pc}
sub fp, ip, #4
;Guardamos los parametros iniciales que vamos a modificar en otros registros
mov r10,r0 ;@tablero
mov r9,r1 ;@longitud
;Inicializamos variables con las que vamos a trabajar
mov r4,#0 ;posicion_valida=0
;SF y SC se deben leer de la pila
ldrb r0,[fp,#4] ;SF
ldrb r1,[fp,#8] ;SC

add r8,r2,r0 ;FA = FA + SF
add r7,r3,r1 ;CA = CA + SC
;Preparamos llamada a ficha valida, r0=tablero, r1=FA , r2=CA ,r3=@posicion_valida
mov r0,r10
mov r1,r8
mov r2,r7
strb r4,[sp,#-4]
sub r3,sp,#4 ;@posicion_valida
0c000428:   mov r0, r3
0c00042c:   sub sp, r11, #12
0c000430:   ldm sp, {r11, sp, lr}
0c000434:   bx lr
#################################################################################################################
.data



.end
#        END
