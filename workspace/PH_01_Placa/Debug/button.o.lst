   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"button.c"
  21              	.Ltext0:
  22              		.file 1 "../button.c"
 1964              		.align	2
 1965              	int_count:
 1966 0000 00000000 		.space	4
 1967              		.global	boton_pulsado
 1970              	boton_pulsado:
 1971 0004 00       		.space	1
 1972              		.comm	funcion_callback,4,4
 1973 0005 000000   		.text
 1974              		.align	2
 1975              		.global	Eint4567_ISR
 1977              	Eint4567_ISR:
 1978              	.LFB0:
   1:../button.c   **** /*********************************************************************************************
   2:../button.c   **** * Fichero:	button.c
   3:../button.c   **** * Autor:
   4:../button.c   **** * Descrip:	Funciones de manejo de los pulsadores (EINT6-7)
   5:../button.c   **** * Version:
   6:../button.c   **** *********************************************************************************************/
   7:../button.c   **** 
   8:../button.c   **** /*--- ficheros de cabecera ---*/
   9:../button.c   **** #include "button.h"
  10:../button.c   **** #include "8led.h"
  11:../button.c   **** #include "44blib.h"
  12:../button.c   **** #include "44b.h"
  13:../button.c   **** #include "def.h"
  14:../button.c   **** 
  15:../button.c   **** /*--- variables globales del módulo ---*/
  16:../button.c   **** /* int_count la utilizamos para sacar un número por el 8led.
  17:../button.c   ****   Cuando se pulsa un botón sumamos y con el otro restamos. ¡A veces hay rebotes! */
  18:../button.c   **** static unsigned int int_count = 0;
  19:../button.c   **** 
  20:../button.c   **** //Variable donde guardamos el ultimo boton pulsado
  21:../button.c   **** estado_button boton_pulsado = button_none;
  22:../button.c   **** 
  23:../button.c   **** //Funcion que se usará como callback
  24:../button.c   **** void (*funcion_callback)(estado_button);
  25:../button.c   **** 
  26:../button.c   **** /* declaración de función que es rutina de servicio de interrupción
  27:../button.c   ****  * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
  28:../button.c   **** void Eint4567_ISR(void) __attribute__((interrupt("IRQ")));
  29:../button.c   **** 
  30:../button.c   **** /*--- codigo de funciones ---*/
  31:../button.c   **** void Eint4567_ISR(void)
  32:../button.c   **** {
 1979              		.loc 1 32 0
 1980              		.cfi_startproc
 1981              		@ Interrupt Service Routine.
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 1, uses_anonymous_args = 0
 1984 0000 04C02DE5 		str	ip, [sp, #-4]!
 1985 0004 0DC0A0E1 		mov	ip, sp
 1986              	.LCFI0:
 1987              		.cfi_def_cfa_register 12
 1988 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 1989 000c 04B04CE2 		sub	fp, ip, #4
 1990              		.cfi_offset 14, -8
 1991              		.cfi_offset 13, -12
 1992              		.cfi_offset 11, -16
 1993              		.cfi_offset 3, -20
 1994              		.cfi_offset 2, -24
 1995              		.cfi_offset 1, -28
 1996              		.cfi_offset 0, -32
 1997              	.LCFI1:
 1998              		.cfi_def_cfa 11, 4
  33:../button.c   **** /*
  34:../button.c   **** 	 Identificar la interrupcion (hay dos pulsadores)
  35:../button.c   **** 	int which_int = rEXTINTPND;
  36:../button.c   **** 	switch (which_int)
  37:../button.c   **** 	{
  38:../button.c   **** 		case 4:
  39:../button.c   **** 			int_count++; // incrementamos el contador
  40:../button.c   **** 			break;
  41:../button.c   **** 		case 8:
  42:../button.c   **** 			int_count--; // decrementamos el contador
  43:../button.c   **** 			break;
  44:../button.c   **** 		default:
  45:../button.c   **** 			break;
  46:../button.c   **** 	}
  47:../button.c   **** 	// }
  48:../button.c   **** 	D8Led_symbol(int_count & 0x000f); // sacamos el valor por pantalla (módulo 16)
  49:../button.c   **** */
  50:../button.c   **** 	rINTMSK |= BIT_EINT4567; // deshabilitar interrupciones de botones
 1999              		.loc 1 50 0
 2000 0010 3C309FE5 		ldr	r3, .L2
 2001 0014 38209FE5 		ldr	r2, .L2
 2002 0018 002092E5 		ldr	r2, [r2, #0]
 2003 001c 022682E3 		orr	r2, r2, #2097152
 2004 0020 002083E5 		str	r2, [r3, #0]
  51:../button.c   **** 
  52:../button.c   **** 	funcion_callback(rEXTINTPND);
 2005              		.loc 1 52 0
 2006 0024 2C309FE5 		ldr	r3, .L2+4
 2007 0028 003093E5 		ldr	r3, [r3, #0]
 2008 002c 28209FE5 		ldr	r2, .L2+8
 2009 0030 002092E5 		ldr	r2, [r2, #0]
 2010 0034 FF2002E2 		and	r2, r2, #255
 2011 0038 0200A0E1 		mov	r0, r2
 2012 003c 0FE0A0E1 		mov	lr, pc
 2013 0040 13FF2FE1 		bx	r3
  53:../button.c   **** }
 2014              		.loc 1 53 0
 2015 0044 1CD04BE2 		sub	sp, fp, #28
 2016 0048 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2017 004c 04C09DE4 		ldmfd	sp!, {ip}
 2018 0050 04F05EE2 		subs	pc, lr, #4
 2019              	.L3:
 2020              		.align	2
 2021              	.L2:
 2022 0054 0C00E001 		.word	31457292
 2023 0058 00000000 		.word	funcion_callback
 2024 005c 5400D201 		.word	30539860
 2025              		.cfi_endproc
 2026              	.LFE0:
 2028              		.align	2
 2029              		.global	button_iniciar
 2031              	button_iniciar:
 2032              	.LFB1:
  54:../button.c   **** 
  55:../button.c   **** void button_iniciar(void)
  56:../button.c   **** {
 2033              		.loc 1 56 0
 2034              		.cfi_startproc
 2035              		@ Function supports interworking.
 2036              		@ args = 0, pretend = 0, frame = 0
 2037              		@ frame_needed = 1, uses_anonymous_args = 0
 2038 0060 0DC0A0E1 		mov	ip, sp
 2039              	.LCFI2:
 2040              		.cfi_def_cfa_register 12
 2041 0064 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2042 0068 04B04CE2 		sub	fp, ip, #4
 2043              		.cfi_offset 14, -8
 2044              		.cfi_offset 13, -12
 2045              		.cfi_offset 11, -16
 2046              	.LCFI3:
 2047              		.cfi_def_cfa 11, 4
  57:../button.c   **** #ifndef EMU
  58:../button.c   **** 	/* Configuracion del controlador de interrupciones. Estos registros están definidos en 44b.h */
  59:../button.c   **** 	rI_ISPC    = 0x3ffffff;	// Borra INTPND escribiendo 1s en I_ISPC
 2048              		.loc 1 59 0
 2049 006c 84309FE5 		ldr	r3, .L5
 2050 0070 3F23E0E3 		mvn	r2, #-67108864
 2051 0074 002083E5 		str	r2, [r3, #0]
  60:../button.c   **** 	rEXTINTPND = 0xf;       // Borra EXTINTPND escribiendo 1s en el propio registro
 2052              		.loc 1 60 0
 2053 0078 7C309FE5 		ldr	r3, .L5+4
 2054 007c 0F20A0E3 		mov	r2, #15
 2055 0080 002083E5 		str	r2, [r3, #0]
  61:../button.c   **** 	rINTMOD    = 0x0;		// Configura las linas como de tipo IRQ
 2056              		.loc 1 61 0
 2057 0084 74309FE5 		ldr	r3, .L5+8
 2058 0088 0020A0E3 		mov	r2, #0
 2059 008c 002083E5 		str	r2, [r3, #0]
  62:../button.c   **** 	rINTCON    = 0x1;	    // Habilita int. vectorizadas y la linea IRQ (FIQ no)
 2060              		.loc 1 62 0
 2061 0090 1E36A0E3 		mov	r3, #31457280
 2062 0094 0120A0E3 		mov	r2, #1
 2063 0098 002083E5 		str	r2, [r3, #0]
  63:../button.c   **** 
  64:../button.c   **** 	/* Configuracion del puerto G */
  65:../button.c   **** 	rPCONG  = 0xffff;        		// Establece la funcion de los pines (EINT0-7)
 2064              		.loc 1 65 0
 2065 009c 60309FE5 		ldr	r3, .L5+12
 2066 00a0 60209FE5 		ldr	r2, .L5+16
 2067 00a4 002083E5 		str	r2, [r3, #0]
  66:../button.c   **** 	rPUPG   = 0x0;                  // Habilita el "pull up" del puerto
 2068              		.loc 1 66 0
 2069 00a8 5C309FE5 		ldr	r3, .L5+20
 2070 00ac 0020A0E3 		mov	r2, #0
 2071 00b0 002083E5 		str	r2, [r3, #0]
  67:../button.c   **** 	rEXTINT = rEXTINT | 0x22222222;   // Configura las lineas de int. como de flanco de bajada
 2072              		.loc 1 67 0
 2073 00b4 54209FE5 		ldr	r2, .L5+24
 2074 00b8 50309FE5 		ldr	r3, .L5+24
 2075 00bc 001093E5 		ldr	r1, [r3, #0]
 2076 00c0 4C309FE5 		ldr	r3, .L5+28
 2077 00c4 033081E1 		orr	r3, r1, r3
 2078 00c8 003082E5 		str	r3, [r2, #0]
  68:../button.c   **** 
  69:../button.c   **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND y EXTINTPND */
  70:../button.c   **** 	rI_ISPC    |= (BIT_EINT4567);
 2079              		.loc 1 70 0
 2080 00cc 24309FE5 		ldr	r3, .L5
 2081 00d0 20209FE5 		ldr	r2, .L5
 2082 00d4 002092E5 		ldr	r2, [r2, #0]
 2083 00d8 022682E3 		orr	r2, r2, #2097152
 2084 00dc 002083E5 		str	r2, [r3, #0]
  71:../button.c   **** 	rEXTINTPND = 0xf;
 2085              		.loc 1 71 0
 2086 00e0 14309FE5 		ldr	r3, .L5+4
 2087 00e4 0F20A0E3 		mov	r2, #15
 2088 00e8 002083E5 		str	r2, [r3, #0]
  72:../button.c   **** #endif
  73:../button.c   **** }
 2089              		.loc 1 73 0
 2090 00ec 0CD04BE2 		sub	sp, fp, #12
 2091 00f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2092 00f4 1EFF2FE1 		bx	lr
 2093              	.L6:
 2094              		.align	2
 2095              	.L5:
 2096 00f8 2400E001 		.word	31457316
 2097 00fc 5400D201 		.word	30539860
 2098 0100 0800E001 		.word	31457288
 2099 0104 4000D201 		.word	30539840
 2100 0108 FFFF0000 		.word	65535
 2101 010c 4800D201 		.word	30539848
 2102 0110 5000D201 		.word	30539856
 2103 0114 22222222 		.word	572662306
 2104              		.cfi_endproc
 2105              	.LFE1:
 2107              		.align	2
 2108              		.global	button_empezar
 2110              	button_empezar:
 2111              	.LFB2:
  74:../button.c   **** void button_empezar (void (*callback)(estado_button)){
 2112              		.loc 1 74 0
 2113              		.cfi_startproc
 2114              		@ Function supports interworking.
 2115              		@ args = 0, pretend = 0, frame = 8
 2116              		@ frame_needed = 1, uses_anonymous_args = 0
 2117 0118 0DC0A0E1 		mov	ip, sp
 2118              	.LCFI4:
 2119              		.cfi_def_cfa_register 12
 2120 011c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2121 0120 04B04CE2 		sub	fp, ip, #4
 2122              		.cfi_offset 14, -8
 2123              		.cfi_offset 13, -12
 2124              		.cfi_offset 11, -16
 2125              	.LCFI5:
 2126              		.cfi_def_cfa 11, 4
 2127 0124 08D04DE2 		sub	sp, sp, #8
 2128 0128 10000BE5 		str	r0, [fp, #-16]
  75:../button.c   **** #ifndef EMU
  76:../button.c   **** 	/* Finalizar ISR */
  77:../button.c   **** 	rINTMSK    &= ~(BIT_EINT4567); //habilitar interrupciones de botones
 2129              		.loc 1 77 0
 2130 012c 50309FE5 		ldr	r3, .L8
 2131 0130 4C209FE5 		ldr	r2, .L8
 2132 0134 002092E5 		ldr	r2, [r2, #0]
 2133 0138 0226C2E3 		bic	r2, r2, #2097152
 2134 013c 002083E5 		str	r2, [r3, #0]
  78:../button.c   **** 	rEXTINTPND = 0xf;				// borra los bits en EXTINTPND
 2135              		.loc 1 78 0
 2136 0140 40309FE5 		ldr	r3, .L8+4
 2137 0144 0F20A0E3 		mov	r2, #15
 2138 0148 002083E5 		str	r2, [r3, #0]
  79:../button.c   **** 	rI_ISPC   |= BIT_EINT4567;		// borra el bit pendiente en INTPND
 2139              		.loc 1 79 0
 2140 014c 38309FE5 		ldr	r3, .L8+8
 2141 0150 34209FE5 		ldr	r2, .L8+8
 2142 0154 002092E5 		ldr	r2, [r2, #0]
 2143 0158 022682E3 		orr	r2, r2, #2097152
 2144 015c 002083E5 		str	r2, [r3, #0]
  80:../button.c   **** 	funcion_callback = callback;
 2145              		.loc 1 80 0
 2146 0160 28309FE5 		ldr	r3, .L8+12
 2147 0164 10201BE5 		ldr	r2, [fp, #-16]
 2148 0168 002083E5 		str	r2, [r3, #0]
  81:../button.c   **** 	/* Establece la rutina de servicio para Eint4567 */
  82:../button.c   **** 	pISR_EINT4567 = (int)Eint4567_ISR;
 2149              		.loc 1 82 0
 2150 016c 20309FE5 		ldr	r3, .L8+16
 2151 0170 20209FE5 		ldr	r2, .L8+20
 2152 0174 002083E5 		str	r2, [r3, #0]
  83:../button.c   **** #else
  84:../button.c   **** 	callback(button_iz);
  85:../button.c   **** #endif
  86:../button.c   **** }
 2153              		.loc 1 86 0
 2154 0178 0CD04BE2 		sub	sp, fp, #12
 2155 017c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2156 0180 1EFF2FE1 		bx	lr
 2157              	.L9:
 2158              		.align	2
 2159              	.L8:
 2160 0184 0C00E001 		.word	31457292
 2161 0188 5400D201 		.word	30539860
 2162 018c 2400E001 		.word	31457316
 2163 0190 00000000 		.word	funcion_callback
 2164 0194 74FF7F0C 		.word	209715060
 2165 0198 00000000 		.word	Eint4567_ISR
 2166              		.cfi_endproc
 2167              	.LFE2:
 2169              		.align	2
 2170              		.global	button_estado
 2172              	button_estado:
 2173              	.LFB3:
  87:../button.c   **** 
  88:../button.c   **** estado_button button_estado(){
 2174              		.loc 1 88 0
 2175              		.cfi_startproc
 2176              		@ Function supports interworking.
 2177              		@ args = 0, pretend = 0, frame = 0
 2178              		@ frame_needed = 1, uses_anonymous_args = 0
 2179 019c 0DC0A0E1 		mov	ip, sp
 2180              	.LCFI6:
 2181              		.cfi_def_cfa_register 12
 2182 01a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2183 01a4 04B04CE2 		sub	fp, ip, #4
 2184              		.cfi_offset 14, -8
 2185              		.cfi_offset 13, -12
 2186              		.cfi_offset 11, -16
 2187              	.LCFI7:
 2188              		.cfi_def_cfa 11, 4
  89:../button.c   **** #ifndef EMU
  90:../button.c   **** 	if((rPDATG & 0x40) ==0){
 2189              		.loc 1 90 0
 2190 01a8 44309FE5 		ldr	r3, .L14
 2191 01ac 003093E5 		ldr	r3, [r3, #0]
 2192 01b0 403003E2 		and	r3, r3, #64
 2193 01b4 000053E3 		cmp	r3, #0
 2194 01b8 0100001A 		bne	.L11
  91:../button.c   **** 		return button_iz;
 2195              		.loc 1 91 0
 2196 01bc 0430A0E3 		mov	r3, #4
 2197 01c0 070000EA 		b	.L12
 2198              	.L11:
  92:../button.c   **** 	}
  93:../button.c   **** 	if((rPDATG & 0x80) ==0){
 2199              		.loc 1 93 0
 2200 01c4 28309FE5 		ldr	r3, .L14
 2201 01c8 003093E5 		ldr	r3, [r3, #0]
 2202 01cc 803003E2 		and	r3, r3, #128
 2203 01d0 000053E3 		cmp	r3, #0
 2204 01d4 0100001A 		bne	.L13
  94:../button.c   **** 		return button_dr;
 2205              		.loc 1 94 0
 2206 01d8 0830A0E3 		mov	r3, #8
 2207 01dc 000000EA 		b	.L12
 2208              	.L13:
  95:../button.c   **** 	}
  96:../button.c   **** #endif
  97:../button.c   ****  return button_none;
 2209              		.loc 1 97 0
 2210 01e0 0030A0E3 		mov	r3, #0
 2211              	.L12:
  98:../button.c   **** 
  99:../button.c   **** }
 2212              		.loc 1 99 0
 2213 01e4 0300A0E1 		mov	r0, r3
 2214 01e8 0CD04BE2 		sub	sp, fp, #12
 2215 01ec 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2216 01f0 1EFF2FE1 		bx	lr
 2217              	.L15:
 2218              		.align	2
 2219              	.L14:
 2220 01f4 4400D201 		.word	30539844
 2221              		.cfi_endproc
 2222              	.LFE3:
 2224              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 button.c
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:1964   .bss:00000000 $d
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:1965   .bss:00000000 int_count
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:1970   .bss:00000004 boton_pulsado
                            *COM*:00000004 funcion_callback
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:1974   .text:00000000 $a
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:1977   .text:00000000 Eint4567_ISR
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2022   .text:00000054 $d
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2028   .text:00000060 $a
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2031   .text:00000060 button_iniciar
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2096   .text:000000f8 $d
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2107   .text:00000118 $a
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2110   .text:00000118 button_empezar
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2160   .text:00000184 $d
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2169   .text:0000019c $a
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2172   .text:0000019c button_estado
C:\Users\Ivo\AppData\Local\Temp\cctAysVE.s:2220   .text:000001f4 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
